knob_name,type,description,DBMS,cluster
activate_all_roles_on_login,Boolean,"The MySQL configuration parameter activate_all_roles_on_login controls whether all available roles associated with the user account will be enabled upon login. When set to 'ON', users will automatically have access to all roles granted to them without the need to explicitly activate each role separately. This feature is available starting from MySQL version 8.0.17.",MySQL,0
admin_ssl_ca,File name,The MySQL configuration parameter admin_ssl_ca is used to specify the path to the X.509 certificate authority file in PEM format for SSL connections established by administrative clients. This parameter is applicable in MySQL 5.7 and later versions. It facilitates the validation of SSL connections established by administrative clients with the MySQL server.,MySQL,0
admin_ssl_capath,Directory name,The MySQL configuration parameter admin_ssl_capath specifies the file path to the directory containing trusted CA certificates for verifying server certificates in SSL connections used by administrative accounts. This parameter is available in MySQL 5.7.22 and later versions. It allows MySQL administrative users to establish secure SSL connections by defining the path where the trusted certificate authority (CA) certificates are stored.,MySQL,0
admin_ssl_cert,File name,The `admin_ssl_cert` MySQL configuration parameter specifies the path to the SSL certificate file used by the server for secure connections with administrative clients. This parameter is applicable when MySQL is configured to require SSL connections for administrative tasks. It is important to provide the correct path to the SSL certificate file to ensure secure communication between the server and administrative clients.,MySQL,0
admin_ssl_cipher,String,"The `admin_ssl_cipher` parameter in MySQL enables specifying the cipher for connections using SSL between the MySQL server and the MySQL Enterprise Monitor. This parameter allows administrators to configure the encryption strength for the communication channel, ensuring secure data transfer over SSL. It is applicable to MySQL versions that support MySQL Enterprise Monitor integration.",MySQL,0
admin_ssl_crl,File name,The MySQL configuration parameter `admin_ssl_crl` specifies the file path to the Certificate Revocation List (CRL) file used by the server for checking the revocation status of X.509 certificates presented by clients for authentication. This parameter is applicable only when MySQL is built with OpenSSL support and is used to enhance security by ensuring that client certificates have not been revoked. The `admin_ssl_crl` parameter is available starting from MySQL 5.7.26 and 8.0.16 versions.,MySQL,0
admin_ssl_crlpath,Directory name,The MySQL configuration parameter admin_ssl_crlpath specifies the file path to the Certificate Revocation List (CRL) for SSL verification when connecting as an administrator. This parameter is applicable in MySQL 5.7.10 and later versions. It allows MySQL administrators to enhance security by checking the revocation status of SSL certificates used for connections.,MySQL,0
admin_ssl_key,File name,"The `admin_ssl_key` MySQL configuration parameter specifies the path to the private key file used for establishing SSL connections between the MySQL server and the administrator client. This parameter is used to enable secure communication for administrative tasks, such as connecting via MySQL client tools in encrypted mode. It is available in MySQL 5.7 and later versions.",MySQL,0
admin_tls_ciphersuites,String,"The `admin_tls_ciphersuites` MySQL configuration parameter specifies the acceptable TLS ciphersuites for connections handled by administrative accounts, such as those used to manage the server over a secure connection. This parameter allows administrators to fine-tune the security settings for these connections, ensuring only specific ciphersuites are allowed for administrative tasks. `admin_tls_ciphersuites` is available starting from MySQL 8.0.26.",MySQL,0
admin_tls_version,String,"The `admin_tls_version` MySQL configuration parameter specifies the version of TLS protocol used for secure connections between MySQL administrative clients and the server. It determines the allowed TLS versions for administrative connections, ensuring secure communication between clients and the MySQL server. This parameter is available in MySQL 5.7.47 and later versions.",MySQL,0
audit_log_connection_policy,Enumeration,"The `audit_log_connection_policy` parameter in MySQL specifies the connection audit logging policy, determining the level of detail to be recorded for each connection attempt. This parameter allows setting the level of details to be included in the audit log for connection-related events, aiding in monitoring and compliance requirements. It is available in MySQL Community Server version 8.0.20 and later.",MySQL,0
audit_log_disable,Boolean,"Parameter Name: audit_log_disable

Description:
- The `audit_log_disable` parameter in MySQL server controls whether the audit log plugin is disabled or enabled. When set to 1, the audit log plugin is disabled, preventing audit logging functionality. Setting it to 0 enables the audit log plugin to log audit events according to the defined configurations.

(Note: The `audit_log_disable` parameter is available starting from MySQL 8.0.20 and later versions.)",MySQL,0
audit_log_exclude_accounts,String,"The `audit_log_exclude_accounts` parameter in MySQL specifies a list of account names that should be excluded from audit logging. When this parameter is set, the specified accounts' actions will not be recorded in the audit log, providing a way to prevent certain accounts from being audited. This parameter was introduced in MySQL 5.7.20 for use with the MySQL Enterprise Edition.",MySQL,0
audit_log_flush,Boolean,"The `audit_log_flush` MySQL configuration parameter specifies the frequency at which the audit log is written to disk. Setting this parameter allows for the control of how often the audit log data is flushed from memory to disk storage, helping to ensure data integrity while managing performance overhead. This parameter is available in MySQL Server 5.7.20 and later versions.",MySQL,0
audit_log_format_unix_timestamp,Boolean,"The `audit_log_format_unix_timestamp` MySQL configuration parameter specifies the format for recording timestamps in the audit log when using the JSON format. When enabled, this option outputs timestamps in Unix timestamp format. This feature was introduced in MySQL 8.0.20 for auditing purposes.",MySQL,0
audit_log_include_accounts,String,"The `audit_log_include_accounts` configuration parameter in MySQL is used to specify a comma-separated list of MySQL user accounts whose activities should be included in the audit log. This parameter allows you to focus audit logging on specific user accounts, helping to track and monitor their actions within the MySQL server. This parameter is available in MySQL version 5.7.20 and higher.",MySQL,0
audit_log_max_size,Integer,"The `audit_log_max_size` parameter in MySQL specifies the maximum size in bytes for the audit log file. When the audit log reaches this size, MySQL ceases logging operations to prevent the log file from growing indefinitely. This parameter helps control the audit log file size and can be set to limit disk space usage.",MySQL,0
audit_log_password_history_keep_days,Integer,"The `audit_log_password_history_keep_days` MySQL configuration parameter specifies the duration in days for retaining password history in the audit log. Password changes are recorded in the audit log, and this parameter determines how long the history of old passwords should be kept before being removed. This parameter is available in MySQL versions 8.0.13 and later.",MySQL,0
audit_log_prune_seconds,Integer,"The `audit_log_prune_seconds` MySQL configuration parameter specifies the time interval, in seconds, for automatically removing older audit log files. Setting this parameter determines how frequently the MySQL server performs the pruning of audit log files based on when they were last modified. The default value for this parameter is 1 day (86400 seconds). This parameter is available starting from MySQL 8.0.24.",MySQL,0
audit_log_read_buffer_size,Integer,The audit_log_read_buffer_size parameter in MySQL defines the size of the buffer used for reading entries from the audit log. This parameter can be adjusted to optimize audit log reading performance based on the system requirements. It does not affect the audit log writing process. This parameter is available in MySQL version 8.0 and above.,MySQL,0
audit_log_rotate_on_size,Integer,"The `audit_log_rotate_on_size` parameter in MySQL specifies whether the audit log should be rotated based on its size. When set to `ON`, the audit log is rotated when it reaches the specified size limit, as defined by the `audit_log_rotate_size` parameter. This parameter is available in MySQL Server 5.7.20 and later versions.",MySQL,0
audit_log_statement_policy,Enumeration,"The `audit_log_statement_policy` parameter in MySQL defines the level of detail logged for audited statements in the audit log. It allows you to specify whether to log all statements, only failed statements, or no statements. This parameter is available starting from MySQL 5.7. MySQL 8.0 extends its functionality.",MySQL,0
authentication_kerberos_service_principal,String,The authentication_kerberos_service_principal MySQL configuration parameter specifies the Kerberos service principal name used for authentication. It allows configuring MySQL to authenticate clients against a Kerberos server using the specified service principal name. This parameter is available in MySQL 8.0 and newer versions.,MySQL,0
authentication_ldap_sasl_auth_method_name,String,The `authentication_ldap_sasl_auth_method_name` MySQL configuration parameter specifies the SASL authentication method name used to authenticate the LDAP user with the server. This parameter is relevant for the LDAP authentication plugin when using SASL authentication in MySQL Server. It is not deprecated and is available in MySQL 8.0 and later versions.,MySQL,0
authentication_ldap_sasl_bind_base_dn,String,The MySQL configuration parameter authentication_ldap_sasl_bind_base_dn specifies the base distinguished name (DN) for LDAP authentication SASL binds. It is used to define the starting point in the directory tree for LDAP searches during SASL authentication. This parameter is applicable to MySQL versions that support LDAP authentication and SASL mechanisms.,MySQL,0
authentication_ldap_sasl_bind_root_dn,String,The `authentication_ldap_sasl_bind_root_dn` parameter in MySQL specifies the DN (Distinguished Name) used by the server to bind when SASL (Simple Authentication and Security Layer) is enabled for LDAP authentication. This parameter is utilized when the server needs to bind to the LDAP server using a specific DN before attempting user authentication. It is typically set to the root DN of the LDAP directory.,MySQL,0
authentication_ldap_sasl_bind_root_pwd,String,The `authentication_ldap_sasl_bind_root_pwd` parameter in MySQL is used to specify the password for the SASL bind operation when authenticating with an LDAP server. It is part of the LDAP authentication process and is required when connecting to the LDAP server with SASL authentication. This parameter is available in MySQL 5.5.16 and later versions.,MySQL,0
authentication_ldap_sasl_ca_path,String,The `authentication_ldap_sasl_ca_path` parameter in MySQL is used to specify the path to the directory containing SSL CA certificates for LDAP server certificate verification during SASL authentication. This parameter is applicable when using LDAP authentication with the Cyrus SASL library. It is available in MySQL 5.7 and later versions.,MySQL,0
authentication_ldap_sasl_connect_timeout,Integer,"The `authentication_ldap_sasl_connect_timeout` MySQL configuration parameter specifies the time limit, in seconds, for connecting to an LDAP server when using SASL authentication. This parameter is relevant when MySQL is configured to authenticate users against an LDAP server using SASL (Simple Authentication and Security Layer) mechanisms. It controls the maximum duration the server will wait for a connection attempt before considering it as failed. This parameter is available in MySQL 5.7 and later versions.",MySQL,0
authentication_ldap_sasl_group_search_attr,String,The `authentication_ldap_sasl_group_search_attr` MySQL configuration parameter is used to specify the LDAP attribute to be used for searching when locating groups. This parameter is applicable if LDAP authentication is enabled and SASL is supported in the server configuration. The parameter helps in defining the attribute used to search groups in LDAP during authentication processes.,MySQL,0
authentication_ldap_sasl_group_search_filter,String,The `authentication_ldap_sasl_group_search_filter` parameter in MySQL controls the LDAP authentication plugin's group search filter when using SASL authentication. It allows specifying a filter pattern to search for user groups within the LDAP directory. This parameter is available in MySQL versions where LDAP authentication and SASL support are present.,MySQL,0
authentication_ldap_sasl_init_pool_size,Integer,The `authentication_ldap_sasl_init_pool_size` parameter in MySQL configures the size of the LDAP connection pool created when performing LDAP-based authentication with SASL (Simple Authentication and Security Layer). This setting impacts the initial number of connections established for LDAP authentication to handle concurrent authentications efficiently. It is applicable to MySQL server versions supporting LDAP authentication with SASL.,MySQL,0
authentication_ldap_sasl_log_status,Integer,"The MySQL configuration parameter `authentication_ldap_sasl_log_status` is not a standard MySQL server parameter based on the official MySQL documentation. If you are looking for LDAP-related authentication configuration in MySQL, you may consider `ldap_server_host`, `ldap_server_port`, and other LDAP-related options for setting up LDAP authentication through `CREATE SERVER` and `CREATE USER` statements. Always refer to the latest MySQL documentation for the most up-to-date configuration options.",MySQL,0
authentication_ldap_sasl_max_pool_size,Integer,The `authentication_ldap_sasl_max_pool_size` parameter in MySQL configures the maximum number of connections allowed in the pool used for LDAP authentication with SASL (Simple Authentication and Security Layer). This setting helps control resource usage and can be adjusted to optimize performance based on LDAP authentication requirements. Ensure to set this value appropriately to efficiently manage the connections needed for LDAP authentication in MySQL.,MySQL,0
authentication_ldap_sasl_referral,Boolean,The `authentication_ldap_sasl_referral` MySQL configuration parameter is used to specify the LDAP referral behavior when using SASL authentication with LDAP. This parameter controls how the server should handle referrals received from the LDAP server during the authentication process. It allows the MySQL server to follow LDAP referrals to complete the authentication process securely. This parameter is available in MySQL 8.0 and later versions.,MySQL,0
authentication_ldap_sasl_response_timeout,Integer,"The authentication_ldap_sasl_response_timeout MySQL configuration parameter specifies the timeout, in milliseconds, for receiving responses during the LDAP SASL authentication process. This parameter is relevant for MySQL servers that are configured to use LDAP for user authentication. It helps control the duration within which the server waits for responses from the LDAP server during the authentication process.",MySQL,0
authentication_ldap_sasl_server_host,String,The `authentication_ldap_sasl_server_host` MySQL configuration parameter specifies the hostname or IP address of the LDAP server used for SASL-based authentication. This parameter is used when MySQL server needs to authenticate users against an LDAP directory using the SASL (Simple Authentication and Security Layer) protocol. The value should be set to the address of the LDAP server that supports SASL authentication.,MySQL,0
authentication_ldap_sasl_server_port,Integer,The `authentication_ldap_sasl_server_port` MySQL configuration parameter specifies the port number on which the LDAP  Simple Authentication and Security Layer (SASL) server listens for connections. This parameter is utilized for configuring LDAP authentication with SASL support in MySQL Server. It is recommended to consult the MySQL documentation for detailed information on setting up and utilizing this parameter effectively.,MySQL,0
authentication_ldap_sasl_tls,Boolean,The `authentication_ldap_sasl_tls` MySQL configuration parameter enables the use of TLS (Transport Layer Security) for securing communication during LDAP authentication. This parameter is used to enforce secure connections between the MySQL server and the LDAP server when using Simple Authentication and Security Layer (SASL) for authentication. It is available in MySQL 5.7 and later versions.,MySQL,0
authentication_ldap_sasl_user_search_attr,String,"The `authentication_ldap_sasl_user_search_attr` configuration parameter in MySQL defines the LDAP attribute used to search for the user during Simple Authentication and Security Layer (SASL) LDAP authentication. This parameter specifies the LDAP attribute that uniquely identifies the user, allowing MySQL to locate and authenticate the user in the LDAP directory. The parameter is applicable for MySQL versions 5.6 and later.",MySQL,0
authentication_ldap_simple_auth_method_name,String,The authentication_ldap_simple_auth_method_name MySQL configuration parameter specifies the simple authentication method name for LDAP authentication. This parameter is used when authenticating MySQL users with an LDAP server using the simple authentication method. It is available in MySQL 8.0 and onwards.,MySQL,0
authentication_ldap_simple_bind_base_dn,String,The parameter `authentication_ldap_simple_bind_base_dn` in MySQL is used to specify the base DN (Distinguished Name) for simple LDAP (Lightweight Directory Access Protocol) authentication. This setting allows MySQL to bind to the LDAP directory using the provided base DN during authentication operations. It is available in MySQL server versions that support LDAP authentication.,MySQL,0
authentication_ldap_simple_bind_root_dn,String,The ```authentication_ldap_simple_bind_root_dn``` configuration parameter in MySQL specifies the LDAP distinguished name (DN) used for simple binding when connecting to the LDAP server for user authentication. This parameter is only applicable when MySQL is configured to use LDAP for user authentication. It helps specify the root DN under which MySQL searches for user entries in the LDAP directory server. The parameter is available in MySQL 5.5 and later versions.,MySQL,0
authentication_ldap_simple_bind_root_pwd,String,The MySQL configuration parameter authentication_ldap_simple_bind_root_pwd specifies the password that is used in conjunction with the authentication_ldap_simple_bind_root_dn parameter for simple LDAP authentication. This parameter is applicable for MySQL Community Server versions 8.0.11 and later. It should be configured with the appropriate LDAP server root user password to enable LDAP authentication.,MySQL,0
authentication_ldap_simple_ca_path,String,The `authentication_ldap_simple_ca_path` MySQL configuration parameter specifies the path to the directory containing the certificate authority (CA) certificates for LDAP over SSL/TLS connections when using simple authentication. MySQL uses these CA certificates to validate the LDAP server's certificate. This parameter helps ensure secure communication between the MySQL server and the LDAP server. This parameter is available in MySQL 8.0 and later versions.,MySQL,0
authentication_ldap_simple_connect_timeout,Integer,"The `authentication_ldap_simple_connect_timeout` parameter in MySQL is used to define the timeout value, in seconds, for simple LDAP authentication connections. This parameter determines how long MySQL will wait for establishing a simple LDAP connection before timing out. It is applicable for MySQL versions that support LDAP authentication features.",MySQL,0
authentication_ldap_simple_group_search_attr,String,The `authentication_ldap_simple_group_search_attr` MySQL configuration parameter is used to specify the LDAP attribute for simple group searching during LDAP authentication. This parameter allows MySQL server to search for groups in LDAP using the defined attribute when authenticating users. It is relevant for MySQL 5.5.11 and later versions.,MySQL,0
authentication_ldap_simple_group_search_filter,String,The `authentication_ldap_simple_group_search_filter` MySQL configuration parameter specifies the LDAP search filter used when looking up groups for Simple LDAP authentication. It allows you to customize the LDAP search filter used to find group information during authentication with an LDAP server. This parameter is available in MySQL 5.7.11 and later versions.,MySQL,0
authentication_ldap_simple_init_pool_size,Integer,"The authentication_ldap_simple_init_pool_size parameter in MySQL specifies the initial size of the pool used by the LDAP authentication plugin for simple authentication. The pool is used to cache LDAP connections, reducing the overhead of creating new connections for authentication requests. This parameter is available in MySQL 8.0 and later versions.",MySQL,0
authentication_ldap_simple_log_status,Integer,"The authentication_ldap_simple_log_status parameter in MySQL controls whether LDAP-based authentication failures are recorded in the error log. When enabled, authentication failures due to LDAP authentication issues are logged, providing visibility into potential authentication problems with LDAP configurations. This parameter is available starting from MySQL version 8.0.3.",MySQL,0
authentication_ldap_simple_max_pool_size,Integer,The MySQL configuration parameter `authentication_ldap_simple_max_pool_size` determines the maximum number of pooled LDAP connections for simple authentication. This setting helps optimize LDAP authentication performance by limiting the number of active connections to the LDAP server. The parameter is applicable to MySQL Server versions that support LDAP authentication.,MySQL,0
authentication_ldap_simple_referral,Boolean,"The `authentication_ldap_simple_referral` MySQL configuration parameter is used to control how LDAP referrals are handled during authentication. When set to 'TRUE', the server will follow LDAP referrals according to the LDAP specification. This parameter is available in MySQL 5.5.44 and later versions.",MySQL,0
authentication_ldap_simple_response_timeout,Integer,"The `authentication_ldap_simple_response_timeout` MySQL configuration parameter sets the timeout, in seconds, for simple LDAP response retrieval during the LDAP authentication process. This parameter specifies how long MySQL waits for a response from the LDAP server before timing out. It is applicable in scenarios where MySQL is configured to use LDAP for user authentication.",MySQL,0
authentication_ldap_simple_server_host,String,The `authentication_ldap_simple_server_host` configuration parameter in MySQL specifies the host name or IP address of the LDAP server responsible for handling user authentication through LDAP simple bind authentication. This parameter is used when MySQL is configured to authenticate users against an LDAP server using simple authentication. It is available in MySQL version 8.0 and later.,MySQL,0
authentication_ldap_simple_server_port,Integer,The `authentication_ldap_simple_server_port` MySQL configuration parameter defines the port number used for LDAP authentication when connecting to an LDAP server using simple authentication. This parameter specifies the port where the LDAP server listens for incoming connection requests from MySQL for authentication purposes. The default value for this parameter is typically 389 for non-secured connections or 636 for SSL-secured connections.,MySQL,0
authentication_ldap_simple_tls,Boolean,"The `authentication_ldap_simple_tls` MySQL configuration parameter enables the use of Transport Layer Security (TLS) for establishing secure connections when authenticating with an LDAP server using the simple bind method. It is used to encrypt LDAP communication between the MySQL server and the LDAP server, ensuring data confidentiality and integrity. This parameter is available in MySQL 5.7 and later versions.",MySQL,0
authentication_ldap_simple_user_search_attr,String,The MySQL configuration parameter 'authentication_ldap_simple_user_search_attr' specifies the LDAP attribute used for searching user entries during LDAP authentication. This parameter is utilized to configure the attribute which MySQL server will search for when authenticating users against an LDAP server. This option is available from MySQL version 8.0.17 onwards.,MySQL,0
authentication_policy,String,"The `authentication_policy` MySQL configuration parameter is used to define the password validation policy for user accounts. It determines the requirements and restrictions for creating and updating passwords, such as length, complexity, and expiration rules. This parameter was introduced in MySQL 8.0 to enhance security and flexibility in managing user authentication.",MySQL,0
authentication_webauthn_rp_id,String,The `authentication_webauthn_rp_id` MySQL configuration parameter specifies the Relying Party (RP) identifier when using WebAuthn for authentication within MySQL. This identifier helps establish trust between the MySQL server and the WebAuthn relying party during authentication processes. This parameter is available starting from MySQL 8.0.23.,MySQL,0
auto_increment_increment,Integer,The `auto_increment_increment` MySQL configuration parameter defines the increment value between successive AUTO_INCREMENT values. It is particularly useful in conjunction with `auto_increment_offset` for configuring how AUTO_INCREMENT columns generate unique values in a replication setup. The parameter is relevant for MySQL versions 5.6 and later.,MySQL,0
auto_increment_offset,Integer,"The MySQL configuration parameter ""auto_increment_offset"" specifies the starting point for auto-increment values in an auto-increment column. By setting this parameter, users can define a custom offset for the auto-increment values to begin from. This feature is available in MySQL 8.0 and later versions.",MySQL,0
autocommit,Boolean,"The 'autocommit' parameter in MySQL controls the automatic committing of transactions after each individual SQL statement is executed. When enabled, each statement is automatically committed to the database and cannot be rolled back. By default, autocommit is enabled in MySQL, meaning each statement is treated as a separate transaction that is committed immediately.",MySQL,0
automatic_sp_privileges,Boolean,"The `automatic_sp_privileges` MySQL configuration parameter, available from MySQL 8.0.26, controls whether definer privileges are automatically granted to stored programs during their creation. When set to `ON` (the default), the privileges of the definer account are assigned to the program without requiring manual grants. This feature simplifies permission management for stored procedures and functions.",MySQL,0
big_tables,Boolean,"The `big_tables` MySQL configuration parameter is no longer available as of MySQL 5.7. It was used to improve performance when working with large tables by allocating more memory for certain internal buffers. However, its functionality has been incorporated into other areas of MySQL optimization, making the `big_tables` parameter obsolete.",MySQL,0
binlog_cache_size,Integer,The `binlog_cache_size` parameter in MySQL specifies the size of the cache for binary log events. This cache is used to hold events before they are written to the binary log. Adjusting this parameter can impact the performance of writing binary log events in scenarios with high write activity. The default value for `binlog_cache_size` in MySQL is 32KB.,MySQL,0
binlog_checksum,String,"The MySQL configuration parameter `binlog_checksum` specifies the type of checksum used for binary log events before being written to the binary log file. This parameter helps ensure the integrity of the binary log data and can be set to values such as `NONE`, `CRC32`, or `CRC32C`. The `binlog_checksum` parameter is available in MySQL version 5.6.6 and later.",MySQL,0
binlog_direct_non_transactional_updates,Boolean,"The `binlog_direct_non_transactional_updates` MySQL configuration parameter enables direct writing of non-transactional updates to the binary log without buffering. This allows non-transactional updates to be written immediately to the binary log, improving replication performance. This parameter is available starting from MySQL version 5.6.5.",MySQL,0
binlog_encryption,Boolean,"The `binlog_encryption` parameter in MySQL enables encryption of binary log files to enhance security when replicating data between servers. By setting this parameter, the binary log files are encrypted, making it more challenging for unauthorized users to access sensitive data during replication processes. It is available in MySQL 8.0 and later versions.",MySQL,0
binlog_error_action,Enumeration,"The `binlog_error_action` parameter in MySQL determines the behavior of the server when errors occur during binary logging. It allows configuring whether the server should ignore errors, write them to the error log, or stop binary logging when errors are encountered. This parameter is available in MySQL 8.0 and later versions.",MySQL,0
binlog_expire_logs_auto_purge,Boolean,"The `binlog_expire_logs_auto_purge` configuration parameter in MySQL controls whether the binary log files are automatically purged by the server based on the expiration criteria. When enabled, it allows MySQL to automatically remove binary log files that are no longer needed, based on the specified criteria such as ""expire_logs_days"". This parameter helps in managing disk space by automatically removing old binary log files without manual intervention.",MySQL,0
binlog_expire_logs_seconds,Integer,The MySQL configuration parameter `binlog_expire_logs_seconds` specifies the number of seconds before binary log files are automatically purged. This helps manage the amount of disk space used by the binary logs. It is available in MySQL 5.6.23 and later versions.,MySQL,0
binlog_format,Enumeration,"The `binlog_format` MySQL configuration parameter determines the format of binary log events sent to the binary log file. This setting impacts the type of replication that can be supported (statement-based, row-based, or mixed) and influences the performance and data consistency of replication processes. The possible values for `binlog_format` are `STATEMENT`, `ROW`, and `MIXED`.",MySQL,0
binlog_group_commit_sync_delay,Integer,"The `binlog_group_commit_sync_delay` parameter in MySQL determines the time delay, in microseconds, for a group commit operation to wait before synchronizing binary log to disk. This parameter helps optimize the trade-off between commit latency and throughput in systems with high transaction rates. It is available starting from MySQL version 5.7.9.",MySQL,0
binlog_group_commit_sync_no_delay_count,Integer,"The `binlog_group_commit_sync_no_delay_count` parameter in MySQL determines the number of transactions to be committed in the binary log group commit mode before the sync operation is delayed. By adjusting this parameter, users can control the frequency at which the sync operation occurs, affecting the balance between performance and durability in write-heavy workloads. This parameter is available starting from MySQL 5.7.9.",MySQL,0
binlog_max_flush_queue_time,Integer,"The `binlog_max_flush_queue_time` parameter in MySQL specifies the maximum time in milliseconds that a binary log commit thread will wait for its flush operations to complete. Once the specified time threshold is reached, pending transactions will be forcibly committed to disk, improving durability guarantees. This parameter is available in MySQL 5.7.27 and later versions.",MySQL,0
binlog_order_commits,Boolean,"The `binlog_order_commits` parameter in MySQL controls the ordering of transactions in the binary log based on their commit order. When enabled, transactions are written to the binary log in the exact order in which they are committed on the server. This can be useful for ensuring consistency in replication scenarios. This parameter is available in MySQL 8.0 and later versions.",MySQL,0
binlog_row_image,Enumeration,"The binlog_row_image MySQL configuration parameter determines how row changes are logged in the binary log. It controls the format in which individual rows are written when changes are made to tables. Possible values for binlog_row_image are 'FULL', 'MINIMAL', and 'NOBLOB', influencing the granularity and volume of data captured in the binary log. This parameter is available starting from MySQL version 8.0.1.",MySQL,0
binlog_row_metadata,Enumeration,"The `binlog_row_metadata` parameter in MySQL is used to control the inclusion of additional metadata for row events in binary log files. When enabled, this metadata includes the database name and table name to provide more context about the changes being logged. This parameter is available starting from MySQL version 8.0.14.",MySQL,0
binlog_row_value_options,Set,The `binlog_row_value_options` configuration parameter in MySQL specifies a comma-separated list of flags that control the inclusion of metadata in row-based binary log events. This parameter allows customization of the data included in binary log events for row-based replication. It is available starting from MySQL version 8.0.23.,MySQL,0
binlog_rows_query_log_events,Boolean,The MySQL configuration parameter `binlog_rows_query_log_events` specifies the number of rows logged for query events replicated through binary logging. This parameter controls the minimum number of rows that must be changed in a table for the event to be logged to the binary log. The `binlog_rows_query_log_events` parameter is available in MySQL 8.0 and later versions.,MySQL,0
binlog_stmt_cache_size,Integer,The `binlog_stmt_cache_size` parameter in MySQL specifies the size in bytes of the statement cache within the binary log cache. This cache stores the text of statements that modify the database to reduce the overhead of writing statements to the binary log. It is available starting from MySQL version 5.7.5.,MySQL,0
binlog_transaction_compression,Boolean,The MySQL configuration parameter `binlog_transaction_compression` enables the compression of intermediate transaction states before being written to the binary log. This feature can help reduce the storage overhead of binary logs and can be useful in scenarios where disk space optimization is a priority. This parameter is available starting from MySQL version 5.7.8.,MySQL,0
binlog_transaction_compression_level_zstd,Integer,"Parameter Name: binlog_transaction_compression_level_zstd

Description: Controls the compression level used for Zstd compression on transactional binary logs (binlogs) in MySQL. The parameter specifies the compression level for the Zstandard (Zstd) algorithm applied to transactions recorded in the binary log files. The compression level ranges from 1 (lowest, fastest) to 22 (highest, slowest), allowing for a balance between compression ratio and performance.",MySQL,0
binlog_transaction_dependency_history_size,Integer,The `binlog_transaction_dependency_history_size` parameter in MySQL configures the number of transactions retained in the history list by the binary log group commit mechanism. This parameter helps optimize the performance of group commits by tracking dependencies among transactions. It is available in MySQL 8.0 and newer versions.,MySQL,0
block_encryption_mode,String,"The `block_encryption_mode` parameter in MySQL specifies the block cipher mode used for encryption operations in the InnoDB storage engine. It allows users to choose between different encryption modes such as AES modes like cbc, ctr, and gcm. This parameter was introduced in MySQL 5.7.11 and is available in later versions.",MySQL,0
bulk_insert_buffer_size,Integer,"The `bulk_insert_buffer_size` parameter in MySQL determines the size of the buffer used for bulk insert optimization. When performing bulk inserts, this buffer can help improve insertion performance by reducing disk I/O. It is recommended to adjust this parameter based on the size of the data being inserted to optimize performance. This parameter is applicable to MySQL versions up to 5.7.",MySQL,0
character_set_client,String,The `character_set_client` MySQL configuration parameter specifies the character set used by the client when sending data to the server. It determines how the client encodes its queries before sending them to the server. This parameter helps ensure proper communication between the client and server by defining the character set compatibility.,MySQL,0
character_set_connection,String,The `character_set_connection` parameter in MySQL defines the character set to be used for the connection between the client and server. The specified character set determines how data is interpreted and displayed. This parameter can be set at both the server and session level to ensure consistent encoding throughout database operations.,MySQL,0
character_set_database,String,"The `character_set_database` MySQL configuration parameter specifies the character set encoding to be used for the database. By setting this parameter, you can define the character set for data stored within the database. It ensures consistent encoding for text data at the database level. This parameter is available in MySQL versions 5.6 and above.",MySQL,0
character_set_filesystem,String,The `character_set_filesystem` MySQL configuration parameter defines the character set used to interpret strings stored in file names. This parameter can enforce the character set conversion for file system operations such as LOAD DATA INFILE or providing file names to SQL statements. It is a session-level variable and does not require a server restart to take effect.,MySQL,0
character_set_results,String,"The `character_set_results` MySQL configuration parameter specifies the character set in which query results are returned to the client. This setting determines the encoding used for result sets, enabling compatibility between the server and client for proper data display. It can be adjusted to align with the client's character set requirements, ensuring accurate data presentation.",MySQL,0
character_set_server,String,"The `character_set_server` MySQL configuration parameter specifies the character set in which the server operates for data storage and retrieval. This setting determines the default character set used for data stored in tables, sent by the server to clients, and received from clients. It is essential for ensuring data consistency and proper encoding handling within the server environment.",MySQL,0
check_proxy_users,Boolean,"The ""check_proxy_users"" MySQL configuration parameter is used to enable proxy user mapping validation within the server. When enabled, MySQL will verify that proxy users listed in the mysql.proxies_priv table have the necessary privileges to execute operations on behalf of the proxied users. This parameter is available starting from MySQL version 8.0.16.",MySQL,0
clone_autotune_concurrency,Boolean,The `clone_autotune_concurrency` MySQL configuration parameter is not a recognized or documented server parameter in MySQL. It seems to be a fictitious parameter and does not correspond to any official MySQL feature or setting. It is recommended to review the official MySQL documentation for accurate information on available server parameters.,MySQL,0
clone_block_ddl,Boolean,"The `clone_block_ddl` MySQL configuration parameter is not a standard MySQL server parameter found in the official MySQL documentation. Please ensure you have the correct parameter name, or consider checking the latest MySQL documentation for any additions or changes to server parameters.",MySQL,0
clone_buffer_size,Integer,"The `clone_buffer_size` parameter in MySQL specifies the size of the buffer used during clone operations, such as when taking a binary log position for replication or creating a clone instance. This buffer is used to hold transferred data during the clone process to improve performance. It is available in MySQL 8.0 and later versions.",MySQL,0
clone_ddl_timeout,Integer,"The `clone_ddl_timeout` MySQL configuration parameter sets the timeout value for data definition language (DDL) operations during an asynchronous clone procedure. This parameter specifies the maximum amount of time, in seconds, the server waits for DDL operations to complete before timing out. This parameter is available starting from MySQL 8.0.21.",MySQL,0
clone_delay_after_data_drop,Integer,The `clone_delay_after_data_drop` MySQL configuration parameter specifies the delay in seconds before cloning operations start after data is dropped on the source during a clone operation. This parameter allows controlling the synchronization timing to avoid performance impact on the source system during cloning processes. This parameter is available starting from MySQL version 8.0.23.,MySQL,0
clone_donor_timeout_after_network_failure,Integer,"The `clone_donor_timeout_after_network_failure` MySQL configuration parameter specifies the maximum time, in milliseconds, that a clone donor server waits for network communication to be restored after a network failure. If the network connection is not reestablished within this timeframe, the server considers the network connection to be permanently lost and terminates the clone operation. This parameter is available in MySQL 8.0.23 and higher versions.",MySQL,0
clone_enable_compression,Boolean,"The `clone_enable_compression` MySQL configuration parameter is used to enable compression when cloning from an InnoDB tablespace. Setting this parameter to `ON` allows for the use of compression during the cloning process, which can help reduce the size of the cloned tablespace. This parameter is available starting from MySQL 8.0.19.",MySQL,0
clone_max_concurrency,Integer,"Parameter: clone_max_concurrency

Description:
clone_max_concurrency defines the maximum number of parallel clone threads allowed during cloning operations in MySQL Group Replication. By setting this parameter, you can control the concurrency level for the cloning process, which copies data from an existing member to a new group member. This parameter is available in MySQL 8.0.21 and later versions.",MySQL,0
clone_max_data_bandwidth,Integer,"The `clone_max_data_bandwidth` parameter in MySQL specifies the maximum bandwidth limit, in bytes per second, for the clone plugin data transfer during the cloning operation. This parameter helps control the rate at which data is transferred when cloning a database instance. It is available starting from MySQL 8.0.23.",MySQL,0
clone_max_network_bandwidth,Integer,"Parameter: clone_max_network_bandwidth

Description:
- The clone_max_network_bandwidth parameter in MySQL specifies the maximum bandwidth, in bytes per second, that InnoDB's clone feature can consume during the process of creating a clone instance replica from a source instance. 
- This setting helps control the network resources utilized during the creation of a clone instance, ensuring that the process does not overwhelm network capacity.
- The clone_max_network_bandwidth parameter is available in MySQL 8.0.18 and later versions.",MySQL,0
clone_ssl_ca,File name,The `clone_ssl_ca` MySQL configuration parameter specifies the location of the Certificate Authority (CA) file used by the CLONE DATA FROM operation for encrypted connections. This file contains the trusted root certificates needed to authenticate the server when creating a clone instance. This parameter is available starting from MySQL 8.0.26.,MySQL,0
clone_ssl_cert,File name,The `clone_ssl_cert` configuration parameter in MySQL controls whether the server's clone plugin generates a certificate file with the same contents as the original master server. This option can be set to enable or disable the behavior of generating a clone-specific SSL certificate. It is available starting from MySQL 8.0.23.,MySQL,0
clone_ssl_key,File name,The `clone_ssl_key` configuration parameter in MySQL is used to specify the path to the private key file for generating a clone instance's SSL key. This key is used for enabling Secure Sockets Layer (SSL) encryption for connections to the clone instance. The `clone_ssl_key` parameter is available starting from MySQL version 8.0.23.,MySQL,0
clone_valid_donor_list,String,The `clone_valid_donor_list` parameter in MySQL specifies a comma-separated list of server UUIDs that are allowed to donate data for cloning operations. This list ensures that only servers belonging to the specified UUIDs can be used as valid donors in a cloning process. This parameter is available starting from MySQL 8.0.22.,MySQL,0
collation_connection,String,"**Parameter Name:** collation_connection

**Description:**
The `collation_connection` parameter in MySQL determines the collation for the connection character set. It specifies which collation should be used for string comparison and sorting operations within the current client connection. This parameter allows setting the collation at the connection level, overriding the default collation for the database or server.",MySQL,0
collation_database,String,The `collation_database` parameter in MySQL specifies the default collation for databases created in the future. It sets the character set and collation to be used for database creation when no character set or collation is specified during database creation. It does not change the collation of existing databases. This parameter is not deprecated and is available in all recent versions of MySQL.,MySQL,0
collation_server,String,The collation_server parameter in MySQL specifies the default collation for database tables created if a specific collation is not specified during table creation. This parameter affects the string comparison and sorting behavior for data stored in the database. It is recommended to set this parameter to a collation appropriate for the data being stored to ensure consistency in text processing operations.,MySQL,0
completion_type,Enumeration,The `completion_type` MySQL configuration parameter specifies the method used for auto-completion suggestions in the MySQL Shell. It can be set to either `GLOBAL` or `MYSQL` to control whether global SQL completions should be displayed. This parameter is available starting from MySQL 8.0.23.,MySQL,0
component_scheduler.enabled,Boolean,"The `component_scheduler.enabled` MySQL configuration parameter determines whether the component-based scheduler functionality is enabled. When set to 1 (default), this feature allows MySQL to use a scheduler for executing internal tasks related to server components. Disabling this parameter (setting to 0) can change the behavior of certain server components that rely on internal scheduling mechanisms. This parameter is available starting from MySQL 8.0.22 and is not deprecated.",MySQL,0
concurrent_insert,Enumeration,"The `concurrent_insert` MySQL configuration parameter controls the behavior of concurrent inserts into a table. When set to a specified value, it allows concurrent insert operations to take place without blocking other operations on the table. This parameter is non-deprecated and applicable to all recent MySQL versions supporting concurrent inserts.",MySQL,0
connect_timeout,Integer,"The `connect_timeout` parameter in MySQL determines the maximum time in seconds that the server waits for a client connection. If a client cannot establish a connection within this timeframe, the server aborts the connection attempt. This timeout setting helps in managing the responsiveness of the server by preventing unnecessary delays in handling connection requests.",MySQL,0
connection_control_failed_connections_threshold,Integer,"The `connection_control_failed_connections_threshold` parameter in MySQL specifies the maximum number of failed connection attempts allowed before the connection is blocked. Once the threshold is reached, further connection attempts will be denied until the server is reset. It provides a mechanism to control and prevent excessive failed connection requests that could potentially impact server performance.",MySQL,0
connection_control_max_connection_delay,Integer,"The MySQL configuration parameter ""connection_control_max_connection_delay"" sets the maximum number of seconds that a server waits to establish a connection before returning an error to the client. This parameter helps manage the delay for establishing connections, allowing users to control the connection establishment process. It is available in MySQL 8.0 and later versions.",MySQL,0
connection_control_min_connection_delay,Integer,"The `connection_control_min_connection_delay` MySQL configuration parameter specifies the minimum delay in milliseconds before allowing a new incoming connection. This setting helps manage connection rate limits and can be used to prevent excessive connection attempts in a short period. Please note that this parameter is available starting from MySQL 8.0.                                
",MySQL,0
connection_memory_chunk_size,Integer,"The `connection_memory_chunk_size` parameter in MySQL is used to specify the chunk size for memory allocations related to client connections. By adjusting this parameter, you can control how much memory is allocated for each chunk when serving client connections. This parameter is not deprecated and is available in MySQL versions 8.0 and above.",MySQL,0
connection_memory_limit,Integer,"The `connection_memory_limit` parameter in MySQL configures the maximum amount of memory that can be allocated per client connection. This setting helps prevent individual client connections from consuming excessive memory, thus ensuring overall server stability and performance. As of my knowledge cutoff date in October 2021, this parameter is not a standard MySQL configuration variable and may not be officially supported; its usage might be limited to specific MySQL forks or custom builds.",MySQL,0
cte_max_recursion_depth,Integer,The `cte_max_recursion_depth` MySQL configuration parameter specifies the maximum recursion depth allowed for common table expressions (CTEs) in queries. It controls the number of recursive iterations a CTE can perform before terminating to prevent potential infinite loops. This parameter is available in MySQL 8.0. Recursive queries using CTEs rely on this setting to manage the depth of recursion needed for specific queries.,MySQL,0
debug,String,"The MySQL configuration parameter ""debug"" is not an officially recognized or supported option within the MySQL server. It is essential to refer to the official MySQL documentation for verified configuration parameters and options.",MySQL,0
debug_sync,String,The `debug_sync` MySQL configuration parameter is used for setting debug synchronization behavior to control how queries are executed when debugging server code. This parameter allows developers to simulate specific synchronization points or synchronization errors for debugging purposes. The `debug_sync` parameter is not recommended for production environments and is mainly intended for MySQL server code development and testing.,MySQL,0
default_collation_for_utf8mb4,Enumeration,The `default_collation_for_utf8mb4` MySQL configuration parameter specifies the default collation for character data in utf8mb4 columns. It allows setting the collation for new utf8mb4 column definitions when the `COLLATE` clause is omitted. This parameter helps ensure consistency in sorting and comparison operations for utf8mb4 character data within the database.,MySQL,0
default_password_lifetime,Integer,"The ""default_password_lifetime"" MySQL configuration parameter specifies the default expiration period in days for generated password hashes. User accounts that do not have a specific expiration set will adhere to this default setting. This feature was introduced in MySQL 5.7.4 and is not deprecated in the latest MySQL versions.",MySQL,0
default_storage_engine,Enumeration,The `default_storage_engine` MySQL configuration parameter is used to set the default storage engine to be used for new tables if no ENGINE option is specified during table creation. This parameter allows users to define a default storage engine that will be used unless overridden explicitly. It is supported in MySQL 5.5 and later versions.,MySQL,0
default_table_encryption,Boolean,"The `default_table_encryption` MySQL configuration parameter specifies the default encryption algorithm for InnoDB tables that do not have explicit encryption settings. This parameter allows administrators to set a default encryption method for InnoDB tables, helping to ensure data security at the table level. The `default_table_encryption` parameter is available from MySQL version 8.0.13 onwards.",MySQL,0
default_tmp_storage_engine,Enumeration,"The `default_tmp_storage_engine` MySQL configuration parameter specifies the storage engine to use for internal temporary tables created during query execution. It allows setting a specific storage engine, such as InnoDB or MyISAM, for managing temporary tables. This parameter is available in MySQL 8.0 and later versions.",MySQL,0
default_week_format,Integer,"The `default_week_format` MySQL configuration parameter specifies the default format used for the `WEEK()` function when no format is explicitly specified. The values range from 0 to 7, with 0 being equivalent to `WEEK(date, 0)` and 7 to `WEEK(date, 7)`, affecting the result of the function. This parameter is available in MySQL 8.0 and later versions.",MySQL,0
delay_key_write,Enumeration,"The `delay_key_write` MySQL configuration parameter delays the flushing of index blocks to disk after a write operation on an index. This helps optimize write performance by reducing the number of costly disk writes. However, it may increase the risk of index corruption if the server crashes before the index updates are flushed to disk. The `delay_key_write` parameter is supported in MySQL 5.7 and later versions.",MySQL,0
delayed_insert_limit,Integer,"The `delayed_insert_limit` MySQL configuration parameter specifies the maximum number of rows an INSERT DELAYED table can contain. When the limit is reached, subsequent rows are stored in a normal table. This parameter is relevant for MySQL versions up to 5.7 but has been deprecated in MySQL 8.0.",MySQL,0
delayed_insert_timeout,Integer,"The `delayed_insert_timeout` parameter in MySQL specifies the maximum time, in seconds, that an INSERT DELAYED statement can delay automatic row insertion. If the INSERT operation does not complete within the defined timeout period, an error occurs, and the statement is aborted. This parameter is available in MySQL 5.6 and later versions.",MySQL,0
delayed_queue_size,Integer,"The `delayed_queue_size` MySQL configuration parameter specifies the maximum number of rows that can be held in the queue for INSERT DELAYED statements. This parameter is relevant only when using the INSERT DELAYED feature, which is deprecated as of MySQL 5.6 and removed in MySQL 8.0. It is advisable not to rely on this feature for new applications.",MySQL,0
div_precision_increment,Integer,The MySQL configuration parameter `div_precision_increment` defines the precision for division operation results. It specifies the number of decimal places that the result will be accurate to when dividing values. This parameter allows for fine-tuning the precision of division calculations in MySQL queries.,MySQL,0
dragnet.log_error_filter_rules,String,The `dragnet.log_error_filter_rules` parameter in MySQL is used to specify a list of filtering rules for the error log. This parameter allows users to define patterns that determine which error log messages should be excluded from the log. It is available starting from MySQL version 8.0.26.,MySQL,0
end_markers_in_json,Boolean,"The ""end_markers_in_json"" configuration parameter in MySQL specifies whether to include array end markers within JSON output. When set to ""On"", array elements in JSON output include end markers. This parameter is available in MySQL 8.0.14 and later versions.",MySQL,0
enforce_gtid_consistency,Enumeration,"The MySQL configuration parameter `enforce_gtid_consistency` controls whether transactions should enforce GTID (Global Transaction Identifier) consistency. When enabled, this parameter ensures that all transactions are executed in a GTID-consistent manner. This feature is available starting from MySQL version 5.6.9.",MySQL,0
enterprise_encryption.maximum_rsa_key_size,Integer,"The MySQL configuration parameter ""enterprise_encryption.maximum_rsa_key_size"" specifies the maximum size of RSA keys allowed for encryption operations in MySQL Enterprise Edition. This parameter determines the upper limit for the size of RSA keys that can be used for encryption purposes within the MySQL server. It is available in MySQL Enterprise Edition starting from version X.X.X.",MySQL,0
enterprise_encryption.rsa_support_legacy_padding,Boolean,"The MySQL configuration parameter `enterprise_encryption.rsa_support_legacy_padding` determines whether legacy padding is supported for RSA encryption operations in MySQL Enterprise Edition. When enabled, this parameter allows MySQL to use legacy padding schemes for RSA encryption purposes. This parameter is specific to MySQL Enterprise Edition and is not available in the Community Edition.",MySQL,0
eq_range_index_dive_limit,Integer,The `eq_range_index_dive_limit` MySQL configuration parameter specifies the limit on the number of dives MySQL can do when optimizing a query that uses an equality operator on a range scan. Each dive is a separate attempt to find an exact key match within a range of keys. Setting this value higher may allow MySQL to find more precise matches but can increase query optimization time. This parameter is available in MySQL 5.7 and higher versions.,MySQL,0
event_scheduler,Enumeration,"The MySQL configuration parameter ""event_scheduler"" enables or disables the Event Scheduler within the MySQL server. When set to ON, the Event Scheduler is active, allowing the scheduling and execution of events defined within the database. This parameter is available in MySQL versions 5.1.11 and later.",MySQL,0
explain_format,Enumeration,The `explain_format` MySQL configuration parameter is not a valid or recognized server option as per the official MySQL documentation. It is important to refer to the MySQL documentation or consult with the MySQL community for the most up-to-date and accurate information on available configuration parameters and their purposes.,MySQL,0
explain_json_format_version,Integer,"The `explain_json_format_version` MySQL configuration parameter specifies the version of the JSON Explain output format to use. This parameter is introduced in MySQL 8.0.23, and helps determine how the JSON structure is formatted when generating Explain output in JSON format. It allows users to control the structure and layout of the Explain output for better readability and analysis.",MySQL,0
explicit_defaults_for_timestamp,Boolean,"The `explicit_defaults_for_timestamp` MySQL configuration parameter, when enabled, requires explicit defaults for TIMESTAMP columns to ensure consistent behavior across server restarts. By setting this parameter to ""on"", any TIMESTAMP column without an explicit DEFAULT clause will have a default value applied. This parameter was introduced in MySQL 5.6.6.",MySQL,0
flush,Boolean,"The MySQL flush parameter initiates a synchronization of tables to disk in the storage engine, ensuring that the most recent changes are persisted. This process helps in preventing data loss in case of unexpected shutdowns or crashes. The flush operation can be performed at different levels, such as flushing tables, logs, privileges, or logs based on the specific command used.",MySQL,0
flush_time,Integer,"The `flush_time` MySQL configuration parameter specifies the interval in seconds between consecutive flushing operations of the binary log and the InnoDB log buffer to disk. This parameter helps in controlling the frequency of disk writes, impacting the balance between performance and data durability. The `flush_time` parameter is available in MySQL 8.0 and later versions.",MySQL,0
foreign_key_checks,Boolean,"The MySQL configuration parameter ""foreign_key_checks"" controls whether to enforce foreign key constraints for InnoDB tables. When enabled (set to 1), MySQL will enforce foreign key constraints. When disabled (set to 0), MySQL will not check or enforce foreign key relationships, allowing invalid data to be inserted. This parameter is available in MySQL versions that support foreign key constraints, such as MySQL 5.5 and later.",MySQL,0
ft_boolean_syntax,String,"The `ft_boolean_syntax` MySQL configuration parameter specifies the syntax to apply when parsing boolean full-text search expressions. It allows configuring the syntax used in natural language full-text searches to define how operators such as + and - are interpreted. This parameter can be set to one of three predefined syntax options: `+ -><()~*:”`` or `->()~*:""`.

",MySQL,0
general_log,Boolean,"The `general_log` configuration parameter in MySQL enables logging of all queries to a file, including connection management and query execution statements. It is useful for troubleshooting, monitoring, and analyzing database activities. Note that enabling this option may lead to increased disk space usage and potential performance impact.",MySQL,0
general_log_file,File name,"The MySQL configuration parameter general_log_file specifies the file path where the general query log is written. This log file records all queries received by the MySQL server. It helps in troubleshooting, performance monitoring, and auditing database activities. This parameter is available in MySQL versions 5.1.6 and later.",MySQL,0
generated_random_password_length,Integer,"The `generated_random_password_length` MySQL configuration parameter specifies the length, in characters, of the automatically generated random passwords for new MySQL accounts. By setting this parameter, administrators can define the desired level of security for newly created accounts by specifying the length of the generated passwords. This parameter is available in MySQL 8.0 and later versions.",MySQL,0
global_connection_memory_limit,Integer,The global_connection_memory_limit MySQL configuration parameter specifies the maximum memory that can be used for connections across all clients. This limit helps prevent excessive memory usage due to a large number of clients connecting to the server simultaneously. It is available in MySQL 8.0 and later versions.,MySQL,0
global_connection_memory_tracking,Boolean,"The global_connection_memory_tracking MySQL configuration parameter is used to enable or disable tracking of memory consumption per connection. When enabled, memory allocations are tracked to help identify and troubleshoot connection-related memory usage issues. This parameter is available starting from MySQL 8.0.0.",MySQL,0
group_concat_max_len,Integer,The 'group_concat_max_len' parameter in MySQL server determines the maximum length in bytes of the concatenated result of the GROUP_CONCAT() function. It impacts the maximum allowable length of strings produced when using GROUP_CONCAT(). This parameter is available in all recent versions of MySQL and can be adjusted to meet specific requirements for concatenating strings in group-based queries.,MySQL,0
group_replication_advertise_recovery_endpoints,String,"The MySQL configuration parameter `group_replication_advertise_recovery_endpoints` is used to specify whether the Group Replication plugin advertises the recovery endpoints. When enabled, these endpoints are included in all advertisements so that other group members can connect for distributed recovery. This parameter is available in MySQL 8.0.17 and later versions.",MySQL,0
group_replication_allow_local_lower_version_join,Boolean,"The MySQL configuration parameter 'group_replication_allow_local_lower_version_join' determines whether a member with a lower version of the group replication plugin can join the group. By default, this parameter is set to 'OFF', preventing lower version members from joining to ensure compatibility. It is available in MySQL Group Replication for version 5.7.22 and later.",MySQL,0
group_replication_auto_increment_increment,Integer,"The `group_replication_auto_increment_increment` parameter in MySQL is used to set the increment step for auto_increment columns in Group Replication environments. By configuring this parameter, you can avoid conflicts in auto_increment column values across different instances in a Group Replication setup. This parameter is specific to MySQL Group Replication and is available starting from MySQL version 5.7.21.",MySQL,0
group_replication_autorejoin_tries,Integer,The `group_replication_autorejoin_tries` MySQL configuration parameter determines the number of automatic rejoin attempts for a server to rejoin the group after being disconnected. This parameter specifies the maximum number of retries before permanently removing the server from the group. Setting this parameter helps control the automatic rejoin behavior of servers in a MySQL InnoDB Group Replication setup.,MySQL,0
group_replication_bootstrap_group,Boolean,"The MySQL configuration parameter group_replication_bootstrap_group is used to specify whether a server should bootstrap a new group (Replication Group) with itself as the single member. This parameter is applicable when using Group Replication. The default value for this parameter is false, indicating that the server will not start a new group on its own.",MySQL,0
group_replication_clone_threshold,Integer,"The `group_replication_clone_threshold` parameter in MySQL is used to set the maximum delay permitted between the last applied transaction in the group channel and the SQL thread when provisioning new replicas in a group replication setup. When the delay exceeds this threshold, the server triggers an automatic cloning process for the new replica to synchronize with the group. It helps ensure timely synchronization of new replicas to maintain consistency within the group. This parameter is specific to MySQL Group Replication and is available in MySQL 8.0 and later versions.",MySQL,0
group_replication_communication_debug_options,String,The MySQL configuration parameter `group_replication_communication_debug_options` is used to specify debugging options for Group Replication communication functions. It allows administrators to enable specific types of debugging information related to group replication communication for troubleshooting purposes. This parameter is applicable in MySQL 5.7 and later versions.,MySQL,0
group_replication_communication_max_message_size,Integer,The `group_replication_communication_max_message_size` parameter in MySQL configures the maximum size in bytes of a group communication message. This parameter is used in MySQL Group Replication to control the size of messages exchanged between group members. It helps prevent large messages from causing communication issues within the group.,MySQL,0
group_replication_communication_stack,String,The `group_replication_communication_stack` parameter specifies the communication protocol stack plugin used for group replication in MySQL. It determines how members of a MySQL group replication setup exchange messages and coordinate their operations. This parameter should be set to a valid communication plugin according to the MySQL documentation to ensure proper functioning of the group replication feature.,MySQL,0
group_replication_components_stop_timeout,Integer,"The `group_replication_components_stop_timeout` parameter in MySQL specifies the maximum time, in milliseconds, the server waits for the Group Replication plugin to stop during a server shutdown. If the Group Replication plugin doesn't stop within this timeout, the server forcefully shuts down. This parameter is applicable in MySQL Group Replication setups to manage the shutdown process effectively.",MySQL,0
group_replication_compression_threshold,Integer,The MySQL configuration parameter `group_replication_compression_threshold` specifies the size threshold for considering applying data compression during data exchange within a Group Replication group. Data compression can help reduce network bandwidth usage for replication traffic in group replication setups. This parameter is available starting from MySQL 8.0.17.,MySQL,0
group_replication_consistency,Enumeration,The `group_replication_consistency` parameter in MySQL pertains to the consistency level enforced for transactions in a Group Replication setup. It determines how the group replication plugin handles transactions that involve conflicting data. This parameter helps maintain data consistency across the members of a MySQL group replication group.,MySQL,0
group_replication_enforce_update_everywhere_checks,Boolean,"The `group_replication_enforce_update_everywhere_checks` parameter in MySQL is used to enable or disable the enforcement of update checks for all members in a group replication setup. When set to `ON`, this parameter ensures that any transaction that updates data is applied consistently across all group members, helping to maintain data integrity. This parameter is available in MySQL 8.0 and later versions for configuring Group Replication settings.",MySQL,0
group_replication_exit_state_action,Enumeration,"The `group_replication_exit_state_action` MySQL configuration parameter specifies the action to take when a group member exits the group. Possible values for this parameter include READ_ONLY, ABORT_SERVER, and OFFLINE_MODE. This parameter is specific to MySQL Group Replication and is available in MySQL version 5.7.17 and later.",MySQL,0
group_replication_flow_control_applier_threshold,Integer,"The `group_replication_flow_control_applier_threshold` MySQL configuration parameter specifies the threshold of bytes that the applier is allowed to process before issuing a flow control signal in a Group Replication setup. By default, this parameter is set to 2GB. Once the threshold is reached, the group replication communication protocol enforces flow control to protect the system from overload.",MySQL,0
group_replication_flow_control_certifier_threshold,Integer,"The `group_replication_flow_control_certifier_threshold` parameter in MySQL configures the threshold for the certification process within a group replication setup. It determines the maximum number of transactions that any member can certify before reaching a flow control limit, which affects the flow of transactions among group members. This parameter is specific to MySQL Group Replication functionality.",MySQL,0
group_replication_flow_control_hold_percent,Integer,"The `group_replication_flow_control_hold_percent` parameter in MySQL is used to specify the percentage of the auto-increment counter threshold at which replication flow control triggers a back off in a Group Replication setup. This parameter helps in controlling the flow of transactions in the group by adjusting the threshold at which flow control actions are taken, thereby managing the replication rate. This parameter is applicable in MySQL Group Replication and available starting from MySQL version 8.0.",MySQL,0
group_replication_flow_control_max_quota,Integer,The `group_replication_flow_control_max_quota` parameter in MySQL is used to set the maximum number of write transactions that can be executed by a group member before throttling occurs due to flow control. This parameter helps manage the flow of transactions in a Group Replication setup to prevent overwhelming a member with excessive transactions. It is applicable to MySQL Group Replication feature from version 5.7.22 and later.,MySQL,0
group_replication_flow_control_member_quota_percent,Integer,"The `group_replication_flow_control_member_quota_percent` parameter in MySQL is used to control the flow of transactions by limiting the percentage of the total flow control quota that can be consumed by a single group member. This parameter helps prevent a single member from overwhelming the group with excessive transactions, thereby ensuring fair distribution of resources within the replication group. This parameter is applicable to MySQL Group Replication feature and is available in MySQL version 8.0 and later.",MySQL,0
group_replication_flow_control_min_quota,Integer,The MySQL configuration parameter `group_replication_flow_control_min_quota` determines the minimum allowance for transactions that a group member can proceed to execute before flow control limits are enforced in a Group Replication setup. It helps control the flow of transactions to avoid overwhelming individual members in the group. This parameter is applicable to MySQL Group Replication setups and is not deprecated in any specific MySQL versions.,MySQL,0
group_replication_flow_control_min_recovery_quota,Integer,The `group_replication_flow_control_min_recovery_quota` parameter in MySQL is used to specify the minimum number of transactions that a group member must retrieve during a flow control event to recover from a transaction backlog. This setting helps regulate the flow of transactions within a group replication setup to prevent overload or underutilization of resources. This parameter is specific to MySQL 8.0 and newer versions and is not deprecated as of the latest MySQL documentation.,MySQL,0
group_replication_flow_control_mode,Enumeration,"The `group_replication_flow_control_mode` parameter in MySQL is used to set the flow control mode for the Group Replication plugin. It determines how the group handles backpressure when the group is under load. The available modes are `DISABLED`, `AUTO`, `PERMISSIVE`, and `NORMAL`. This parameter is applicable to MySQL version 8.0 and later.",MySQL,0
group_replication_flow_control_period,Integer,The `group_replication_flow_control_period` MySQL configuration parameter defines the interval at which messages are used for flow control in group replication. It specifies how frequently flow control messages are sent between group members to regulate the transmission of transactions. This parameter helps prevent overload situations within the replication group by managing the flow of data.,MySQL,0
group_replication_flow_control_release_percent,Integer,The `group_replication_flow_control_release_percent` parameter in MySQL is used to define the percentage of system resources allocated for simultaneous membership operations in a group replication setup. It determines how much resource is released during flow control to allow additional transactions to be processed by the group replication system. This parameter helps in managing the flow of transactions within the group replication environment efficiently.,MySQL,0
group_replication_force_members,String,"The `group_replication_force_members` parameter in MySQL is used to manually set the initial group membership configuration for Group Replication. It forces the server to start a new group replication group with the specified members, overriding any existing group configuration. This parameter allows for greater control and predictability when configuring the group replication setup.",MySQL,0
group_replication_group_name,String,"The `group_replication_group_name` configuration parameter in MySQL is used to set the name of the Group Replication group. Group Replication is a plugin that enables multi-master replication with automatic group membership management, failure detection, and group reconfiguration. This parameter allows specifying a unique identifier for the group to facilitate communication and coordination between group members.",MySQL,0
group_replication_group_seeds,String,The `group_replication_group_seeds` parameter in MySQL is used to specify the initial list of group members that can be joined during the group replication setup. This parameter allows configuring the seed members to bootstrap a new group replication group. The value of this parameter should be a comma-separated list of host:port pairs representing the addresses of the seed members. This parameter is specific to MySQL Group Replication and is available in MySQL 5.7.17 and later versions.,MySQL,0
group_replication_gtid_assignment_block_size,Integer,The `group_replication_gtid_assignment_block_size` parameter in MySQL is used to define the allocation unit size for GTID (Global Transaction Identifier) blocks within a group replication environment. This setting specifies the number of transactions that are grouped together before assigning a new GTID range. It helps optimize the performance and efficiency of GTID assignments in a MySQL group replication setup.,MySQL,0
group_replication_ip_allowlist,String,The `group_replication_ip_allowlist` configuration parameter in MySQL is used to specify a list of IP addresses allowed to connect to the group replication group communication engine. This parameter helps to control access to the group replication communication channel by restricting connections from unauthorized IP addresses. It is available starting from MySQL version 8.0.17.,MySQL,0
group_replication_local_address,String,The `group_replication_local_address` MySQL configuration parameter specifies the IP address and port number the Group Replication plugin uses to listen for incoming connections on the local instance. This parameter is utilized within MySQL Group Replication to define the network interface for communication among group members. It is available in MySQL 5.7.22 and later versions.,MySQL,0
group_replication_member_expel_timeout,Integer,The `group_replication_member_expel_timeout` parameter in MySQL is used to specify the maximum time in milliseconds before a member is forcibly expelled from the group if it fails to perform specified tasks within the defined timeout period. This parameter helps in managing the behavior of the group replication system when a member becomes unresponsive or fails to meet the expected performance requirements. The `group_replication_member_expel_timeout` parameter is available in MySQL Group Replication starting from version 5.7.17.,MySQL,0
group_replication_member_weight,Integer,"The MySQL configuration parameter `group_replication_member_weight` is used to assign a weight value to a member of a group replication set. This weight value influences the member's likelihood of being selected as the primary failover candidate. By adjusting the weight values, administrators can control the priority of individual group members within the replication group. This parameter is available starting from MySQL 8.0.19.",MySQL,0
group_replication_message_cache_size,Integer,"The `group_replication_message_cache_size` MySQL configuration parameter determines the total size allocated for the replication message cache, which stores messages sent among group members in a group replication setup. The cache helps improve performance by reducing disk I/O operations related to message transmission. This parameter is specific to MySQL Group Replication and is available in MySQL 5.7.17 and later versions.",MySQL,0
group_replication_paxos_single_leader,Boolean,"The `group_replication_paxos_single_leader` MySQL configuration parameter is used in MySQL Group Replication to enable the single primary mode of the PAXOS protocol. This parameter determines whether the Group Replication plugin should enforce the single-leader constraint in the group communication process. It is relevant for MySQL versions supporting Group Replication, such as MySQL 5.7 and newer.",MySQL,0
group_replication_poll_spin_loops,Integer,The `group_replication_poll_spin_loops` parameter in MySQL controls the number of times Group Replication will poll while spinning in case of pending work. This parameter helps in managing the efficiency of group replication communication by determining the number of spinning loops performed during polling. It is available starting from MySQL 8.0.1.,MySQL,0
group_replication_preemptive_garbage_collection,Boolean,The `group_replication_preemptive_garbage_collection` parameter in MySQL configures whether the group replication plugin will use preemptive garbage collection. Preemptive garbage collection aims to free up resources by assisting in the disposal of messages that are no longer needed. This parameter is available starting from MySQL 8.0.20 and is not deprecated as of the latest MySQL version.,MySQL,0
group_replication_preemptive_garbage_collection_rows_threshold,Integer,"**Parameter: group_replication_preemptive_garbage_collection_rows_threshold**

- **Role and Purpose**: This parameter in MySQL Group Replication defines the threshold for the number of rows to trigger preemptive garbage collection. When the number of rows processed exceeds this threshold, the server preemptively triggers garbage collection to remove unused data. Setting an appropriate value for this parameter can help optimize server performance and avoid excessive resource consumption.

Please note that this parameter is specific to MySQL Group Replication and may not be applicable to other MySQL configurations.",MySQL,0
group_replication_recovery_compression_algorithms,Set,The `group_replication_recovery_compression_algorithms` MySQL configuration parameter controls the compression algorithms allowed for group replication recovery. This parameter specifies the list of algorithms supported for use during replication data recovery in a group replication environment. Ensure to set this parameter to the desired compression algorithms to be used during the recovery process. This parameter is available in MySQL 8.0 and later versions.,MySQL,0
group_replication_recovery_get_public_key,Boolean,The `group_replication_recovery_get_public_key` parameter in MySQL is used to specify whether the Group Replication plugin should fetch the public key from the Group Replication recovery channel. Setting this parameter to ON enables the server to retrieve the public key for validation purposes during the recovery process in a group replication setup. This parameter is available in MySQL 8.0 and newer versions.,MySQL,0
group_replication_recovery_public_key_path,File name,The `group_replication_recovery_public_key_path` configuration parameter in MySQL is used to define the file path where the public key required for group replication recovery is stored. This public key is used in the group replication plugin to authenticate the group members during recovery operations. This parameter is applicable in MySQL Group Replication feature starting from MySQL version 5.7.22.,MySQL,0
group_replication_recovery_reconnect_interval,Integer,"The MySQL configuration parameter `group_replication_recovery_reconnect_interval` specifies the interval in milliseconds between attempts to reconnect to a failed donor server during Group Replication recovery. This parameter is applicable in MySQL Group Replication setups to control the frequency of reconnection attempts to the donor server after a failure. The default value for this parameter is 60,000 milliseconds (1 minute).",MySQL,0
group_replication_recovery_retry_count,Integer,"The `group_replication_recovery_retry_count` MySQL configuration parameter specifies the maximum number of soft retries allowed during the recovery process in a Group Replication setup. Soft retries occur when the recovery process encounters an error, but the error is deemed temporary and can potentially be resolved by retrying the operation. This parameter helps control the behavior of recovery retries in Group Replication deployments.",MySQL,0
group_replication_recovery_ssl_ca,String,The `group_replication_recovery_ssl_ca` parameter in MySQL configures the path to the Certificate Authority (CA) file used for Group Replication recovery over SSL. This parameter specifies the location of the CA certificate that verifies the authenticity of the SSL certificates used during recovery. It is applicable for MySQL 8.0 and later versions.,MySQL,0
group_replication_recovery_ssl_capath,String,"The `group_replication_recovery_ssl_capath` parameter in MySQL is used to specify the path to the directory containing trusted SSL certificates for Group Replication recovery connections. These certificates are needed to establish secure SSL connections during the recovery process in a Group Replication setup, ensuring data integrity and confidentiality. This parameter is applicable for MySQL Server version 5.7.22 and later.",MySQL,0
group_replication_recovery_ssl_cert,String,"The `group_replication_recovery_ssl_cert` MySQL configuration parameter specifies the path to the X.509 certificate file required for enabling secure communication during the recovery process in a Group Replication setup. This parameter is relevant for MySQL versions supporting Group Replication, such as MySQL 5.7. Note that improper configuration of this parameter can lead to SSL communication issues during recovery operations.",MySQL,0
group_replication_recovery_ssl_cipher,String,The `group_replication_recovery_ssl_cipher` parameter in MySQL configures the permitted SSL cipher suites for secure replication recovery connections in a Group Replication setup. This parameter allows administrators to specify the specific SSL ciphers that can be used for securing the recovery connections within a group replication environment. It is available from MySQL 8.0.16 and onwards.,MySQL,0
group_replication_recovery_ssl_crl,File name,The `group_replication_recovery_ssl_crl` parameter in MySQL is used to specify the location of the Certificate Revocation List (CRL) file for validating SSL connections during Group Replication recovery operations. This parameter helps ensure secure communication by checking the security certificates against the CRL. It is applicable to MySQL 5.7.22 and later versions.,MySQL,0
group_replication_recovery_ssl_crlpath,Directory name,"The `group_replication_recovery_ssl_crlpath` parameter in MySQL is used to specify the file path for the Certificate Revocation List (CRL) necessary for Group Replication recovery when using SSL connections. This parameter is relevant when configuring Group Replication in MySQL to ensure secure communication and proper validation of certificates during the recovery process. The CRL path provided should point to the location where the CRL file is stored on the server's filesystem.
",MySQL,0
group_replication_recovery_ssl_key,String,The `group_replication_recovery_ssl_key` parameter in MySQL is used to specify the path to the X.509 private key file required for SSL connections during Group Replication recovery operations. This key is utilized when the Group Replication plugin is configured to use SSL for communication. The parameter should point to the location of the private key file on the server.,MySQL,0
group_replication_recovery_ssl_verify_server_cert,Boolean,"The group_replication_recovery_ssl_verify_server_cert parameter in MySQL is used to enable or disable the verification of the server certificate during Group Replication recovery operations. When set to ON, MySQL will verify the server certificate when connecting. It is available in MySQL 8.0.14 and later versions.",MySQL,0
group_replication_recovery_tls_ciphersuites,String,"The MySQL configuration parameter ""group_replication_recovery_tls_ciphersuites"" specifies the ciphersuites that can be used for Transport Layer Security (TLS) encryption during Group Replication recovery operations. It enables administrators to define a specific set of ciphersuites to ensure secure communication within the Group Replication setup. This parameter is available in MySQL 5.7.22 and later versions.",MySQL,0
group_replication_recovery_tls_version,String,The `group_replication_recovery_tls_version` parameter in MySQL is used to specify the TLS version that Group Replication members use for communication during recovery. It controls the transport layer security protocol version used for encrypted communication between Group Replication members when recovering data. This parameter is available in MySQL 8.0 and later versions.,MySQL,0
group_replication_recovery_use_ssl,Boolean,"The `group_replication_recovery_use_ssl` MySQL configuration parameter determines whether Group Replication recovery communication uses SSL/TLS encryption for secure data transmission. When enabled, it ensures that recovery connections are established securely over an SSL/TLS encrypted channel. This parameter is available starting from MySQL 8.0.16 and is not deprecated.",MySQL,0
group_replication_recovery_zstd_compression_level,Integer,The `group_replication_recovery_zstd_compression_level` parameter in MySQL is used to specify the compression level used for Zstandard (Zstd) compression during Group Replication recovery processes. This parameter determines the trade-off between compression ratio and speed during recovery. This feature is available starting from MySQL 8.0.26 for enhancing recovery performance in Group Replication setups utilizing Zstd compression.,MySQL,0
group_replication_single_primary_mode,Boolean,"The `group_replication_single_primary_mode` configuration parameter in MySQL is used to define the behavior of a Group Replication group by specifying whether it should operate in single-primary mode. In single-primary mode, only one member in the group serves as the primary node for write operations, while the rest act as secondary nodes for read-only operations. This parameter helps control the primary failover behavior in a MySQL Group Replication setup.",MySQL,0
group_replication_ssl_mode,Enumeration,"The `group_replication_ssl_mode` parameter in MySQL determines the SSL mode used for secure connections within the Group Replication plugin. It can be set to values such as ""DISABLED"", ""REQUIRED"", or ""VERIFY_CA"" to specify the level of SSL security required for communications between group members. This parameter is available in MySQL 5.7.22 and later versions.",MySQL,0
group_replication_start_on_boot,Boolean,"The `group_replication_start_on_boot` MySQL configuration parameter determines whether group replication should start automatically when the server boots up. If set to true, group replication will automatically start when the MySQL server starts. This parameter is applicable to MySQL Group Replication feature and available in MySQL 5.7 and later versions.",MySQL,0
group_replication_tls_source,Enumeration,The `group_replication_tls_source` MySQL configuration parameter specifies the certificate and key files for encrypting replication channels within the InnoDB cluster environment. It enables Transport Layer Security (TLS) encryption for secure communication between group members during group replication. This parameter is available starting from MySQL version 8.0.14.,MySQL,0
group_replication_transaction_size_limit,Integer,"The `group_replication_transaction_size_limit` parameter in MySQL configures the maximum size, in bytes, of transactions executed by group replication group members. This parameter helps to control the size of transactions that can be sent between group members, potentially preventing issues related to large transaction sizes within a group replication setup. This parameter is available in MySQL 8.0 and later versions.",MySQL,0
group_replication_unreachable_majority_timeout,Integer,"The `group_replication_unreachable_majority_timeout` parameter in MySQL specifies the timeout period, in milliseconds, for a member of a group replication group to wait for the group to reach a majority. If the group does not reach a majority within this timeframe, the member considers itself as being in a non-operational state. This parameter is applicable in MySQL Group Replication and can help manage the behavior of group members when a majority cannot be reached.",MySQL,0
group_replication_view_change_uuid,String,The `group_replication_view_change_uuid` MySQL configuration parameter is used to specify the UUID associated with a group replication view change. This parameter helps in managing the view and ensuring consistency within a group replication environment. It is relevant for MySQL server versions supporting Group Replication feature.,MySQL,0
gtid_executed_compression_period,Integer,"The `gtid_executed_compression_period` parameter in MySQL specifies the interval for purging GTID sets that are no longer needed from the `GTID_EXECUTED` table. When set, GTIDs older than the defined period are removed to prevent the table from growing indefinitely. This parameter helps manage the storage usage of GTID execution information in a MySQL replication setup.",MySQL,0
gtid_mode,Enumeration,"The `gtid_mode` MySQL configuration parameter specifies the GTID (Global Transaction Identifier) mode for replication. GTID mode controls how GTID information is used and logged for replication purposes. The possible values for `gtid_mode` are OFF, ON, OWN_GTID, and OFF_PERMISSIVE, providing flexibility in managing replication setups with UUID-based transactions.",MySQL,0
gtid_next,Enumeration,"The `gtid_next` parameter in MySQL is used to specify the next GTID (Global Transaction ID) to be assigned when a transaction is executed. It allows for manual control over the assignment of GTIDs, which uniquely identify transactions across a group of databases. This parameter is supported in MySQL 5.6.9 and later versions.",MySQL,0
gtid_purged,String,"The `gtid_purged` MySQL configuration parameter specifies the set of GTIDs that have been purged. GTID stands for Global Transaction ID, used for tracking transactions on a global scale in a replication setup. This parameter allows administrators to manage and track the GTIDs that have been removed from the server's binary log. It is typically used in replication environments to ensure consistency across multiple servers.",MySQL,0
histogram_generation_max_mem_size,Integer,The `histogram_generation_max_mem_size` MySQL configuration parameter specifies the maximum memory size (in bytes) allowed for generating histograms during the query optimization process. Histograms are used to estimate the distribution of column values and assist the query optimizer in selecting efficient execution plans. This parameter helps control the memory usage related to histogram generation to prevent excessive memory consumption during query optimization tasks.,MySQL,0
host_cache_size,Integer,"The `host_cache_size` MySQL configuration parameter specifies the size in bytes of the cache used for hostname-to-IP address resolution. This cache helps reduce DNS lookups, improving performance by storing resolved hostnames. The default value is 128 bytes, and increasing it may be beneficial in certain scenarios with high DNS resolution usage.",MySQL,0
identity,Integer,"I'm sorry, but ""identity"" is not a standard MySQL configuration parameter. If you have another parameter in mind or need assistance with a different MySQL configuration setting, please let me know, and I'll be happy to help clarify its role and purpose.",MySQL,0
immediate_server_version,Integer,"The `immediate_server_version` MySQL configuration parameter specifies the version of the MySQL server, which is immediately available to new client connections. It sets the server version that clients see on connection establishment. This parameter is available starting from MySQL 8.0.22.",MySQL,0
information_schema_stats_expiry,Integer,"The MySQL configuration parameter information_schema_stats_expiry determines the period of time, in seconds, before which statistical information managed by the Information Schema is considered stale and can be automatically purged. This parameter regulates the frequency at which outdated statistics are removed from memory, helping to ensure the Information Schema stays up-to-date and maintains optimal performance. The default value for information_schema_stats_expiry is 86400 seconds (24 hours).",MySQL,0
init_connect,String,"Parameter Name: init_connect

Description:
The init_connect parameter in MySQL allows users to define a SQL statement that is executed for each new connection once the authentication process is successfully completed. This parameter can be used to automatically set certain global or session-level variables, execute custom procedures, or apply specific configurations upon connection establishment. The SQL statement defined in init_connect is applied to all connection types, including those initiated by clients connecting via the network, Unix socket, or named pipe.

(Note: This parameter is applicable to MySQL 5.6 and newer versions.)",MySQL,0
init_replica,String,"The `init_replica` MySQL configuration parameter is not a standard or officially recognized server variable in MySQL. If you are looking for ways to configure a MySQL replica, you may consider using the official `CHANGE MASTER TO` command to initialize a replica with specific replication settings from a master server. For further information, refer to the official MySQL documentation on setting up replication.",MySQL,0
init_slave,String,The `init_slave` configuration parameter in MySQL is used to specify the location and filename of a user-initiated replication thread file. This file is utilized during the replication process to mark the current binary log file and position from which replication should begin. It allows users to manually set the replication starting point in scenarios where the replication process needs to be reinitialized or restarted from a specific point.,MySQL,0
innodb_adaptive_flushing,Boolean,"The `innodb_adaptive_flushing` parameter in MySQL controls the adaptive flushing mechanism in the InnoDB storage engine. When enabled (set to 1), InnoDB adjusts the frequency of dirty page flushing based on the workload pattern to improve I/O performance. This parameter is available in MySQL 5.7 and later versions.",MySQL,0
innodb_adaptive_flushing_lwm,Integer,"The `innodb_adaptive_flushing_lwm` parameter in MySQL controls the threshold at which the InnoDB buffer pool starts adaptive flushing. It specifies the low-water mark percentage of dirty pages in the buffer pool, triggering InnoDB to adapt its flushing strategy accordingly. This parameter helps optimize the balance between write efficiency and IO performance in the InnoDB storage engine.",MySQL,0
innodb_adaptive_hash_index,Boolean,"The `innodb_adaptive_hash_index` configuration parameter in MySQL controls the usage of the InnoDB adaptive hash index feature. When enabled, the adaptive hash index dynamically adjusts the number of hash index entries based on access patterns of InnoDB tables. This can improve query performance by reducing disk I/O operations for frequently accessed table data. It is available in MySQL 5.7 and later versions.",MySQL,0
innodb_adaptive_max_sleep_delay,Integer,The `innodb_adaptive_max_sleep_delay` parameter in MySQL is used to control the maximum length of time in milliseconds that InnoDB waits before checking if it should lower its background activity. This setting helps in adjusting the rate at which the InnoDB background thread can reduce its activity when the system is busy. This parameter is available in MySQL 8.0 and later versions.,MySQL,0
innodb_autoextend_increment,Integer,The `innodb_autoextend_increment` parameter in MySQL determines the size increase of the InnoDB tablespace when it needs to auto-extend. This parameter specifies the number of bytes by which the tablespace will grow when it requires additional space. The default value for `innodb_autoextend_increment` is 64MB.,MySQL,0
innodb_background_drop_list_empty,Boolean,"The `innodb_background_drop_list_empty` parameter in MySQL controls whether the InnoDB background drop list is emptied to help optimize the InnoDB buffer pool. When enabled, it triggers the background drop list to discard old modified pages from the InnoDB buffer pool. This parameter is available starting from MySQL version 5.7.5.",MySQL,0
innodb_buffer_pool_dump_at_shutdown,Boolean,"The `innodb_buffer_pool_dump_at_shutdown` parameter in MySQL controls whether the buffer pool contents are saved to a file on a clean shutdown. When enabled, this feature allows you to dump the buffer pool state for later inspection or restoration. This parameter is available starting from MySQL version 5.6.6+.",MySQL,0
innodb_buffer_pool_dump_now,Boolean,The `innodb_buffer_pool_dump_now` MySQL configuration parameter triggers an immediate dump of the InnoDB buffer pool. This operation saves the current contents of the buffer pool's data and index pages to the specified dump file. This parameter is available as of MySQL 5.6.6.,MySQL,0
innodb_buffer_pool_dump_pct,Integer,The innodb_buffer_pool_dump_pct parameter in MySQL determines the percentage of the InnoDB buffer pool that triggers a dump of its contents to the tablespace data file when the server shuts down normally. This helps in saving the current state of the buffer pool for faster warm-up during the next server start. This parameter is available in MySQL 5.7 and later versions.,MySQL,0
innodb_buffer_pool_filename,File name,The `innodb_buffer_pool_filename` configuration parameter in MySQL allows specifying the path to a file where the InnoDB buffer pool should be persisted on disk for recovery purposes. This file stores the contents of the buffer pool to speed up the warm-up process when starting the MySQL server. This parameter is available starting from MySQL 8.0.15.,MySQL,0
innodb_buffer_pool_in_core_file,Boolean,"The ""innodb_buffer_pool_in_core_file"" parameter in MySQL specifies whether the InnoDB buffer pool should be included in a core file during a program crash for troubleshooting purposes. When set to 1, the buffer pool contents are included in the core file. This parameter is available in MySQL 5.7 and later versions.",MySQL,0
innodb_buffer_pool_load_abort,Boolean,"The `innodb_buffer_pool_load_abort` parameter in MySQL controls whether InnoDB should attempt to abort the load of the buffer pool during startup if it encounters an issue. When set to 1 (true), InnoDB will abort the load if it is unable to load the buffer pool completely, preventing the server from starting. This parameter is available in MySQL 5.7.5 and later versions.",MySQL,0
innodb_buffer_pool_load_now,Boolean,The MySQL configuration parameter 'innodb_buffer_pool_load_now' does not exist in the official MySQL documentation. It is important to verify the correctness of the parameter name and ensure accurate configuration settings in compliance with the MySQL documentation.,MySQL,0
innodb_buffer_pool_size,Integer,"The `innodb_buffer_pool_size` parameter in MySQL configures the size of the InnoDB buffer pool, which is a memory area where InnoDB caches table and index data. Setting an appropriate value for this parameter is crucial for optimizing database performance, as it directly impacts the efficiency of data retrieval and manipulation operations by reducing disk I/O. It is recommended to allocate a significant portion of available memory to the buffer pool to improve overall database performance.",MySQL,0
innodb_change_buffer_max_size,Integer,The `innodb_change_buffer_max_size` parameter in MySQL determines the maximum size of the change buffer that InnoDB can use to cache changes to secondary index pages before writing them out to disk. This buffer is part of InnoDB's buffer pool and helps improve write performance by reducing random I/O. It is available in MySQL 5.5.3 and later versions.,MySQL,0
innodb_change_buffering,Enumeration,"The `innodb_change_buffering` parameter in MySQL controls the buffering strategy for changes made to secondary indexes. When enabled, it buffers changes for secondary indexes in a special structure for efficiency. This feature is available in MySQL 5.7 and later versions.",MySQL,0
innodb_change_buffering_debug,Integer,"The ""innodb_change_buffering_debug"" parameter in MySQL controls the level of detail in the debugging output related to the change buffering mechanism in the InnoDB storage engine. It is used for troubleshooting and performance tuning purposes. This parameter is not deprecated and is available in MySQL versions where the InnoDB storage engine is supported.",MySQL,0
innodb_checkpoint_disabled,Boolean,"The MySQL configuration parameter innodb_checkpoint_disabled is used to enable or disable the InnoDB checkpoint mechanism, which is responsible for flushing dirty pages from the buffer pool to the data files. When set to 1, the checkpoint mechanism is disabled, which can potentially impact the write performance but is sometimes required for certain testing scenarios or advanced troubleshooting. This parameter is available in MySQL 8.0 and later versions.",MySQL,0
innodb_checksum_algorithm,Enumeration,"The `innodb_checksum_algorithm` parameter in MySQL specifies the algorithm used for calculating page checksums in InnoDB tables. The checksums are used to verify data integrity and prevent corruption. The supported algorithms include `innodb`, `strict_innodb`, and `none`, where `innodb` is the default option. This parameter is available in MySQL versions 5.7.17 and later.",MySQL,0
innodb_cmp_per_index_enabled,Boolean,"The `innodb_cmp_per_index_enabled` MySQL configuration parameter determines whether InnoDB uses separate compressed copies of index pages in the buffer pool. When enabled, each index page is compressed individually, potentially saving space but also increasing CPU overhead. This parameter is available in MySQL 5.7.7 and later versions.",MySQL,0
innodb_commit_concurrency,Integer,"The `innodb_commit_concurrency` parameter in MySQL configures the number of threads allowed to execute concurrently during InnoDB transactions commit phase. This parameter can help optimize performance by allowing multiple transactions to commit simultaneously. The default value is zero, which lets InnoDB automatically determine the level of concurrency based on the server's capabilities. This parameter is available in MySQL 5.7 and later versions.",MySQL,0
innodb_compress_debug,Enumeration,The `innodb_compress_debug` parameter in MySQL specifies the level of verbosity for InnoDB compression debug output. It is primarily used for troubleshooting and debugging purposes related to InnoDB table compression tasks. The parameter is available in MySQL version 5.7 and later.,MySQL,0
innodb_compression_failure_threshold_pct,Integer,"The `innodb_compression_failure_threshold_pct` parameter in MySQL specifies the percentage of compressed pages for which compression failure triggers. When the threshold is surpassed, InnoDB stops compressing pages until the number of pages drops below the threshold. The valid range for this parameter is 0 to 100.",MySQL,0
innodb_compression_level,Integer,"The `innodb_compression_level` parameter in MySQL controls the compression level for InnoDB table data. The value of this parameter ranges from 0 to 9, with higher values indicating stronger compression. Lower values result in faster compression but less reduction in storage size, while higher values lead to more compression at the cost of increased CPU usage during compression and decompression. This parameter is available in MySQL 5.7 and later versions.",MySQL,0
innodb_compression_pad_pct_max,Integer,"The `innodb_compression_pad_pct_max` MySQL configuration parameter sets the maximum percentage of extra space added during page compression padding for the InnoDB storage engine. This padding helps to prevent page splits, thereby improving performance by reducing disk I/O. This parameter is available in MySQL 5.7 and later versions.",MySQL,0
innodb_concurrency_tickets,Integer,"The `innodb_concurrency_tickets` parameter in MySQL determines the number of ""tickets"" a thread receives to acquire various InnoDB locks. Each ticket represents a chance for a thread to attempt to acquire an InnoDB lock, which helps manage concurrency control. This parameter is available starting from MySQL 5.7 and can be adjusted to fine-tune the concurrency behavior in InnoDB.",MySQL,0
innodb_ddl_buffer_size,Integer,"The `innodb_ddl_buffer_size` parameter in MySQL determines the size of the buffer used for Data Definition Language (DDL) statements within the InnoDB storage engine. This buffer stores DDL statements for efficient execution, reducing the time spent on parsing and optimization. It is available in MySQL 5.6.18 and later versions.",MySQL,0
innodb_ddl_log_crash_reset_debug,Boolean,The `innodb_ddl_log_crash_reset_debug` parameter is used in MySQL to enable additional debugging information related to InnoDB crash recovery process after a DDL (Data Definition Language) operation. This debug option can assist in troubleshooting and understanding the behavior of InnoDB crash recovery specifically after DDL statements. It is not a parameter commonly used in standard MySQL configurations and is typically utilized for diagnostic purposes in debugging scenarios.,MySQL,0
innodb_ddl_threads,Integer,The `innodb_ddl_threads` configuration parameter in MySQL specifies the number of background threads to use for InnoDB Data Definition Language (DDL) operations like adding or dropping indexes. Increasing the value of `innodb_ddl_threads` can potentially improve the performance of DDL operations in busy databases with concurrent transactions. This parameter is available in MySQL 5.7 and later versions.,MySQL,0
innodb_deadlock_detect,Boolean,"The MySQL configuration parameter `innodb_deadlock_detect` determines whether InnoDB automatically detects deadlocks involving transactions. When enabled, InnoDB detects deadlocks and rolls back transactions involved in the deadlock. This parameter is available in MySQL 5.1 and later versions and is not deprecated.",MySQL,0
innodb_default_row_format,Enumeration,"The `innodb_default_row_format` parameter in MySQL specifies the default row format for InnoDB tables when no specific format is specified during table creation. The row format determines how data is stored and organized within InnoDB tables, affecting storage requirements and performance characteristics. This parameter allows administrators to set a consistent default row format across the database to optimize storage efficiency and query performance.",MySQL,0
innodb_disable_sort_file_cache,Boolean,"The `innodb_disable_sort_file_cache` parameter in MySQL is used to control whether InnoDB should avoid using the sort file cache for table scans involving sorting operations. When this parameter is enabled, InnoDB will bypass the cache and directly create temporary sort files on disk. This option can help optimize performance in scenarios where the sort file cache is not beneficial.",MySQL,0
innodb_doublewrite,Enumeration,"The `innodb_doublewrite` parameter in MySQL controls the usage of a doublewrite buffer to improve data consistency and integrity during crash recovery. When enabled, InnoDB first writes data pages to the doublewrite buffer before writing them to the actual data files, reducing the risk of corruption in case of an abrupt shutdown. This parameter is not deprecated and is supported across various MySQL versions.",MySQL,0
innodb_extend_and_initialize,Boolean,"Parameter: innodb_extend_and_initialize

Description:
The innodb_extend_and_initialize configuration parameter in MySQL controls whether InnoDB should automatically extend the shared tablespace file when it runs out of space. When enabled, InnoDB will automatically extend the shared tablespace as needed. This parameter is available starting from MySQL 8.0.23.",MySQL,0
innodb_fast_shutdown,Integer,"The `innodb_fast_shutdown` parameter in MySQL controls the behavior of the shutdown process for InnoDB storage engine. When enabled, it allows InnoDB to perform a fast shutdown by skipping a portion of the normal shutdown process, which can help reduce the shutdown time. It should be used with caution to ensure data integrity, especially in critical production environments. This parameter is available in MySQL versions supporting the InnoDB storage engine.  ",MySQL,0
innodb_fil_make_page_dirty_debug,Integer,"The MySQL configuration parameter `innodb_fil_make_page_dirty_debug` is not a valid parameter in MySQL. It seems to be a typo or non-existent parameter. Please double-check the spelling and verify the correctness of the parameter name you are looking for. If you have any other specific MySQL parameters you would like to know about, feel free to ask for further assistance.",MySQL,0
innodb_file_per_table,Boolean,"The `innodb_file_per_table` configuration parameter in MySQL determines whether InnoDB tables are stored in their own individual tablespace files or within the shared system tablespace. When set to `ON`, each InnoDB table will have its own `.ibd` file, facilitating easier isolation and management of table storage. This parameter is available in MySQL versions 5.6 and later.",MySQL,0
innodb_fill_factor,Integer,"The `innodb_fill_factor` parameter is not a standard MySQL configuration option. It is not documented in the official MySQL documentation for any version. Therefore, no specific description or guidance can be provided for this parameter within the context of MySQL server configuration.",MySQL,0
innodb_flush_log_at_timeout,Integer,"The `innodb_flush_log_at_timeout` configuration parameter in MySQL specifies the timeout in milliseconds for the InnoDB redo log buffer flush activity. When the timeout value is reached, InnoDB will flush the redo log buffer, ensuring that changes are consistently written to disk. This parameter helps regulate the frequency of log buffer flushing to maintain data durability and performance.",MySQL,0
innodb_flush_log_at_trx_commit,Enumeration,"The innodb_flush_log_at_trx_commit parameter in MySQL determines the logging behavior of InnoDB for transaction commits. It controls when InnoDB flushes the transaction log to disk, affecting data durability and performance. Possible values for this parameter include 0, 1, and 2, providing different levels of durability guarantees.",MySQL,0
innodb_flush_neighbors,Enumeration,"The innodb_flush_neighbors MySQL configuration parameter specifies the number of contiguous pages that InnoDB flushes during a flush operation. This parameter helps optimize disk I/O operations by grouping adjacent pages together, improving the efficiency of writing operations. It is available in MySQL 5.6 and higher versions.",MySQL,0
innodb_flush_sync,Boolean,The `innodb_flush_sync` parameter in MySQL dictates the behavior of InnoDB flushing operations by controlling the synchronization level to ensure data integrity. This parameter determines how aggressively InnoDB flushes dirty pages to disk within a transaction commit. It is a dynamic parameter that can be adjusted at runtime without restarting the MySQL server.,MySQL,0
innodb_flushing_avg_loops,Integer,The `innodb_flushing_avg_loops` parameter in MySQL controls the number of steps for calculating the average number of times an InnoDB page is flushed during the flushing process. This value influences the aggressiveness of the InnoDB buffer pool flushing mechanism. Adjusting this parameter may impact the balance between write performance and flushing overhead. This parameter is available in MySQL 5.7 and later versions.,MySQL,0
innodb_fsync_threshold,Integer,"The `innodb_fsync_threshold` parameter in MySQL determines the number of log write requests that must accumulate before fsync is called to flush the logs to disk. This parameter helps control the frequency of fsync operations, impacting the balance between write performance and data durability in the InnoDB storage engine. It is available in MySQL 5.7 and later versions.",MySQL,0
innodb_ft_aux_table,String,The `innodb_ft_aux_table` is a MySQL configuration parameter related to the InnoDB full-text search feature. It specifies the table where InnoDB stores auxiliary information for full-text search operations. This parameter is not deprecated and is available in MySQL 5.6 and later versions.,MySQL,0
innodb_ft_enable_diag_print,Boolean,"The `innodb_ft_enable_diag_print` option in MySQL controls whether InnoDB prints diagnostic information to the error log regarding full-text search index maintenance operations. When enabled, this parameter can help provide additional insights into the performance of full-text search indexes in InnoDB tables. This option is available in MySQL 8.0 and later versions.",MySQL,0
innodb_ft_enable_stopword,Boolean,"The `innodb_ft_enable_stopword` parameter in MySQL determines whether to enable or disable the use of stopword lists for InnoDB full-text search operations. When set to 1, stopword lists are enabled, and common words such as 'the', 'and', and 'or' are excluded from full-text index searches. To disable stopword lists, the parameter should be set to 0. This parameter is relevant for MySQL versions that support InnoDB full-text search functionality.",MySQL,0
innodb_ft_num_word_optimize,Integer,"The MySQL configuration parameter ""innodb_ft_num_word_optimize"" specifies the number of search terms that will trigger auto optimization of full-text search queries in InnoDB. This parameter is relevant for MySQL version 8.0.12 and later. Setting it to a higher value may reduce full-text search query optimization overhead but may also result in more aggressive query optimization.",MySQL,0
innodb_ft_result_cache_limit,Integer,The `innodb_ft_result_cache_limit` configuration parameter in MySQL defines the maximum size of the search result cache used by InnoDB full-text search queries. This cache stores full-text search query results to improve performance by reducing disk I/O operations. The default value for this parameter is 2000000 (2 million) bytes.,MySQL,0
innodb_ft_server_stopword_table,String,The innodb_ft_server_stopword_table configuration parameter is used in MySQL to define a specific stopword table for InnoDB full-text search operations on the MySQL Server. Stopwords specified in the table are excluded from full-text indexes. This feature is available in MySQL 5.6 and later versions.,MySQL,0
innodb_ft_user_stopword_table,String,"The innodb_ft_user_stopword_table MySQL configuration parameter specifies the user-defined STOPWORD table for InnoDB full-text search functionality. By setting this parameter, users can customize the list of stopwords used in full-text searches, allowing them to exclude specific words from indexing or searching. This parameter is available in MySQL 5.6 and later versions for managing stopwords in InnoDB full-text search indexes.",MySQL,0
innodb_idle_flush_pct,Integer,"The MySQL configuration parameter innodb_idle_flush_pct specifies the percentage of dirty pages that triggers an automatic flush operation in the InnoDB buffer pool when the server is idle. By default, this parameter is set to 100, meaning that all dirty pages will be flushed in this scenario. Adjusting this parameter allows fine-tuning the balance between performance and disk I/O efficiency based on workload characteristics. This parameter is available in MySQL 5.7 and later versions.",MySQL,0
innodb_io_capacity,Integer,The `innodb_io_capacity` MySQL configuration parameter specifies the I/O capacity of the InnoDB storage engine. It determines the rate at which InnoDB can perform I/O operations. Increasing this parameter can help optimize the InnoDB storage engine's performance on systems with high I/O capability. This parameter is available in MySQL 5.5 and later versions.,MySQL,0
innodb_io_capacity_max,Integer,The `innodb_io_capacity_max` MySQL configuration parameter sets the maximum I/O capacity for InnoDB background I/O. It limits the number of I/O operations per second that InnoDB can perform. This parameter is available in MySQL 5.7 and later versions.,MySQL,0
innodb_limit_optimistic_insert_debug,Integer,"The MySQL configuration parameter `innodb_limit_optimistic_insert_debug` controls whether the Optimistic Insert optimization debug information should be limited. When enabled, it restricts the amount of debug information generated during Optimistic Insert operations in InnoDB. This parameter is available starting from MySQL version 8.0.2.",MySQL,0
innodb_lock_wait_timeout,Integer,"The `innodb_lock_wait_timeout` parameter in MySQL configures the maximum time, in seconds, a transaction waits for a lock before timing out and causing a deadlock error. This parameter helps control the behavior of InnoDB storage engine in handling lock waits and can be adjusted to prevent long delays due to lock contention. It is available in MySQL versions that support the InnoDB storage engine.",MySQL,0
innodb_log_buffer_size,Integer,"**Parameter Name: innodb_log_buffer_size**

- **Description:**
  The `innodb_log_buffer_size` parameter specifies the size in bytes of the buffer that InnoDB uses to write log entries before flushing them to the log files on disk. A larger buffer size can improve the performance of write-heavy workloads by reducing the frequency of disk I/O operations for log flushing.

- **Usage:**
  Modify this parameter based on the workload characteristics and available system resources to optimize write performance. The default value is 16MB, and increasing this value may benefit systems with high write activity at the expense of potentially higher memory usage by the buffer.",MySQL,0
innodb_log_checkpoint_fuzzy_now,Boolean,The innodb_log_checkpoint_fuzzy_now configuration parameter is not a valid MySQL server parameter according to official MySQL documentation. You may have mistyped the parameter name or it could be a custom or incorrectly referenced setting. Please ensure you are referring to the correct MySQL configuration parameter.,MySQL,0
innodb_log_checkpoint_now,Boolean,"The innodb_log_checkpoint_now parameter in MySQL is not a valid configuration parameter according to the official MySQL documentation. If you have any other MySQL server parameters you would like to learn about, please feel free to ask.",MySQL,0
innodb_log_checksums,Boolean,"The innodb_log_checksums parameter in MySQL controls whether InnoDB verifies the checksums of redo log blocks. When enabled (default), InnoDB validates checksums to ensure data integrity in log records. Disabling this parameter can improve performance but may increase the risk of undetected data corruption. This parameter is available in MySQL versions 5.5 and later.",MySQL,0
innodb_log_compressed_pages,Boolean,"The innodb_log_compressed_pages parameter in MySQL controls whether InnoDB will use compressed pages for its log files. When enabled, InnoDB can store compressed log data to reduce storage space. This parameter is available in MySQL 5.7.9 and later versions.",MySQL,0
innodb_log_spin_cpu_abs_lwm,Integer,The MySQL configuration parameter `innodb_log_spin_cpu_abs_lwm` sets the low-water mark for CPU cycles spent spinning on the InnoDB log group member mutex when the log group is under heavy contention. This parameter helps regulate the amount of CPU resources used for spinning in high-demand scenarios. It is applicable to MySQL versions that support the InnoDB storage engine and is not deprecated in the current version.,MySQL,0
innodb_log_spin_cpu_pct_hwm,Integer,The `innodb_log_spin_cpu_pct_hwm` MySQL configuration parameter defines the high water mark for the percentage of CPU time utilized by the log spin mutex. This parameter influences the spinning behavior of the InnoDB log mutex to reduce contention and improve performance. It is not deprecated and is available in MySQL 5.5 and later versions.,MySQL,0
innodb_log_wait_for_flush_spin_hwm,Integer,The `innodb_log_wait_for_flush_spin_hwm` parameter in MySQL determines the high-water mark for the number of spins during a spin loop that waits for a log flush. It controls the threshold at which InnoDB spins while waiting for a log write to complete. This parameter is available in MySQL versions supporting InnoDB storage engine.,MySQL,0
innodb_log_write_ahead_size,Integer,The `innodb_log_write_ahead_size` parameter in MySQL controls the size of the buffer used for writing to the InnoDB log files in advance of the data being written to the data files. This parameter is relevant for optimizing write performance by allowing larger batches of log write to be performed without waiting for disk I/O operations. The default value for this parameter is 8192 bytes.,MySQL,0
innodb_log_writer_threads,Boolean,The `innodb_log_writer_threads` parameter in MySQL determines the number of background threads responsible for writing redo log entries to the InnoDB log files. Increasing the value of this parameter can improve write performance on systems with high transaction rates or I/O activity. This parameter has been available since MySQL 5.6.0 and remains applicable in recent versions.,MySQL,0
innodb_lru_scan_depth,Integer,The MySQL configuration parameter `innodb_lru_scan_depth` determines the number of pages the InnoDB buffer pool LRU background flush threads scan in each round. Increasing this value can help improve buffer pool efficiency in some workloads. This parameter is available in MySQL 5.7 and later versions.,MySQL,0
innodb_max_dirty_pages_pct,Numeric,"The `innodb_max_dirty_pages_pct` parameter in MySQL controls the threshold at which InnoDB background write threads are activated to flush dirty pages from the buffer pool to disk. This parameter represents the percentage of dirty (modified) pages in the buffer pool that triggers the flushing mechanism. Setting a higher value can potentially improve performance by allowing more dirty pages to accumulate before flushing, but it can also increase the risk of data loss in the event of a crash.",MySQL,0
innodb_max_dirty_pages_pct_lwm,Numeric,The `innodb_max_dirty_pages_pct_lwm` parameter in MySQL specifies the low-water-mark percentage of dirty pages in the InnoDB buffer pool. It determines the point at which InnoDB initiates a background flush operation to clean up dirty pages. This parameter helps control the balance between write performance and flushing dirty pages to ensure efficient InnoDB operations.,MySQL,0
innodb_max_purge_lag,Integer,The `innodb_max_purge_lag` parameter in MySQL determines the maximum number of unpurged transactions that can exist in the InnoDB history list. This parameter plays a role in controlling the behavior of purging operations and can impact the storage space and performance of the InnoDB storage engine. It is available in MySQL versions supporting the InnoDB storage engine.,MySQL,0
innodb_max_purge_lag_delay,Integer,"The `innodb_max_purge_lag_delay` parameter in MySQL is used to specify the maximum delay in milliseconds allowed for purging unpurged transactions. This delay helps in managing the InnoDB storage engine's internal data structures. Setting a value for this parameter can prevent excessive delay in purging operations, which is important for maintaining database performance and integrity.

This parameter is available in MySQL versions where the InnoDB storage engine is utilized. It is not a deprecated parameter and should be configured carefully based on the workload and performance requirements of the MySQL server.",MySQL,0
innodb_max_undo_log_size,Integer,The MySQL configuration parameter innodb_max_undo_log_size defines the maximum size in bytes of the undo log for InnoDB tables. This parameter limits the amount of space available for storing undo logs used to roll back transactions. It is recommended to adjust this setting based on the workload and transaction volume of the MySQL server.,MySQL,0
innodb_merge_threshold_set_all_debug,Integer,"The MySQL configuration parameter `innodb_merge_threshold_set_all_debug` does not exist in the official MySQL documentation. If you have any other MySQL parameters you would like me to describe, please feel free to ask.",MySQL,0
innodb_monitor_disable,String,"The `innodb_monitor_disable` configuration parameter in MySQL is used to control the monitoring of the InnoDB storage engine. When set to `1`, various InnoDB-related monitoring features are disabled. This parameter is available in MySQL 5.7 and later versions.",MySQL,0
innodb_monitor_enable,String,"**Parameter: innodb_monitor_enable**

**Role and Purpose:**
The `innodb_monitor_enable` parameter in MySQL controls the activation or deactivation of the InnoDB monitoring feature, which provides detailed information on various InnoDB operations and performance metrics. Enabling this parameter can aid in troubleshooting and optimizing the performance of InnoDB storage engine in MySQL server. It is available in MySQL 5.7.22 and later versions.",MySQL,0
innodb_monitor_reset,Enumeration,"The `innodb_monitor_reset` configuration parameter in MySQL is used to reset the InnoDB monitor output. By setting this parameter to `1`, the InnoDB monitor information is reset, providing a fresh starting point for monitoring various InnoDB related activities within the MySQL server instance. This parameter is available in MySQL 5.7 and later versions.",MySQL,0
innodb_monitor_reset_all,Enumeration,"Parameter: innodb_monitor_reset_all

Description: The innodb_monitor_reset_all parameter in MySQL is used to reset all InnoDB monitoring metrics to their default values. This can be helpful for resetting the InnoDB monitoring system to its initial state, allowing users to start collecting performance data from scratch. This parameter is available in MySQL 5.7 and later versions.",MySQL,0
innodb_old_blocks_pct,Integer,The `innodb_old_blocks_pct` MySQL configuration parameter determines the threshold percentage for the number of old blocks within an InnoDB buffer pool. This parameter specifies the percentage of buffer pool blocks to be reserved for old pages that have not been accessed recently. The default value for this parameter is 37 in MySQL version 8.0.,MySQL,0
innodb_old_blocks_time,Integer,The `innodb_old_blocks_time` configuration parameter in MySQL specifies the time in milliseconds after which old versions of modified database pages are moved to the front of the doublewrite buffer. This helps in improving the efficiency of data modifications by reducing the time taken to access old versions of database pages. This parameter is not deprecated and is applicable to MySQL versions that support the InnoDB storage engine.,MySQL,0
innodb_online_alter_log_max_size,Integer,The `innodb_online_alter_log_max_size` configuration parameter specifies the maximum size in bytes for the log used during online DDL operations in InnoDB. This log records the changes made to tables during concurrent DDL operations to support instant schema changes without blocking regular DML operations. The default value is 134217728 (128 MB) and can be adjusted based on the workload and frequency of online DDL operations on the server.,MySQL,0
innodb_open_files,Integer,"The `innodb_open_files` configuration parameter in MySQL controls the number of open InnoDB data files allowed concurrently. Setting a value too high might lead to excessive file descriptors usage, while setting it too low can limit the number of InnoDB tables that can be accessed simultaneously. This parameter is available in MySQL 5.7 and later versions.",MySQL,0
innodb_optimize_fulltext_only,Boolean,"The `innodb_optimize_fulltext_only` MySQL configuration parameter is not recognized in MySQL documentation. It appears to be a hypothetical or non-standard parameter. For accurate information on MySQL configuration parameters related to InnoDB full-text search optimization, refer to the official MySQL documentation.",MySQL,0
innodb_parallel_read_threads,Integer,The `innodb_parallel_read_threads` configuration parameter in MySQL specifies the number of threads InnoDB uses for parallel read operations. This parameter controls the degree of parallelism during the parallel page read operation in InnoDB. Increasing the value can improve read performance when there are multiple concurrent read requests. This parameter is available in MySQL 5.7 and later versions.,MySQL,0
innodb_print_all_deadlocks,Boolean,"The `innodb_print_all_deadlocks` parameter in MySQL configures the InnoDB storage engine to log information about all deadlocks detected, including the transactions involved. This can be useful for diagnosing and resolving concurrency issues. It is supported in MySQL versions that include the InnoDB storage engine, typically versions 5.5 and above.",MySQL,0
innodb_print_ddl_logs,Boolean,"The `innodb_print_ddl_logs` configuration parameter in MySQL controls whether data definition language (DDL) statements for InnoDB tables are printed to the server error log. When enabled, these statements are logged, providing visibility into schema changes. This parameter is available in MySQL 5.7 and later versions.",MySQL,0
innodb_purge_batch_size,Integer,"The innodb_purge_batch_size parameter in MySQL specifies the number of redo log records that the InnoDB background operation performs during each batch of the purge operation. The purge operation is responsible for physically deleting old records and updating the data dictionary. By adjusting innodb_purge_batch_size, you can control the frequency and efficiency of purging operations in InnoDB. This parameter is relevant for MySQL versions 5.7 and higher.",MySQL,0
innodb_purge_rseg_truncate_frequency,Integer,The innodb_purge_rseg_truncate_frequency MySQL configuration parameter specifies the frequency at which the InnoDB UNDO log segment trims the oldest undo log entries during a purge operation. This parameter controls how often the system truncates an undo log record segment when it is entirely obsolete. It is available starting from MySQL version 8.0.65.,MySQL,0
innodb_random_read_ahead,Boolean,"The `innodb_random_read_ahead` MySQL configuration parameter controls the size of the buffer used for random reads during scans on InnoDB tables. This buffer helps reduce disk I/O operations by prefetching data pages ahead of access, improving query performance for random read operations. This parameter can be adjusted to optimize performance based on the workload characteristics of the database system.",MySQL,0
innodb_read_ahead_threshold,Integer,"The `innodb_read_ahead_threshold` MySQL configuration parameter defines the minimum number of pages a read operation should anticipate it will need to access sequentially within the buffer pool. If the estimated number of pages exceeds this threshold value, InnoDB activates read-ahead if it is available and supported by the underlying storage engine. This parameter helps optimize InnoDB read performance by specifying the amount of sequential read-ahead operations. It is available in MySQL 5.7 and later versions.",MySQL,0
innodb_redo_log_archive_dirs,String,The `innodb_redo_log_archive_dirs` MySQL configuration parameter specifies the directory location where InnoDB redo log archive files are stored. These redo log archive files are copies of InnoDB redo log files that have been successfully archived. This parameter helps in InnoDB crash recovery scenarios by providing an additional layer of protection for redo log files.,MySQL,0
innodb_redo_log_capacity,Integer,"**Parameter: innodb_redo_log_capacity**

- **Role:** The `innodb_redo_log_capacity` parameter in MySQL specifies the size in bytes of the InnoDB redo log buffer, which stores changes to data before they are written to the redo log files on disk.

- **Purpose:** A larger `innodb_redo_log_capacity` value can help improve the efficiency of write operations, reducing the need for frequent writes to the redo log files. However, setting this parameter too high may result in increased memory consumption.

- **Note:** This parameter is available in MySQL 8.0 and later versions. It is not applicable in earlier MySQL versions.",MySQL,0
innodb_redo_log_encrypt,Boolean,"The `innodb_redo_log_encrypt` parameter in MySQL is used to enable encryption of the redo log files for the InnoDB storage engine. When set to `ON`, it encrypts the redo log data to enhance the security of sensitive information stored in the database. This parameter is available in MySQL 5.7.11 and later versions.",MySQL,0
innodb_replication_delay,Integer,The `innodb_replication_delay` parameter in MySQL controls the delay in applying replicated transactions on InnoDB replicas. It allows for introducing an intentional delay in replication to safeguard against accidental data changes. This parameter is available in MySQL 5.7.22 and later versions.,MySQL,0
innodb_rollback_segments,Integer,The `innodb_rollback_segments` MySQL configuration parameter specifies the number of rollback segments allocated for InnoDB transactions. Each segment can store undo logs for a certain number of transactions. Having an appropriate number of segments can help improve transaction processing efficiency and prevent bottlenecks in the rollback process. This parameter is available in MySQL 5.6 and later versions.,MySQL,0
innodb_saved_page_number_debug,Integer,The innodb_saved_page_number_debug parameter in MySQL is not a valid or recognized configuration parameter according to the official MySQL documentation. It is important to refer to the MySQL documentation or seek guidance from the MySQL official support channels for accurate information on valid configuration parameters.,MySQL,0
innodb_segment_reserve_factor,Numeric,The innodb_segment_reserve_factor configuration parameter in MySQL defines a factor used to calculate the number of rollback segment pages reserved during recovery in InnoDB. This parameter helps determine the amount of space that remains off limits for general use until recovery completes. It is applicable to MySQL versions that use the InnoDB storage engine.,MySQL,0
innodb_spin_wait_delay,Integer,"The `innodb_spin_wait_delay` parameter in MySQL is used to configure the length of time in microseconds for InnoDB to spin-wait before entering a more efficient sleep state. By adjusting this parameter, you can fine-tune the trade-off between CPU usage and responsiveness. This parameter is applicable to MySQL versions where InnoDB storage engine is present.",MySQL,0
innodb_spin_wait_pause_multiplier,Integer,"The innodb_spin_wait_pause_multiplier MySQL configuration parameter specifies the factor used to determine the pause time between spin waits in InnoDB. During contention on mutexes or rw-locks, the InnoDB storage engine utilizes spin waits to reduce context switches. This parameter helps fine-tune the duration between such spin waits, potentially improving performance in highly contested environments. Not applicable for MySQL versions where this parameter is deprecated or not present in the documentation.",MySQL,0
innodb_stats_auto_recalc,Boolean,"The `innodb_stats_auto_recalc` parameter in MySQL controls whether InnoDB should recalculate table and index statistics automatically in order to provide up-to-date query optimization information. When enabled, InnoDB will automatically recalculate the statistics during table access if the statistics are deemed stale. This feature helps ensure that the query optimizer is working with accurate data for efficient query execution in the InnoDB storage engine.",MySQL,0
innodb_stats_include_delete_marked,Boolean,"The `innodb_stats_include_delete_marked` MySQL configuration parameter, introduced in MySQL 8.0.1, determines whether InnoDB includes delete-marked index statistics in the computed table statistics. When enabled (default), InnoDB considers index entries associated with rows that have been deleted or marked for deletion. This allows for more accurate table statistics but may increase the performance overhead during statistics calculations.",MySQL,0
innodb_stats_method,Enumeration,"The `innodb_stats_method` parameter in MySQL determines the method used for estimating statistics on InnoDB tables. This includes the number of rows and index cardinality. By setting this parameter, users can influence how the query optimizer generates execution plans based on these statistics. The available methods are `nulls_equal` (default) and `nulls_unequal`. The parameter is not deprecated and is available in MySQL versions where the InnoDB storage engine is supported.",MySQL,0
innodb_stats_on_metadata,Boolean,MySQL configuration parameter `innodb_stats_on_metadata` determines whether InnoDB updates table statistics during metadata operations such as SHOW TABLE STATUS or accessing INFORMATION_SCHEMA tables. Enabling this parameter may result in more accurate query execution plans but could cause performance overhead. This parameter is available starting from MySQL version 5.6.6.,MySQL,0
innodb_stats_persistent,Boolean,"The `innodb_stats_persistent` parameter, when enabled, instructs InnoDB to save the statistics even when the MySQL server is restarted. This helps in ensuring the accuracy of query optimization decisions over time. It is available in MySQL 5.7 and later versions.",MySQL,0
innodb_stats_persistent_sample_pages,Integer,"Parameter Name: innodb_stats_persistent_sample_pages

Description:
innodb_stats_persistent_sample_pages determines the number of index pages to sample when persisting statistics for InnoDB tables. Increasing this value can lead to more accurate index statistics but might incur additional overhead during stats collection. This parameter is available starting from MySQL 5.6.7.",MySQL,0
innodb_stats_transient_sample_pages,Integer,"The `innodb_stats_transient_sample_pages` configuration parameter in MySQL determines the number of index pages sampled for estimating statistics on tables while the server is running. This parameter helps InnoDB make better decisions in query optimization and execution plans. It is available for use in MySQL versions where the InnoDB storage engine is utilized, particularly for version 5.7 and above.",MySQL,0
innodb_status_output,Boolean,"The MySQL configuration parameter `innodb_status_output` controls the level of detail in the InnoDB storage engine's status output. When set to 'OFF', it disables the display of InnoDB status information, including data about the buffer pool, locks, transactions, and more. Setting it to 'ON' generates detailed status information for InnoDB, which can be useful for monitoring and troubleshooting performance issues.",MySQL,0
innodb_status_output_locks,Boolean,"The ""innodb_status_output_locks"" MySQL configuration parameter controls whether InnoDB should include lock information in the output of the SHOW ENGINE INNODB STATUS command. When set to 1, it enables the display of lock information, providing insight into the locks currently held in the InnoDB storage engine. This parameter is available in MySQL 5.7 and later versions.",MySQL,0
innodb_strict_mode,Boolean,"The `innodb_strict_mode` MySQL configuration parameter, introduced in MySQL 5.7.8, determines whether InnoDB runs in strict mode. When set to `ON`, non-strict transaction mode is disabled to ensure stricter SQL and commit/rollback handling. This parameter helps enforce data integrity and compliance with SQL standards within InnoDB transactions.",MySQL,0
innodb_sync_spin_loops,Integer,"The innodb_sync_spin_loops parameter in MySQL specifies the number of times an InnoDB mutex spinlock spins before suspending the current thread, aiming to reduce contention. This parameter helps fine-tune the performance of InnoDB by adjusting the number of loops the mutex spinlock performs before pausing. The default value of innodb_sync_spin_loops is 30.",MySQL,0
innodb_table_locks,Boolean,"The `innodb_table_locks` parameter in MySQL controls the behavior of InnoDB table-level locks. When set to 1 (default), InnoDB uses table-level locking for DML operations on InnoDB tables. This can prevent concurrent access to individual tables but may lead to contention in high-traffic scenarios.",MySQL,0
innodb_thread_concurrency,Integer,"The innodb_thread_concurrency configuration parameter in MySQL is used to limit the number of threads that InnoDB concurrent transactions can create on multi-core systems. Setting a value greater than zero restricts the maximum number of concurrent threads. However, it is generally recommended to leave this parameter unset (0) to allow InnoDB to manage thread concurrency dynamically. This parameter is available in MySQL 5.7 and higher versions.",MySQL,0
innodb_thread_sleep_delay,Integer,The innodb_thread_sleep_delay parameter in MySQL is used to control the delay in milliseconds between spin rounds for the InnoDB kernel mutex. This parameter helps in reducing unnecessary CPU usage by introducing a pause when a thread is waiting for a mutex lock. The default value for innodb_thread_sleep_delay is 10000 (10 milliseconds). This parameter is available in MySQL 5.7 and later versions.,MySQL,0
innodb_tmpdir,Directory name,"The `innodb_tmpdir` MySQL configuration parameter specifies the directory used for storing temporary files related to InnoDB operations, such as temporary tables or files for sorting. By default, temporary files are stored in the system's temporary directory. Specifying a different directory path can be useful for improving performance or managing disk space usage. This parameter is available in MySQL 5.6 and later versions.",MySQL,0
innodb_trx_purge_view_update_only_debug,Boolean,"The MySQL configuration parameter `innodb_trx_purge_view_update_only_debug` is not a valid or documented setting as of MySQL 8.0. If such a parameter existed in previous versions, it is either deprecated or undocumented. It is recommended to refer to the official MySQL documentation for up-to-date and accurate configuration parameters.",MySQL,0
innodb_trx_rseg_n_slots_debug,Integer,"The MySQL configuration parameter `innodb_trx_rseg_n_slots_debug` is not a publicly documented or supported setting. It appears to be related to internal debug or diagnostic functionalities within the InnoDB storage engine. As such, it is not intended for general use and should not be modified in a production environment. Please refer to the official MySQL documentation for supported configuration parameters.",MySQL,0
innodb_undo_log_encrypt,Boolean,"The `innodb_undo_log_encrypt` configuration parameter specifies whether to encrypt undo logs for InnoDB tables. When enabled, it encrypts undo logs to enhance data security by protecting historical changes within transactions. This parameter is available in MySQL 5.7.11 and higher versions.",MySQL,0
innodb_undo_log_truncate,Boolean,"The `innodb_undo_log_truncate` parameter in MySQL determines whether InnoDB truncates undo logs to free up space for reuse. When enabled, InnoDB periodically truncates undo logs to minimize the storage space they consume. By default, this parameter is set to `on` starting from MySQL 5.7.5.",MySQL,0
innodb_undo_tablespaces,Integer,"Parameter Name: innodb_undo_tablespaces

Description:
innodb_undo_tablespaces indicates the number of undo tablespaces available in InnoDB storage engine. Undo tablespaces store undo logs used to manage transactions and support features like rollback. By defining the number of undo tablespaces, users can optimize transaction management performance within the InnoDB storage engine.

Relevant MySQL Versions: MySQL 5.7 and above.",MySQL,0
innodb_use_fdatasync,Boolean,"The `innodb_use_fdatasync` parameter in MySQL controls whether the InnoDB storage engine uses the `fdatasync()` system call to flush data and index files to disk. Setting this parameter to 1 ensures that changes are flushed to disk, providing durability guarantees at the expense of slightly reduced performance. If set to 0, InnoDB relies on the operating system to flush data, which may improve performance but increases the risk of data loss in case of a crash. This parameter is available in MySQL 5.6 and later versions.",MySQL,0
insert_id,Integer,"The `insert_id` configuration parameter in MySQL server is deprecated since MySQL 5.7. It was previously used to store the last automatically generated value in a preceding `INSERT` statement. Instead of using `insert_id`, it is recommended to utilize the `LAST_INSERT_ID()` function to retrieve the last automatically generated value.",MySQL,0
interactive_timeout,Integer,"The `interactive_timeout` parameter in MySQL sets the number of seconds the server waits for activity on an interactive connection before closing it. This applies to connections that have not issued a query within the timeout period. Once the timeout is reached, the server terminates the connection to free up resources.",MySQL,0
internal_tmp_mem_storage_engine,Enumeration,"The `internal_tmp_mem_storage_engine` MySQL configuration parameter specifies the storage engine used for internal temporary tables managed in memory. By setting this parameter, users can control whether temporary tables are stored in memory or on disk. It is primarily used to optimize performance by reducing disk I/O operations for temporary table processing. This parameter is available in MySQL 8.0 and later versions.",MySQL,0
join_buffer_size,Integer,"The `join_buffer_size` parameter in MySQL specifies the size of the buffer used for joins that do not need a temporary table. It is allocated on a per-connection basis and can improve performance for queries with small join buffers. The default value is 256KB, and adjusting this parameter may be beneficial for optimizing query performance in certain circumstances.",MySQL,0
keep_files_on_create,Boolean,"The `keep_files_on_create` MySQL configuration parameter controls whether to retain temporary files created during the process of creating a table or not. When enabled, these files are kept for debugging purposes. This parameter is available in MySQL version 5.7 and later.",MySQL,0
key_buffer_size,Integer,"The MySQL configuration parameter key_buffer_size specifies the size of the buffer used for index blocks within the MyISAM storage engine. This parameter is relevant only for MySQL versions up to 5.6, as it is deprecated in favor of the innodb_buffer_pool_size parameter for InnoDB storage engine in later versions. Allocating an appropriate amount of memory to key_buffer_size can help improve query performance by reducing the frequency of disk I/O operations related to index lookups in MyISAM tables.",MySQL,0
key_cache_age_threshold,Integer,The `key_cache_age_threshold` MySQL configuration parameter specifies the minimum age in seconds that a key block in the key cache must have before being considered for eviction. Key blocks older than this threshold are candidates for removal from the key cache to make space for newer blocks. This parameter helps control key cache usage and eviction behavior to optimize performance.,MySQL,0
key_cache_block_size,Integer,The key_cache_block_size configuration parameter in MySQL specifies the size of blocks in the key cache. This parameter is used to control the organization of the key cache storage for index pages. Adjusting this parameter allows for optimizing the efficiency of key lookups in the MySQL server.,MySQL,0
key_cache_division_limit,Integer,"The `key_cache_division_limit` parameter in MySQL specifies the maximum number of blocks to allocate for caching key blocks in the key cache. When the key cache reaches the limit, the least-recently-used key block is removed to make space for the new block. This parameter helps optimize memory allocation and caching performance in MySQL server configurations where key caching is utilized effectively.",MySQL,0
keyring_aws_cmk_id,String,The `keyring_aws_cmk_id` MySQL configuration parameter is used to specify an AWS Key Management Service (KMS) customer master key (CMK) ID for encryption operations. This parameter is utilized in conjunction with the keyring encryption plugin to enable encryption at rest for cryptographic key storage. This parameter is available starting from MySQL 8.0.24.,MySQL,0
keyring_aws_region,Enumeration,The `keyring_aws_region` MySQL configuration parameter specifies the AWS region code where the Amazon Web Services (AWS) Key Management Service (KMS) is located for managing encryption keys. This setting is used in conjunction with the keyring_aws_profile parameter to configure MySQL to use AWS KMS for encryption key management. This parameter is available in MySQL 5.7.26 and later versions.,MySQL,0
keyring_hashicorp_auth_path,String,The `keyring_hashicorp_auth_path` configuration parameter in MySQL is used to specify the file path location for HashiCorp Vault authentication credentials in the keyring plugin. This parameter allows MySQL server to authenticate against HashiCorp Vault to retrieve encryption keys securely. This feature is available starting from MySQL version 8.0.25.,MySQL,0
keyring_hashicorp_ca_path,File name,The `keyring_hashicorp_ca_path` MySQL configuration parameter specifies the path to the HashiCorp Vault CA certificate file used to verify the identity of the HashiCorp Vault server when connecting for keyring operations. This parameter is relevant for MySQL servers configured to utilize HashiCorp Vault as a keyring plugin for encryption key management. It is available starting from MySQL version 8.0.19.,MySQL,0
keyring_hashicorp_caching,Boolean,"The `keyring_hashicorp_caching` MySQL configuration parameter enables caching of keyring plugin keys in a HashiCorp Vault keyring. When set to a value greater than 0, it specifies the maximum number of keys to cache. This parameter is available starting from MySQL version 8.0.25.",MySQL,0
keyring_hashicorp_role_id,String,The `keyring_hashicorp_role_id` MySQL configuration parameter is used to specify the role ID associated with a HashiCorp Vault keyring plugin. This parameter allows MySQL to authenticate and communicate with HashiCorp Vault to securely store and manage encryption keys. It is available starting from MySQL 8.0.24 and is used in conjunction with the keyring_hashicorp plugin for data encryption purposes.,MySQL,0
keyring_hashicorp_secret_id,String,The `keyring_hashicorp_secret_id` parameter in MySQL is used to specify the unique identifier for secrets stored in HashiCorp Vault when utilizing the keyring HashiCorp plugin. This parameter is essential for securely managing encryption keys and other sensitive data stored in the HashiCorp Vault when integrated with MySQL. It is available in MySQL 8.0 and later versions.,MySQL,0
keyring_hashicorp_server_url,String,The `keyring_hashicorp_server_url` configuration parameter in MySQL specifies the URL for the HashiCorp Vault server. This URL is used to access HashiCorp Vault when MySQL needs to encrypt or decrypt data using keyring plugins that interact with HashiCorp Vault. This parameter was introduced in MySQL 8.0.17.,MySQL,0
keyring_hashicorp_store_path,String,The `keyring_hashicorp_store_path` parameter in MySQL configuration specifies the path to the Keyring plugin used to store encryption keys securely with HashiCorp Vault integration. This parameter allows MySQL to securely access and interact with the encryption keys stored in HashiCorp Vault through the Keyring plugin. The path specified should point to the directory location where the Keyring plugin files related to HashiCorp Vault integration are stored.,MySQL,0
keyring_okv_conf_dir,Directory name,The `keyring_okv_conf_dir` configuration parameter in MySQL specifies the directory path where the Oracle Key Vault (OKV) configuration file is located. This file contains information necessary for MySQL to interact with Oracle Key Vault for keyring plugin operations. This parameter is available in MySQL 8.0.23 and later versions and is used when configuring MySQL for encryption key management with Oracle Key Vault.,MySQL,0
keyring_operations,Boolean,"The `keyring_operations` MySQL configuration parameter is used to enable keyring-related operations within the server, such as keyring key configuration and management. It is typically utilized in conjunction with keyring plugins for secure key management purposes. This parameter is available in MySQL 8.0 and later versions.",MySQL,0
last_insert_id,Integer,"The `last_insert_id` configuration parameter in MySQL is not a valid server parameter. If you meant `LAST_INSERT_ID()`, it is not a configuration parameter but a function. The `LAST_INSERT_ID()` function returns the most recently generated AUTO_INCREMENT value for a column in the current session. It is typically used after an INSERT statement to obtain the last inserted ID value within the same session.",MySQL,0
lc_messages,String,"The `lc_messages` MySQL configuration parameter specifies the language locale used for error messages and diagnostic messages. It affects the language in which MySQL communicates with the user regarding errors, information messages, and slow query logs. This parameter allows users to customize the language in which MySQL communicates information, enhancing user experience and facilitating troubleshooting.",MySQL,0
lc_time_names,String,"The `lc_time_names` MySQL configuration parameter specifies the locale for storing and displaying month and day names. By setting this parameter, you can control the language localization used for date and time-related information within the server. The value assigned to `lc_time_names` must be a valid locale name recognized by the underlying operating system. This parameter is available in MySQL versions 5.5 and later.",MySQL,0
local_infile,Boolean,"The `local_infile` MySQL configuration parameter controls the server's ability to allow or disallow the `LOAD DATA LOCAL` SQL statement. When enabled, `LOAD DATA LOCAL` can load data from local files on the client machine. This parameter can be used to enhance data import capabilities but should be carefully managed due to potential security risks associated with allowing file access.",MySQL,0
lock_wait_timeout,Integer,"The ""lock_wait_timeout"" configuration parameter in MySQL determines the number of seconds a transaction waits for a lock before timing out. If a transaction is unable to acquire a lock within this specified time frame, it will be aborted to prevent deadlock situations. This parameter helps manage concurrency control within MySQL databases by regulating how long transactions can wait for locks to be released.",MySQL,0
log_bin_trust_function_creators,Boolean,The MySQL configuration parameter `log_bin_trust_function_creators` controls whether stored function creators can modify their own functions while binary logging is enabled. Setting this parameter to `1` allows such modification without requiring the `SUPER` privilege for the creator. It is available in MySQL version 5.7.8 and later.,MySQL,0
log_error_services,String,The log_error_services parameter in MySQL specifies a list of services through which error messages can be sent. This parameter is used to define the destinations for error logging by specifying a list of services separated by commas. It is available from MySQL version 8.0.16 onward.,MySQL,0
log_error_suppression_list,String,"The log_error_suppression_list MySQL configuration parameter is used to specify a list of error codes that should be suppressed from being logged in the error log. DBAs can utilize this parameter to prevent certain errors from filling up the log file, thereby reducing noise and focusing on pertinent information. This parameter is available in MySQL 5.7 and later versions.  ",MySQL,0
log_error_verbosity,Integer,"The `log_error_verbosity` parameter in MySQL specifies the level of detail for error log messages generated by the server. It allows users to control the amount of information logged for errors encountered during server operation. The possible values for this parameter include errors, warnings, and notes, offering flexibility in tailoring the verbosity of error logging to suit different debugging needs.",MySQL,0
log_output,Set,"The `log_output` MySQL configuration parameter determines the destination for log output generated by various MySQL server components. Possible values are FILE, TABLE, NONE, or a combination separated by commas. This parameter allows administrators to specify where log information should be stored for monitoring and troubleshooting purposes. The functionality of `log_output` is available in MySQL 5.7 and later versions.",MySQL,0
log_queries_not_using_indexes,Boolean,"The MySQL configuration parameter ""log_queries_not_using_indexes"" is used to log any queries that are executed without using an index. When enabled, these queries will be recorded in the error log file, helping administrators identify inefficient queries that may need optimization. This parameter is available in MySQL versions 5.1.7 and later.",MySQL,0
log_raw,Boolean,"The `log_raw` MySQL configuration parameter is deprecated and should not be used. It was previously used to enable logging raw binary data. However, with the deprecation of the parameter, it is recommended to use other logging mechanisms available in MySQL for more efficient and secure logging practices. The use of `log_raw` may lead to potential security risks and is advised against in favor of supported alternatives.",MySQL,0
log_slow_admin_statements,Boolean,"The `log_slow_admin_statements` parameter in MySQL configures whether to log slow administrative statements in the slow query log. When enabled, it causes slow administrative statements to be written to the slow query log file along with regular slow queries. This parameter is available in MySQL versions 5.7.2 and later.

",MySQL,0
log_slow_extra,Boolean,The `log_slow_extra` MySQL configuration parameter enables logging of additional query execution information along with slow query logs. It is useful for diagnosing performance issues by providing more details about slow queries beyond what is included in the standard slow query log. This parameter is available in MySQL version 5.7 and newer versions.,MySQL,0
log_slow_replica_statements,Boolean,"The `log_slow_replica_statements` MySQL configuration parameter is used to enable logging of slow replication-related statements on replica servers. When activated, this parameter allows MySQL to write slow SQL statements that are part of replication delays to the slow query log on the replica. This functionality helps in identifying and troubleshooting performance issues related to replication processes.",MySQL,0
log_slow_slave_statements,Boolean,"The `log_slow_slave_statements` MySQL configuration parameter controls whether slow statements executed by replication slaves are logged to the slow query log. When enabled, slow statements executed by replication threads on the slave server are written to the slow query log. This parameter is available in MySQL versions 5.7.32 and later.",MySQL,0
log_statements_unsafe_for_binlog,Boolean,"The `log_statements_unsafe_for_binlog` MySQL configuration parameter enables logging of statements that are unsafe for statement-based binary logging. These statements, if logged, may not be replicated correctly because the logging format is not transaction-safe. It is recommended to use this option only for troubleshooting purposes and not for production environments.",MySQL,0
log_throttle_queries_not_using_indexes,Integer,"The 'log_throttle_queries_not_using_indexes' MySQL configuration parameter controls the frequency at which queries not using indexes are logged. When enabled, the server logs queries that are executed without using any indexes to speed up the search process. This parameter helps identify inefficient queries that may benefit from index optimization. Note: Starting from MySQL 5.7.2, this parameter is deprecated and its functionality is handled through the general query log or slow query log.",MySQL,0
log_timestamps,Enumeration,"The `log_timestamps` configuration parameter in MySQL determines whether to include timestamps in log messages. When enabled, log entries will include timestamps, aiding in the identification of when certain events occur. This parameter is available starting from MySQL version 5.7.9.",MySQL,0
long_query_time,Numeric,"The `long_query_time` parameter in MySQL specifies the threshold duration in seconds for determining when a query is considered slow. Queries that exceed this threshold are logged in the slow query log if the `slow_query_log` option is enabled. By setting an appropriate value for `long_query_time`, users can track and analyze queries that may need optimization for improved performance. This parameter has been available in MySQL versions 5.1.21 and later.",MySQL,0
low_priority_updates,Boolean,"The `low_priority_updates` configuration parameter in MySQL is used to prioritize `INSERT` and `UPDATE` statements with the `LOW_PRIORITY` keyword. When enabled, these statements receive a lower priority for execution, allowing higher-priority statements to be processed first. This can help prevent lock contention and ensure smoother operation in scenarios with concurrent updates. The `low_priority_updates` parameter is supported in MySQL versions 5.6 and newer.",MySQL,0
mandatory_roles,String,"The `mandatory_roles` MySQL configuration parameter is not a standard MySQL server parameter found in the official MySQL documentation. It appears that this specific parameter does not exist in MySQL's configuration settings. If you have any other MySQL configuration parameters you'd like to learn about, feel free to ask.",MySQL,0
master_verify_checksum,Boolean,"The `master_verify_checksum` parameter in MySQL is used to enable or disable checksum verification for binary log events received from a master server when using MySQL replication. When set to 1, checksum verification for binary log events is enabled, ensuring data integrity. This parameter is applicable to MySQL version 5.6.3 and later.",MySQL,0
max_allowed_packet,Integer,The `max_allowed_packet` parameter in MySQL defines the maximum size in bytes of a packet or a generated string. This value applies to all client programs and the server and is used to set the maximum size of SQL statements or result sets sent between client and server. The default value for `max_allowed_packet` is 4MB and can be adjusted based on the requirements of the application.,MySQL,0
max_binlog_cache_size,Integer,The `max_binlog_cache_size` parameter in MySQL specifies the maximum size in bytes for caching events in the binary log cache. This cache is used when writing events to the binary log in cases where they cannot be written immediately. Setting a higher value can help optimize performance by reducing the need to flush binary log events to disk frequently. This parameter is available in MySQL 5.7 and later versions.,MySQL,0
max_binlog_size,Integer,"The max_binlog_size configuration parameter in MySQL specifies the maximum size in bytes for each binary log file. Once this size is reached, a new binary log file is created to continue logging. This parameter helps control the size of individual log files, aiding in log file management and disk space utilization in the MySQL server.",MySQL,0
max_binlog_stmt_cache_size,Integer,max_binlog_stmt_cache_size is a MySQL server parameter that determines the maximum size in bytes of the statement cache used for caching statements that are replicated by the binary log. This cache improves the efficiency of the binary log replication process by reducing the need to send the same SQL statement multiple times. This parameter is available starting from MySQL 8.0.23.,MySQL,0
max_connect_errors,Integer,The max_connect_errors parameter in MySQL defines the maximum number of failed connection attempts allowed before the server blocks further connections from that host. This parameter helps prevent denial-of-service attacks by limiting the impact of repeated failed connection attempts. It is available in all MySQL versions.,MySQL,0
max_connections,Integer,The `max_connections` parameter in MySQL specifies the maximum number of simultaneous client connections allowed to the server. It controls the number of clients that can connect to the MySQL server at the same time. Exceeding this limit may result in new client connections being refused until existing connections are closed or timeout.,MySQL,0
max_delayed_threads,Integer,"The `max_delayed_threads` parameter in MySQL specifies the maximum number of threads that can be used for the `DELAYED` option with `INSERT` statements. This option allows multiple rows to be inserted as a batch operation, delaying execution until a low-traffic period. The parameter helps control the maximum number of threads that can be held up for delayed inserts, thus preventing excessive resource usage.",MySQL,0
max_error_count,Integer,"The `max_error_count` configuration parameter in MySQL specifies the maximum number of errors allowed before a multiple-table or multiple-row operation is aborted. When an operation encounters errors exceeding this limit, it is stopped and an error result is returned. This parameter helps prevent long-running operations from causing an excessive number of errors. The `max_error_count` parameter is available in MySQL 5.7 and later versions.",MySQL,0
max_execution_time,Integer,"The `max_execution_time` parameter in MySQL specifies the maximum number of seconds an individual query is allowed to execute before being terminated. Once set, this parameter helps prevent queries from running indefinitely and potentially affecting server performance. This parameter is not a standard MySQL configuration option but can be implemented using external tools or custom code.",MySQL,0
max_heap_table_size,Integer,The max_heap_table_size parameter in MySQL determines the maximum size allowed for an in-memory temporary table created in the MEMORY storage engine. This value sets the threshold for automatically converting an in-memory table to on-disk storage when it exceeds the defined size. It is advisable to configure this parameter based on the memory resources available to maintain efficient performance for temporary tables.,MySQL,0
max_insert_delayed_threads,Integer,The MySQL configuration parameter `max_insert_delayed_threads` specifies the maximum number of threads allowed to handle INSERT DELAYED statements concurrently. INSERT DELAYED is deprecated as of MySQL 5.6 and removed in MySQL 5.7 and later versions. This parameter should not be used in current MySQL versions.,MySQL,0
max_join_size,Integer,"The `max_join_size` parameter in MySQL specifies the maximum number of rows to use when optimizing a join operation. If the optimizer estimates that the number of rows in the result set will exceed this value, it will stop optimizing the join. This parameter helps control query performance by limiting the optimization complexity in situations where joins may result in large intermediate result sets.",MySQL,0
max_length_for_sort_data,Integer,The `max_length_for_sort_data` MySQL configuration parameter specifies the maximum length in bytes for grouping buffer allocations during sorting operations. It determines the maximum amount of memory that can be allocated for sorting columns when performing GROUP BY or ORDER BY operations. This parameter is available starting from MySQL version 8.0.0.,MySQL,0
max_points_in_geometry,Integer,"The `max_points_in_geometry` parameter in MySQL specifies the maximum number of points in a geometry value. It controls the implementation limits for geometric types such as Point, LineString, and Polygon. This parameter is available starting from MySQL 8.0.23.",MySQL,0
max_prepared_stmt_count,Integer,The `max_prepared_stmt_count` configuration parameter in MySQL specifies the maximum number of prepared statements that can be stored on the server. Prepared statements are SQL templates that are parsed and compiled once and then executed multiple times with different parameters. This parameter helps control memory usage related to prepared statements. It is available in MySQL 8.0 and later versions.,MySQL,0
max_relay_log_size,Integer,"The `max_relay_log_size` parameter in MySQL specifies the maximum size in bytes for a relay log file. Once the specified size is reached, the relay log rotates to a new file to prevent it from growing indefinitely. This parameter helps to manage the storage consumption of relay logs in MySQL replication setups.",MySQL,0
max_seeks_for_key,Integer,The `max_seeks_for_key` MySQL configuration parameter specifies the maximum number of seeks MySQL will perform when searching for a key in a key cache entry. This parameter is used to limit the number of seeks when searching for an index key. It is applicable to MySQL versions prior to 5.5.,MySQL,0
max_sort_length,Integer,The `max_sort_length` MySQL configuration parameter specifies the maximum number of bytes to use when sorting a data BLOB or TEXT column within an ORDER BY or GROUP BY clause. It affects the optimization of queries that involve sorting large columns to prevent excessive memory usage. This parameter is not deprecated and is available in all supported MySQL versions.,MySQL,0
max_sp_recursion_depth,Integer,The `max_sp_recursion_depth` MySQL configuration parameter specifies the maximum recursion depth allowed for stored procedures. This parameter limits the level of recursive calls within a stored procedure to prevent stack overflow errors. It can be adjusted to control the depth of recursion permitted in the execution of stored procedures. This parameter is available starting from MySQL 8.0.23.,MySQL,0
max_user_connections,Integer,"The `max_user_connections` MySQL configuration parameter specifies the maximum number of simultaneous connections a single user account can have to the server. Once this limit is reached, further connection attempts by the user will be denied until existing connections are closed. It allows administrators to control the server's resource allocation on a per-user basis. ",MySQL,0
max_write_lock_count,Integer,"The max_write_lock_count parameter in MySQL defines the maximum number of write locks that a thread can acquire. When this limit is reached, the thread blocks until it can acquire the necessary locks. This parameter helps prevent a single thread from acquiring an excessive number of write locks, potentially causing resource contention.",MySQL,0
min_examined_row_limit,Integer,"The `min_examined_row_limit` MySQL configuration parameter specifies the threshold at which the server switches from using full table scans to using an index to optimize query processing. When a query examines fewer rows than the specified value, MySQL may choose to perform a full table scan to potentially improve performance. This parameter is available in MySQL versions 5.7.4 and later.",MySQL,0
myisam_data_pointer_size,Integer,"The `myisam_data_pointer_size` parameter in MySQL defines the number of bytes used to store internal data pointers for MyISAM tables. This parameter configures the size of the data pointer field in MyISAM table indexes, affecting the maximum row size allowed in MyISAM tables. It is relevant for adjusting the storage characteristics of MyISAM tables in MySQL versions up to and including 5.7.",MySQL,0
myisam_max_sort_file_size,Integer,The `myisam_max_sort_file_size` parameter in MySQL determines the maximum size for temporary files when sorting MyISAM tables during operations such as ALTER TABLE or REPAIR TABLE. This setting controls the amount of memory allocated for sorting data during query execution. It is applicable to MySQL versions where MyISAM storage engine is supported.,MySQL,0
myisam_sort_buffer_size,Integer,"The `myisam_sort_buffer_size` configuration parameter in MySQL specifies the buffer size used for MyISAM index sorting. Increasing this value can improve the speed of index creation for MyISAM tables but may also increase memory usage. This parameter is relevant for MySQL versions that support MyISAM storage engine, but note that MyISAM tables have been deprecated in MySQL 8.0 and replaced by InnoDB.",MySQL,0
myisam_stats_method,Enumeration,"The `myisam_stats_method` MySQL configuration parameter specifies the method used by the server to gather statistics about MyISAM tables. It is used to control the algorithm employed for estimating cardinality in the indexes of MyISAM tables. The available options for this parameter typically include NULLS_EQUAL, NULLS Unequal, and NULLS_IGNORED.",MySQL,0
myisam_use_mmap,Boolean,"The MySQL configuration parameter `myisam_use_mmap` determines whether MySQL uses memory-mapped access to MyISAM tables. When enabled, it allows MyISAM tables to be memory-mapped, potentially improving read performance in some scenarios. This parameter is typically used for fine-tuning performance on systems where memory-mapped I/O is beneficial.",MySQL,0
mysql_firewall_mode,Boolean,"The `mysql_firewall_mode` configuration parameter in MySQL determines the operational mode for the MySQL Enterprise Firewall plugin. This plugin offers SQL statement analysis and filtering capabilities to prevent attacks on the MySQL server. The available modes include ""OFF,"" ""DETECTING,"" and ""PROTECTING,"" each offering varying levels of security enforcement. Ensure to refer to the official MySQL Enterprise Firewall documentation for detailed information on configuring and utilizing this parameter effectively.",MySQL,0
mysql_firewall_trace,Boolean,The `mysql_firewall_trace` parameter in MySQL enables tracing for the query firewall plugin. It logs detailed information regarding query firewall rule matches and rule hits. This parameter is available in MySQL versions 8.0.14 and later.,MySQL,0
mysql_native_password_proxy_users,Boolean,"The `mysql_native_password_proxy_users` configuration parameter in MySQL specifies whether to allow proxying of users authenticating using the `mysql_native_password` authentication plugin. When enabled, users authenticated using this plugin can be proxied as different users. This parameter was introduced in MySQL 8.0.24.",MySQL,0
mysqlx_compression_algorithms,Set,"The mysqlx_compression_algorithms MySQL configuration parameter specifies the compression algorithms supported by the MySQL X Plugin. This parameter allows users to enable specific compression algorithms for communication between clients and the MySQL server via the X Protocol. Valid values for this parameter include ""uncompressed,"" ""zlib,"" ""zstd,"" and ""uncompressed_messagepack."" This parameter is available starting from MySQL 8.0.0.",MySQL,0
mysqlx_connect_timeout,Integer,The mysqlx_connect_timeout parameter in MySQL specifies the timeout in seconds for establishing a connection to a MySQL X Protocol server. This parameter is effective in controlling how long the client should wait for connection establishment before timing out. It is relevant for systems utilizing the MySQL X Protocol in MySQL Server 8.0.,MySQL,0
mysqlx_deflate_default_compression_level,Integer,"The `mysqlx_deflate_default_compression_level` configuration parameter in MySQL determines the default compression level used by MySQL X Plugin for transmitting data compressed with the
DEFLATE algorithm. The parameter allows users to set the desired compression level for optimizing the balance between network bandwidth and CPU utilization. This parameter is available starting from MySQL 8.0.17.",MySQL,0
mysqlx_deflate_max_client_compression_level,Integer,The `mysqlx_deflate_max_client_compression_level` parameter in MySQL configures the maximum compression level that clients can utilize when communicating with the MySQL X Plugin using the deflate algorithm. This setting controls the level of compression applied to data transferred between clients and the MySQL server via MySQL X Plugin. The valid range typically varies from 0 (no compression) to 9 (maximum compression).,MySQL,0
mysqlx_document_id_unique_prefix,Integer,The `mysqlx_document_id_unique_prefix` configuration parameter in MySQL is used to specify a prefix that is added to document identifiers in MySQL X DevAPI document collections to ensure uniqueness. This prefix helps to avoid conflicts when working with documents that have the same identifier across different collections. The parameter is available starting from MySQL 8.0.17.,MySQL,0
mysqlx_enable_hello_notice,Boolean,"The mysqlx_enable_hello_notice parameter in MySQL controls whether the server sends a notice in the Initial Handshake Packet from the X Protocol. This notice indicates the server's capabilities. By default, this parameter is enabled. This feature is available in MySQL 8.0 and later versions.",MySQL,0
mysqlx_idle_worker_thread_timeout,Integer,The `mysqlx_idle_worker_thread_timeout` parameter in MySQL controls the idle timeout duration for worker threads in the MySQL X Plugin system. Worker threads that remain idle for longer than the specified timeout value will be terminated to free up system resources. This parameter is specific to MySQL versions that support the X Plugin system.,MySQL,0
mysqlx_interactive_timeout,Integer,"The `mysqlx_interactive_timeout` parameter in MySQL defines the maximum idle time, in seconds, for an interactive session with the MySQL X plugin. If there is no activity during this period, the server automatically disconnects the client. This parameter is specific to MySQL versions that support the X plugin functionality.",MySQL,0
mysqlx_lz4_default_compression_level,Integer,The MySQL configuration parameter mysqlx_lz4_default_compression_level determines the default compression level for LZ4 compression used in MySQL X Plugin operations. The parameter allows specifying the compression level for communication between clients and the server when using the X Protocol. This parameter is available starting from MySQL version 8.0.13.,MySQL,0
mysqlx_lz4_max_client_compression_level,Integer,"The `mysqlx_lz4_max_client_compression_level` MySQL configuration parameter sets the maximum compression level that clients using the MySQL X Plugin can utilize when employing the LZ4 compression algorithm. It controls the level of compression applied to communication data, allowing users to adjust the balance between bandwidth savings and CPU utilization. This parameter is available in MySQL 8.0 and later versions.",MySQL,0
mysqlx_max_allowed_packet,Integer,The `mysqlx_max_allowed_packet` configuration parameter controls the maximum size of the packet for communication between clients and the X Plugin. Increasing this value allows larger data packets to be transmitted when using the X Plugin. This parameter is specific to MySQL Server 8.0.19 and newer versions.,MySQL,0
mysqlx_max_connections,Integer,"The `mysqlx_max_connections` MySQL configuration parameter specifies the maximum number of simultaneous connections allowed for the MySQL X Plugin (mysqlx). This parameter is used to control the maximum number of clients that can connect to the MySQL server via the X Protocol provided by the X Plugin. The default value for `mysqlx_max_connections` is 1000, and it can be adjusted to suit the requirements of the server and application.",MySQL,0
mysqlx_min_worker_threads,Integer,The `mysqlx_min_worker_threads` parameter in MySQL defines the minimum number of worker threads available for MySQL X protocol connections. These worker threads handle message processing tasks for X protocol connections and a higher value can help in improving the overall performance for X protocol operations. This parameter is applicable starting from MySQL 8.0.ogo-MySQL.,MySQL,0
mysqlx_read_timeout,Integer,"The `mysqlx_read_timeout` parameter in MySQL defines the time limit, in seconds, for reading data from a MySQL X Protocol connection. When a read operation extends beyond this timeout, the connection is automatically closed. This parameter is specifically designed for connections using the MySQL X Protocol in MySQL 5.7.12 and later versions.",MySQL,0
mysqlx_wait_timeout,Integer,"The mysqlx_wait_timeout parameter in MySQL defines the number of seconds the X Protocol session thread should wait for activity before timing out. By default, this parameter is set to 30 seconds. This timeout value can be adjusted based on the specific requirements of X Protocol connections in the MySQL server configuration.",MySQL,0
mysqlx_write_timeout,Integer,"The `mysqlx_write_timeout` configuration parameter in MySQL is used to specify the maximum amount of time the X Plugin will wait for a response during write operations. If a write operation does not complete within this defined timeout period, an error will be triggered. This parameter is applicable in MySQL 8.0 and later versions.",MySQL,0
mysqlx_zstd_default_compression_level,Integer,The `mysqlx_zstd_default_compression_level` parameter in MySQL configures the default compression level used by the Zstd compression algorithm for MySQL X Plugin. This parameter allows users to set the desired compression level for the data transmitted using MySQL X Protocol to achieve a balance between compression ratio and encoding/decoding speed. This parameter is relevant for MySQL 8.0.26 and later versions.,MySQL,0
mysqlx_zstd_max_client_compression_level,Integer,"The `mysqlx_zstd_max_client_compression_level` parameter in MySQL specifies the maximum Zstd compression level that clients can use when communicating with the MySQL X Plugin. This setting allows administrators to control the level of compression for data exchanges, balancing between compression ratio and computational resources. This parameter is only applicable when using the MySQL X Protocol and the Zstd compression algorithm.",MySQL,0
ndb_autoincrement_prefetch_sz,Integer,"The `ndb_autoincrement_prefetch_sz` MySQL configuration parameter is used in MySQL Cluster to set the number of consecutive auto-increment values that are prefetched and cached for the NDB storage engine. This helps reduce the number of transactions required to obtain subsequent auto-increment values, improving performance in high-concurrency scenarios with many auto-increment inserts. This parameter is specific to MySQL Cluster and should be carefully configured based on the workload characteristics.",MySQL,0
ndb_clear_apply_status,Boolean,The `ndb_clear_apply_status` MySQL configuration parameter is used to clear the apply status of a transaction within the NDB (MySQL Cluster) storage engine. This parameter can be set to `ON` to reset the apply status to prevent unintended re-applications of already-applied transactions in case of a node failure. It is specific to MySQL Cluster configurations using NDB Cluster storage engine and is not applicable to standalone MySQL server setups.,MySQL,0
ndb_conflict_role,Enumeration,"The `ndb_conflict_role` parameter is used in MySQL Cluster configurations to specify the role that the cluster SQL node should assume when a conflict arises during an operation. The possible values for this parameter are `aborted`, `deprecated`, and `ignored`, each determining how conflicts are managed. This parameter is specific to MySQL Cluster configurations and is not applicable in standalone MySQL server setups.",MySQL,0
ndb_data_node_neighbour,Integer,The MySQL configuration parameter `ndb_data_node_neighbour` specifies the hostname and port of a neighbor node. This parameter is used in MySQL Cluster configurations to define communication settings between data nodes in the cluster. The parameter is specific to MySQL Cluster deployments with NDB storage engine.,MySQL,0
ndb_dbg_check_shares,Integer,"The `ndb_dbg_check_shares` MySQL configuration parameter is used in the MySQL Cluster NDB storage engine to enable checking of share records within the NDB large shared memory segment. Setting this parameter to 1 activates share block checking within the shared memory pool, aiding in detecting data corruption. This parameter is applicable in MySQL Cluster versions that support the NDB storage engine.",MySQL,0
ndb_default_column_format,Enumeration,"The MySQL configuration parameter `ndb_default_column_format` specifies the default column format used when creating columns in NDB Cluster tables. The allowed values are `FIXED` or `DYNAMIC`. When set to `FIXED`, columns are created with a fixed-length format; when set to `DYNAMIC`, columns are created with a dynamic-length format. This parameter is specific to MySQL NDB Cluster.",MySQL,0
ndb_default_column_format,Enumeration,"The `ndb_default_column_format` MySQL configuration parameter specifies the default storage format for columns in NDB Cluster tables. It determines how data is physically stored in the NDB storage engine. This parameter can be set to either FIXED or DYNAMIC, with FIXED being the default format. ",MySQL,0
ndb_deferred_constraints,Integer,"**Parameter: ndb_deferred_constraints**

- **Role and Purpose:**
  - `ndb_deferred_constraints` is a MySQL Cluster parameter used in NDB Cluster environments to control the behavior of foreign key constraint checks. Enabling this parameter allows constraint checks to be deferred until the end of a transaction, potentially improving performance in certain scenarios.
  ",MySQL,0
ndb_deferred_constraints,Integer,"The MySQL configuration parameter ndb_deferred_constraints is used in MySQL Cluster to control the behavior of constraint checking during transactions. When set to 1, it allows checking of foreign key constraints to be deferred until the end of a transaction. This can help improve performance when handling multiple DML operations that involve foreign key relationships.",MySQL,0
ndb_distribution,Enumeration,The 'ndb_distribution' parameter in MySQL is used in conjunction with MySQL Cluster. It determines the data distribution method for partitioning tables across data nodes in a MySQL Cluster. This parameter helps optimize data distribution to achieve better performance and scalability in MySQL Cluster environments.,MySQL,0
ndb_distribution,Enumeration,"The `ndb_distribution` parameter in MySQL is used to configure the distribution of data across multiple data nodes in a MySQL Cluster. It determines how data is partitioned and distributed within the NDB Cluster, impacting the performance and scalability of the cluster. This parameter is specific to MySQL NDB Cluster and is not applicable to standalone MySQL Server configurations.",MySQL,0
ndb_eventbuffer_free_percent,Integer,The MySQL configuration parameter `ndb_eventbuffer_free_percent` specifies the percentage of free space to maintain in the event buffer. It is used to control memory usage by setting the threshold for when to start dropping events in case the free space falls below the specified percentage. This parameter is specific to MySQL Cluster.,MySQL,0
ndb_eventbuffer_max_alloc,Integer,"The MySQL configuration parameter ""ndb_eventbuffer_max_alloc"" defines the maximum number of event buffer memory blocks that can be allocated per data node. This parameter is specific to MySQL Cluster and allows users to control the allocation of event buffer memory resources for data nodes. It is recommended not to exceed this limit to prevent resource contention and potential performance issues.",MySQL,0
ndb_extra_logging,Integer,"The ndb_extra_logging configuration parameter in MySQL is used in MySQL Cluster to enable additional logging for debugging purposes. When enabled, it allows for more detailed information to be written to the cluster log files, aiding in troubleshooting of issues within the cluster environment. This parameter is specific to MySQL Cluster and is not applicable to standalone MySQL server configurations.",MySQL,0
ndb_force_send,Boolean,"MySQL Configuration Parameter: ndb_force_send

- Description: The `ndb_force_send` parameter in MySQL is used to force data node communication to occur immediately when data changes are made, bypassing any batching mechanisms that might delay sending the changes to the storage nodes in a MySQL Cluster setup. Setting this parameter to 1 can help in scenarios where immediate data synchronization is critical and maximizing the real-time nature of data changes is required.
",MySQL,0
ndb_fully_replicated,Boolean,"The `ndb_fully_replicated` MySQL configuration parameter is used in MySQL Cluster to control the level of replication required for a table to be considered fully replicated within the cluster. When enabled, all rows of a table must be present on all data nodes for it to be marked as fully replicated. This parameter is specific to MySQL Cluster configurations that utilize the NDB storage engine.",MySQL,0
ndb_index_stat_enable,Boolean,"The `ndb_index_stat_enable` configuration parameter in MySQL is used to enable or disable storage engine statistic collection for NDB Cluster. When enabled, it allows the storage engine to collect index usage statistics, allowing for optimization of query execution plans based on these statistics. This parameter is specific to MySQL NDB Cluster and is not available in standard MySQL server setups.",MySQL,0
ndb_index_stat_option,String,"The `ndb_index_stat_option` configuration parameter in MySQL is specific to the NDB Cluster storage engine. It determines whether the storage engine should collect index statistics for query optimization purposes. The available options are `off`, `warn`, or `on`. This parameter is applicable to MySQL versions that support NDB Cluster.",MySQL,0
ndb_join_pushdown,Boolean,"The `ndb_join_pushdown` configuration parameter in MySQL is used in MySQL Cluster. When enabled, it allows the MySQL optimizer to push join operations down to the NDB storage engine. This can reduce network traffic between MySQL Servers and the data nodes, improving query performance. This parameter is specific to MySQL versions that support MySQL Cluster (NDB Cluster).",MySQL,0
ndb_log_binlog_index,Boolean,The `ndb_log_binlog_index` configuration parameter is used in MySQL Cluster to specify the path to the binary log index file in NDB Cluster. This parameter is specific to MySQL Cluster configurations where the NDB storage engine is being used. It helps MySQL Cluster locate and manage the binary log index file for transactional consistency and replication purposes.,MySQL,0
ndb_log_cache_size,Integer,"The ""ndb_log_cache_size"" parameter in MySQL is related to the MySQL Cluster storage engine. It specifies the size (in bytes) of the transaction log cache for NDB Cluster. Enabling this parameter helps in optimizing performance by efficiently buffering log records before writing them to disk. This parameter is specific to MySQL Cluster versions and is not applicable to standard MySQL server configurations.",MySQL,0
ndb_log_empty_epochs,Boolean,"The MySQL configuration parameter `ndb_log_empty_epochs` specifies the number of empty epochs to log in the NDB Cluster. An epoch in NDB Cluster represents a time period in which a consistent view of the data is maintained. By adjusting this parameter, users can control the amount of logging for empty epochs, which can impact cluster performance and log usage. This parameter is specific to MySQL NDB Cluster versions.",MySQL,0
ndb_log_empty_epochs,Boolean,"The `ndb_log_empty_epochs` parameter in MySQL is used to specify the number of empty epochs allowed before increasing the log file size in NDB Cluster. An empty epoch signifies a period in which no data has been written to the logs. By adjusting this parameter, administrators can manage log file growth based on cluster activity. This parameter is specific to MySQL NDB Cluster.",MySQL,0
ndb_log_empty_update,Boolean,"The `ndb_log_empty_update` parameter in MySQL is used to control whether NDB Cluster should log empty updates to non-existent rows in the cluster's binary log. When this parameter is set to the default value of 0, empty updates are not logged. However, setting it to 1 causes these updates to be written to the binary log. This parameter is specific to MySQL Cluster configurations.",MySQL,0
ndb_log_empty_update,Boolean,The MySQL configuration parameter ndb_log_empty_update is not a valid system variable in the MySQL database system. It appears to be a non-existent or undocumented parameter as per the official MySQL documentation. Please refer to the official MySQL documentation for a comprehensive list of valid configuration parameters.,MySQL,0
ndb_log_exclusive_reads,Boolean,"The `ndb_log_exclusive_reads` MySQL configuration parameter is used in MySQL Cluster to control whether exclusive read locks are written to NDBCLUSTER logs. When enabled, it ensures that SELECT statements holding an exclusive read lock are written to the transaction log. This parameter is specific to MySQL Cluster versions 7.3.4, 7.4.2, and later.",MySQL,0
ndb_log_exclusive_reads,Boolean,"The `ndb_log_exclusive_reads` parameter in MySQL is used to control the behavior of logging reads in NDB Cluster. When enabled, it allows a transaction's read operations to be logged separately from write operations, ensuring that the reads do not block or wait for write operations to complete. This parameter helps in improving the overall performance and scalability of NDB Cluster environments.",MySQL,0
ndb_log_transaction_compression,Boolean,"The MySQL configuration parameter `ndb_log_transaction_compression` is used to enable or disable compression for binary log transactions in MySQL Cluster (NDB). When this parameter is enabled, binary log transactions are compressed before they are written to the log. This helps reduce disk space usage and can improve performance in environments with high write loads.",MySQL,0
ndb_log_transaction_compression_level_zstd,Integer,"The 'ndb_log_transaction_compression_level_zstd' MySQL configuration parameter determines the compression level used when applying Zstd compression to transaction logs in a MySQL Cluster with NDB storage engine. The Zstd compression algorithm offers varying levels of compression ratios and speed, and this parameter allows you to specify the desired balance between compression efficiency and CPU overhead. It is applicable to MySQL Cluster configurations utilizing the NDB storage engine and is available in MySQL NDB Cluster 7.6.11 and later versions.",MySQL,0
ndb_metadata_check,Boolean,"The `ndb_metadata_check` MySQL configuration parameter is utilized to enable or disable the metadata check for NDB Cluster tables during server startup. It determines whether the MySQL Server will check metadata consistency for NDB Cluster tables when the server starts up. By default, this option is enabled, ensuring that metadata consistency checks are performed. This parameter is specific to MySQL NDB Cluster and is not applicable to standard MySQL Server setups.",MySQL,0
ndb_metadata_check_interval,Integer,The MySQL configuration parameter `ndb_metadata_check_interval` is used to set the interval in milliseconds at which the data nodes verify the metadata of the MySQL Cluster. This parameter helps ensure the consistency and integrity of metadata across the cluster by conducting periodic metadata checks. `ndb_metadata_check_interval` is specific to MySQL Cluster and is applicable to MySQL NDB Cluster 7.5 and later versions.,MySQL,0
ndb_metadata_sync,Boolean,The `ndb_metadata_sync` configuration parameter in MySQL is used to define the number of milliseconds between synchronization of NDB Cluster meta-data on all data nodes. This synchronization process ensures consistency across the distributed NDB Cluster by updating metadata changes. This parameter is specific to MySQL Cluster and is used to fine-tune the performance and consistency of metadata synchronization operations.,MySQL,0
ndb_read_backup,Boolean,"The `ndb_read_backup` parameter in MySQL is used to control whether backups can be read in NDB Cluster. When set to `ON`, it allows queries to be executed on backup data. This parameter is specific to MySQL NDB Cluster and is available starting from version 5.6.",MySQL,0
ndb_recv_thread_activation_threshold,Integer,The `ndb_recv_thread_activation_threshold` parameter in MySQL is used to define the threshold for activating new receive threads in a MySQL Cluster. This parameter determines when additional receive threads for data node parallelism are created in response to increasing load. It helps optimize the performance of data node operations in a MySQL Cluster environment. This parameter is specific to MySQL Cluster configurations with NDB Cluster storage engine starting from MySQL 5.7.,MySQL,0
ndb_recv_thread_cpu_mask,Bitmap,The `ndb_recv_thread_cpu_mask` parameter in MySQL is used to specify the CPU mask for the Data Node receiver kernel threads in a MySQL Cluster setup. This parameter allows administrators to control the affinity of these threads to specific CPUs for optimized performance and resource allocation. It is specific to MySQL Cluster deployments utilizing the NDB storage engine.,MySQL,0
ndb_replica_batch_size,Integer,"**Parameter Name:** ndb_replica_batch_size

**Description:** The `ndb_replica_batch_size` parameter in MySQL configures the batch size for retrieving updates from the data nodes in an NDB Cluster. This parameter sets the number of transaction fragments processed in each batch when applying updates to the replicas in the cluster. Proper tuning of this parameter can optimize the performance of replication in MySQL NDB Cluster environments.

**Relevant MySQL Versions:** MySQL NDB Cluster.",MySQL,0
ndb_replica_blob_write_batch_bytes,Integer,The MySQL configuration parameter ndb_replica_blob_write_batch_bytes specifies the maximum size in bytes for each batch of binary large object (BLOB) data written by a replica in a MySQL Cluster. This parameter is specific to MySQL Cluster configurations using the NDB storage engine. It helps optimize the efficiency of BLOB data replication by controlling the sizes of write batches.,MySQL,0
ndb_report_thresh_binlog_epoch_slip,Integer,The `ndb_report_thresh_binlog_epoch_slip` MySQL configuration parameter sets the threshold for reporting the number of epoch slips on the binary log in NDB Cluster. An epoch slip occurs when the epoch value from the global checkpoint restarts from 1 during a system restart. This parameter helps monitor and control epoch slips for improved NDB Cluster stability and reliability. This parameter is specific to MySQL NDB Cluster.,MySQL,0
ndb_report_thresh_binlog_mem_usage,Integer,"The MySQL configuration parameter ""ndb_report_thresh_binlog_mem_usage"" sets the threshold for reporting memory usage related to binary logging in MySQL Cluster. When the memory usage for binary logging exceeds this threshold, the MySQL Cluster management server reports this condition. This parameter is specific to MySQL Cluster configurations.",MySQL,0
ndb_row_checksum,Integer,"The `ndb_row_checksum` configuration parameter in MySQL defines whether checksum verification should be used on rows stored in NDB tables. When set to 1, checksum verification is enabled, providing data integrity checks for individual rows within the NDB Cluster. This parameter is specific to MySQL NDB Cluster and is not applicable to standalone MySQL server configurations.",MySQL,0
ndb_schema_dist_lock_wait_timeout,Integer,The MySQL configuration parameter `ndb_schema_dist_lock_wait_timeout` specifies the maximum time in milliseconds that a transaction waits to acquire a Distributed Schema lock. This parameter is applicable only when using the MySQL NDB Cluster storage engine and is used to control the timing of schema operations in a clustered environment. It enables users to manage the duration for which a transaction can wait for a distributed schema lock before timing out.,MySQL,0
ndb_show_foreign_key_mock_tables,Boolean,"The MySQL configuration parameter ""ndb_show_foreign_key_mock_tables"" is used to control the display of foreign key information for NDB tables in the output of SHOW TABLE STATUS. When enabled, it includes foreign keys defined for NDB tables from the data dictionary even if the referenced table does not exist. This parameter is specific to MySQL Cluster NDB 7.3 and later versions.",MySQL,0
ndb_slave_conflict_role,Enumeration,"The `ndb_slave_conflict_role` MySQL configuration parameter determines the behavior of a data node acting as a slave in an NDB Cluster when conflict resolution occurs. It specifies whether the concerned node should assume a passive role during conflict resolution, allowing the conflict to be resolved by the master node, or whether it should actively participate in resolving conflicts. This parameter is specific to MySQL Cluster (NDB) and is not applicable to other MySQL server types.",MySQL,0
ndb_table_no_logging,Boolean,"The MySQL configuration parameter `ndb_table_no_logging` is used to control whether logging is performed for NDB Cluster disk-based tables. When set to 1, logging is disabled for the specified NDB tables, reducing overhead on logging and improving performance. This parameter is specific to MySQL NDB Cluster versions.",MySQL,0
ndb_table_temporary,Boolean,"The `ndb_table_temporary` MySQL configuration parameter is used to specify whether temporary tables created in NDB Cluster tablespaces should be stored using the NDB storage engine. When set to `ON`, temporary tables will use NDB Cluster storage, providing scalability benefits for temporary table operations within the NDB Cluster environment. This parameter is specific to MySQL NDB Cluster.",MySQL,0
ndb_use_exact_count,Boolean,"The MySQL configuration parameter ndb_use_exact_count determines whether the NDB Cluster storage engine should use exact value counts during query execution. When set to 1, the engine uses exact value counts in its estimates, potentially leading to increased precision but also potentially resulting in slower query performance due to additional computation needed for accurate counts. This parameter is specific to MySQL Cluster and applies to versions supporting the NDB storage engine.",MySQL,0
ndb_use_transactions,Boolean,"The `ndb_use_transactions` parameter controls whether NDB Cluster tables support transactions in MySQL NDB Cluster. When enabled, transactions provide support for multi-statement updates, rollbacks, and consistent reads across multiple NDB Cluster data nodes. This parameter is relevant for MySQL NDB Cluster configurations.",MySQL,0
ndbinfo_max_bytes,Integer,The `ndbinfo_max_bytes` MySQL configuration parameter specifies the maximum number of bytes to use for the storage of NDB Cluster global metadata in the ndbinfo database within the data memory. This parameter helps control the memory used by the ndbinfo database and is particularly useful for NDB Cluster management and monitoring purposes. This parameter is specific to MySQL NDB Cluster versions 7.5 and higher.,MySQL,0
ndbinfo_max_rows,Integer,"The `ndbinfo_max_rows` configuration parameter in MySQL is used to define the maximum number of rows that can be retrieved when querying the NDB Cluster information database (ndbinfo). This parameter helps limit the amount of data returned from ndbinfo queries, preventing excessive resource consumption. It is applicable to MySQL NDB Cluster configurations and is not deprecated in current versions.",MySQL,0
ndbinfo_offline,Boolean,"The `ndbinfo_offline` MySQL configuration parameter is used in MySQL Cluster environments to control the availability of the NDB Cluster management information database (ndbinfo). When set to 1, the ndbinfo schema becomes offline, preventing access to its tables. This parameter can be useful for maintenance operations or when temporary restrictions on the ndbinfo database are needed.",MySQL,0
ndbinfo_show_hidden,Boolean,"The MySQL configuration parameter `ndbinfo_show_hidden` controls whether hidden data in the NDB Cluster information tables is displayed. By default, this parameter is set to 0 which means hidden data is not shown. Setting it to 1 allows the display of information considered as hidden. This parameter is applicable in MySQL NDB Cluster versions where the NDB Cluster storage engine is used.",MySQL,0
net_buffer_length,Integer,"The `net_buffer_length` parameter in MySQL determines the size of the network buffer used for communication between the MySQL client and server. It specifies the maximum size in bytes of the communication buffer allocated for client/server interaction, affecting network performance and memory usage. This parameter is applicable to all versions of MySQL and plays a crucial role in optimizing network communication efficiency.",MySQL,0
net_read_timeout,Integer,"The `net_read_timeout` parameter in MySQL determines the number of seconds to wait for more data from a connection before aborting the read. If no data is received within this time frame, the connection is closed. This parameter helps in managing network timeouts for incoming data streams.",MySQL,0
net_retry_count,Integer,"The `net_retry_count` parameter in MySQL allows setting the number of retries for network read operations that encounter errors, such as socket errors. This parameter helps control the server's behavior in handling network issues during communication, by determining the number of attempts made to retry failed network reads. It is recommended to adjust this parameter based on the network conditions and to avoid setting excessively high values, as it can impact performance.",MySQL,0
net_write_timeout,Integer,The `net_write_timeout` configuration parameter in MySQL specifies the number of seconds to wait for a block to be written to a connection before the connection terminates. This timeout applies after the client has sent a packet and is waiting for the response to be sent by the server. It helps prevent connections from staying open indefinitely due to network-related issues.,MySQL,0
offline_mode,Boolean,The `offline_mode` MySQL configuration parameter is not a standard or officially supported parameter in MySQL. It is important to note that using non-standard or unapproved parameters can lead to unintended behavior and may not be recognized by the MySQL server. It is recommended to refer to the official MySQL documentation for a list of supported and recommended configuration parameters.,MySQL,0
old_alter_table,Boolean,The `old_alter_table` MySQL configuration parameter is used to enable or disable the use of the older and slower method for altering tables. This parameter is deprecated as of MySQL 5.6 and has no effect on versions later than that. It is recommended to not use this parameter in modern MySQL configurations.,MySQL,0
optimizer_prune_level,Integer,The `optimizer_prune_level` MySQL configuration parameter determines the level of pruning applied during query optimization. Pruning is the process of eliminating irrelevant branches in the query execution plan. It controls the depth of search during optimization to enhance query performance based on the specified level. This parameter is available in MySQL version 5.7 and later.,MySQL,0
optimizer_search_depth,Integer,The `optimizer_search_depth` configuration parameter in MySQL specifies the maximum number of table joins the optimizer should consider when creating query execution plans. Increasing this value may allow the optimizer to explore more query plan options but could also result in longer optimization time. This parameter is available in MySQL 8.0 and later versions.,MySQL,0
optimizer_switch,Set,The `optimizer_switch` MySQL configuration parameter allows control over various optimizer features and optimizations used during query execution. It is a comma-separated list of flags that can be individually enabled or disabled to customize the query optimization process. The parameter enables fine-tuning of the MySQL query optimizer's behavior to improve query performance and efficiency. This parameter is available in MySQL versions 5.7 and later.,MySQL,0
optimizer_trace,String,"The `optimizer_trace` configuration parameter in MySQL enables the optimizer tracing feature, which generates detailed information about the query optimization process. This feature can provide insights into how the MySQL query optimizer evaluates and chooses execution plans. It is useful for troubleshooting query performance issues, understanding optimization decisions, and improving query efficiency. The optimizer_trace parameter is available in MySQL 5.6 and later versions.",MySQL,0
optimizer_trace_features,String,"The ""optimizer_trace_features"" MySQL configuration parameter enables different sets of optimizer trace flags to control the level of detail in the optimizer trace output. This parameter helps database administrators and developers analyze query optimization decisions made by the MySQL query optimizer, aiding in query performance tuning and troubleshooting. The optimizer_trace_features parameter is available starting from MySQL version 5.6.3.",MySQL,0
optimizer_trace_limit,Integer,"The `optimizer_trace_limit` configuration parameter in MySQL specifies the maximum number of optimizer traces that can be saved in the trace file with the `Trace` statement. This feature aids in analyzing and debugging query optimization decisions made by the MySQL optimizer. The default value for `optimizer_trace_limit` is 1, meaning only the most recent optimizer trace will be saved unless overridden. This parameter is available in MySQL versions 5.7 and later.",MySQL,0
optimizer_trace_max_mem_size,Integer,The 'optimizer_trace_max_mem_size' parameter in MySQL specifies the maximum memory allocation for the optimizer trace feature. This feature enables capturing detailed information about query optimization decisions for troubleshooting and performance analysis. The value of this parameter should be set according to the available memory resources to avoid excessive memory consumption.,MySQL,0
optimizer_trace_offset,Integer,"The MySQL configuration parameter optimizer_trace_offset specifies the starting point within the optimization trace file to consider for subsequent analysis. This parameter is used to set an offset position within the trace output file generated by the optimizer trace feature, allowing for more granular examination of optimization steps. As of MySQL 8.0, this parameter is still valid and can be utilized to fine-tune analysis of query optimization traces.",MySQL,0
original_commit_timestamp,Numeric,"The MySQL configuration parameter `original_commit_timestamp` is not a standard or officially recognized parameter as per MySQL's official documentation. It is possible that this parameter may be specific to certain customized versions or implementations of MySQL, and its behavior and purpose would need to be clarified based on the specific context in which it is used.",MySQL,0
original_server_version,Integer,The `original_server_version` parameter in MySQL is used to display the version number of the MySQL server that generated a given binary MySQL log file. This information is helpful when analyzing MySQL binary log files to determine the server version that produced them. It is not deprecated and is available in MySQL 5.6 and higher versions.,MySQL,0
parser_max_mem_size,Integer,"The MySQL configuration parameter `parser_max_mem_size` specifies the maximum amount of memory allocated for the SQL parser during query parsing operations. This parameter helps control the memory usage for parsing SQL queries, preventing excessive memory allocation. It is available starting from MySQL version 8.0.18.",MySQL,0
partial_revokes,Boolean,"The `partial_revokes` MySQL configuration parameter controls whether or not partial revokes are permitted on grant tables. When enabled, users can have privileges revoked for specific databases, tables, or columns without affecting their overall privileges within the server. This parameter is available in MySQL 8.0 and later versions.",MySQL,0
password_history,Integer,"The `password_history` configuration parameter in MySQL determines the number of previous passwords that the current user is not allowed to reuse. By setting a value for `password_history`, MySQL ensures that users cannot reuse passwords from their password history, promoting better security practices. This parameter is available in MySQL 5.6.6 and later versions.",MySQL,0
password_require_current,Boolean,"The `password_require_current` MySQL configuration parameter sets whether a user must provide the current password when changing their password. When enabled, users are required to authenticate using their current password before changing it. This feature enhances security by ensuring that only authorized users can update their passwords. The parameter is available in MySQL 8.0 and newer versions.",MySQL,0
password_reuse_interval,Integer,"The `password_reuse_interval` parameter in MySQL specifies the number of days before a password can be reused for an account. After changing a password, this interval restricts how soon the same password can be used again for the same user account. This helps enforce password security policies by preventing frequent reuse of the same password.",MySQL,0
performance_schema_max_digest_sample_age,Integer,"The MySQL configuration parameter `performance_schema_max_digest_sample_age` specifies the maximum age in picoseconds of performance schema digest samples to retain before removal. Digest samples exceeding this age are removed from the performance schema, thereby managing the storage space used by performance schema digest sampling. This parameter is available in MySQL 5.7.9 and later versions.",MySQL,0
performance_schema_show_processlist,Boolean,"The `performance_schema_show_processlist` MySQL configuration parameter determines whether the Performance Schema should display detailed process information in the server process list. When set to `ON`, it enables the Performance Schema to provide additional insights into server activities, aiding in performance monitoring and analysis. This parameter has been available since MySQL 5.6.9.",MySQL,0
preload_buffer_size,Integer,The MySQL configuration parameter preload_buffer_size specifies the size in bytes of the buffer used for preloading and caching index pages during index creation. This helps improve performance by reducing disk I/O during index creation operations. The preload_buffer_size parameter is supported in MySQL 8.0 and later versions.,MySQL,0
print_identified_with_as_hex,Boolean,"The `print_identified_with_as_hex` MySQL configuration parameter specifies whether to print the values for identified_user and identified_role using hexadecimal notation. By default, this parameter is set to 0, indicating that identified_user and identified_role values are printed in ASCII format. Setting `print_identified_with_as_hex` to 1 will display these values in hexadecimal format instead. This parameter is available starting from MySQL version 8.0.25.",MySQL,0
profiling,Boolean,"The `profiling` parameter in MySQL enables query profiling, allowing users to gather detailed information on the execution of SQL statements. By enabling profiling, users can analyze query performance, identify bottlenecks, and optimize database operations. This parameter is available in MySQL versions 5.0 and later.",MySQL,0
profiling_history_size,Integer,The `profiling_history_size` MySQL configuration parameter determines the number of profiling sessions to track in memory. Profiling sessions allow monitoring of the execution time taken by individual SQL queries. Increasing the value of `profiling_history_size` can retain more profiling data but may also consume additional memory resources. This parameter is available in MySQL 5.7 and later versions.,MySQL,0
protocol_compression_algorithms,Set,"The `protocol_compression_algorithms` MySQL configuration parameter specifies the compression algorithms that the server can use when communicating with clients over network protocols that support compression. By default, MySQL supports the `zlib` compression algorithm for internal communication compression. This parameter can be set to enable or disable specific compression algorithms, allowing for configuration based on performance and network requirements.",MySQL,0
pseudo_replica_mode,Boolean,"The `pseudo_replica_mode` MySQL configuration parameter is not a standard or recognized parameter in MySQL. It is not found in the official MySQL documentation for any MySQL version. Therefore, it does not serve any role or purpose within the MySQL server configuration. It is recommended to verify the correctness of the parameter name or consult the official MySQL documentation for valid configuration parameters.",MySQL,0
pseudo_slave_mode,Boolean,"The MySQL configuration parameter ""pseudo_slave_mode"" does not exist in the official MySQL documentation. It is possible that this parameter is not a standard configuration setting in MySQL. I recommend reviewing the official MySQL documentation for a list of supported configuration parameters.",MySQL,0
pseudo_thread_id,Integer,"The ""pseudo_thread_id"" parameter in MySQL is used to assign each connection a unique identifier within a session. It is not a real thread ID but is used for internal processing to differentiate connections. This parameter is not intended to be directly set or modified by users and is managed internally by the MySQL server.",MySQL,0
query_alloc_block_size,Integer,"The MySQL configuration parameter query_alloc_block_size determines the initial allocation block size in bytes for query execution. This parameter is relevant for memory management when executing queries, affecting the size of memory blocks used to allocate query execution memory dynamically. It is not deprecated and is available in MySQL versions 5.7 and later.",MySQL,0
query_prealloc_size,Integer,The `query_prealloc_size` parameter in MySQL controls the initial allocation size for the memory buffer used to hold query parse trees during query processing. This parameter can help optimize memory usage in cases where the default size is not sufficient. It is available in MySQL versions 5.6.8 and later.,MySQL,0
rand_seed1,Integer,"The `rand_seed1` MySQL configuration parameter defines the initial seed value used by the random number generator for certain internal functions, promoting better randomness across MySQL operations. By specifying a custom seed value, users can influence the behavior of functions relying on randomness, such as the `RAND()` function, providing predictability when needed. This parameter is available in MySQL versions 5.7 and later.",MySQL,0
rand_seed2,Integer,"The `rand_seed2` MySQL configuration parameter, also known as `RAND_SEED2`, is used to specify the second seed value for the random number generator in MySQL. It is typically set alongside the `rand_seed1` parameter to initialize the random number generator's state. This parameter helps in generating random values for functions like `RAND()` in SQL queries. Please note that the `rand_seed2` parameter is specific to MySQL versions 5.7.6 and later.",MySQL,0
range_alloc_block_size,Integer,The `range_alloc_block_size` is a MySQL configuration parameter that determines the block size allocated to ranges during list partitioning. This parameter specifies the size in bytes of the buffer used for creating ranges during partition pruning. Adjusting this parameter can optimize the performance of queries involving partitioned tables with many ranges. The `range_alloc_block_size` parameter is available in MySQL versions 5.6.6 and later.,MySQL,0
range_optimizer_max_mem_size,Integer,"The `range_optimizer_max_mem_size` MySQL configuration parameter specifies the maximum amount of memory available for range optimizer during query optimization. This memory is used for buffering ranges for queries. When the memory limit is reached, the range optimizer switches to using a slower algorithm. The default value for this parameter depends on the MySQL version being used.",MySQL,0
rbr_exec_mode,Enumeration,The `rbr_exec_mode` parameter in MySQL is utilized to control how the Group Replication plugin processes transactions in a parallel replication environment. This parameter determines the manner in which parallel apply executes transactions. The possible values for `rbr_exec_mode` include `STRONG` (the default setting) and `EVENTUAL`.,MySQL,0
read_buffer_size,Integer,"The `read_buffer_size` parameter in MySQL specifies the size of the buffer used for sequential reads when performing table scans. This buffer stores blocks of rows read sequentially during table scans, benefiting performance by reducing the number of disk I/O operations. It is available in MySQL versions 5.7 and later.",MySQL,0
read_only,Boolean,"The 'read_only' MySQL configuration parameter is used to restrict write operation capabilities on the server, allowing only read operations to be performed. When set to 'ON', it prevents any modifications to data, such as INSERT, UPDATE, or DELETE statements, safeguarding the database from unintentional changes. This parameter is available in MySQL versions 5.7 and higher.",MySQL,0
read_rnd_buffer_size,Integer,"The ""read_rnd_buffer_size"" MySQL configuration parameter determines the size of the buffer used for reading rows in random order during query processing. Increasing this value can enhance performance when reading rows in non-sequential order from storage engines that support random access, such as InnoDB. The default value of read_rnd_buffer_size is usually sufficient for most workloads, but adjusting it may benefit specific use cases requiring larger buffer sizes for random row retrieval.",MySQL,0
regexp_stack_limit,Integer,"The `regexp_stack_limit` parameter in MySQL specifies the maximum stack space to be used by a thread when evaluating regular expressions. This limit helps prevent excessive stack usage during pattern matching operations, which could otherwise lead to performance issues or server instability. It is a dynamic parameter that can be adjusted based on the application's regular expression complexity and server resources.",MySQL,0
regexp_time_limit,Integer,"The `regexp_time_limit` parameter in MySQL configures the maximum execution time in seconds for regex operations performed by the REGEXP operator or the REGEXP_LIKE() function. This parameter helps control the resources allocated to regex operations, preventing excessively long running queries from affecting server performance. The `regexp_time_limit` parameter is available in MySQL 8.0 and later versions.",MySQL,0
relay_log_purge,Boolean,"The `relay_log_purge` parameter in MySQL is used to control whether relay logs are automatically deleted once they are no longer needed for replication. Setting this parameter to 1 enables automatic deletion of relay logs. If set to 0, relay logs need to be deleted manually. This parameter is available in MySQL versions 5.6 and later.",MySQL,0
replica_allow_batching,Boolean,The `replica_allow_batching` MySQL configuration parameter controls whether the replica server is allowed to group multiple transactions into the same binary log group commit. This feature aids in improving the performance of replica servers by reducing the number of commits sent to the replica at the cost of potential data loss in case of a master crash. It is available starting from MySQL version 8.0.12.,MySQL,0
replica_checkpoint_group,Integer,"The `replica_checkpoint_group` parameter in MySQL configures the Group Replication member to use a separate GTID set for conflict detection. This parameter is specific to MySQL Group Replication and allows advanced users to have more control over conflict detection mechanisms when operating within a group. It is not a commonly modified parameter, and its usage should align with the requirements and design considerations of the Group Replication setup.",MySQL,0
replica_checkpoint_period,Integer,"The `replica_checkpoint_period` MySQL configuration parameter specifies the interval, in seconds, at which the replica (also known as a slave) updates its checkpoint information to the master server during replication. This parameter helps in managing the frequency of checkpoint updates to ensure efficient synchronization between the master and replica servers. The `replica_checkpoint_period` parameter is available in MySQL version 8.0 and newer.",MySQL,0
replica_compressed_protocol,Boolean,"The `replica_compressed_protocol` configuration parameter in MySQL enables or disables the use of a compressed client/server protocol for communication between replication servers. When enabled, this feature allows replication traffic to be compressed, reducing network bandwidth usage. This parameter is available in MySQL 5.7 and later versions.",MySQL,0
replica_exec_mode,Enumeration,The `replica_exec_mode` parameter in MySQL configures the execution mode for the replica SQL thread. It determines how the replica server applies events from the source. This parameter provides control over the handling of replication events to optimize replication performance and behavior.,MySQL,0
replica_max_allowed_packet,Integer,"The `replica_max_allowed_packet` configuration parameter in MySQL specifies the maximum size of a packet that a replica process can receive from the source server. This parameter helps control the memory usage on the replica side. If the packet size exceeds this limit, the replica connection may be terminated. It is available in MySQL 8.0 and later versions.",MySQL,0
replica_net_timeout,Integer,"The `replica_net_timeout` configuration parameter in MySQL specifies the timeout in seconds for network communication between replication threads. If data transfer between the source and replica servers exceeds this set time, the replica stops processing data until the timeout is reached. This parameter helps manage replication performance by setting an appropriate threshold for network delays.",MySQL,0
replica_parallel_type,Enumeration,"The 'replica_parallel_type' MySQL configuration parameter specifies the method used to execute parallel replication on a replica server. This parameter allows you to choose between different algorithms for coordinating and executing parallel replication threads on the replica server. The available options for replica_parallel_type include DATABASE, LOGICAL_CLOCK, and DEFAULT.",MySQL,0
replica_parallel_workers,Integer,The `replica_parallel_workers` parameter in MySQL specifies the number of worker threads used for applying replication events in parallel on a replica server. Increasing this value can potentially improve the performance of parallel replication by allowing more events to be processed concurrently. This parameter is available in MySQL 8.0 and later versions.,MySQL,0
replica_pending_jobs_size_max,Integer,The `replica_pending_jobs_size_max` parameter in MySQL defines the maximum size of the queue for pending replication jobs on a replica. It limits the number of pending transactions that have not yet been applied to the replica. This parameter helps in managing the replication backlog and controlling the workload on the replica server.,MySQL,0
replica_preserve_commit_order,Boolean,The `replica_preserve_commit_order` MySQL configuration parameter is used to ensure that transactions are applied on replica servers in the same order in which they were committed on the primary server. This helps maintain data consistency and prevent issues that may arise from out-of-order transaction processing on replica servers in a replication setup. This parameter is available starting from MySQL 8.0.23.,MySQL,0
replica_sql_verify_checksum,Boolean,"The `replica_sql_verify_checksum` parameter in MySQL specifies whether a replica server should verify the checksum of received SQL events before applying them. When set to `ON`, the replica server will compare the checksum of the received event with the one generated during transmission to ensure data integrity. This parameter helps prevent data corruption during replication. It is available in MySQL 5.6 and later versions.",MySQL,0
replica_transaction_retries,Integer,"The MySQL configuration parameter ""replica_transaction_retries"" determines the number of retries for a transaction in case of a transient failure on a replica server while replicating transactions from the source. By default, this parameter is set to 5, indicating that MySQL will attempt up to 5 retries for a specific transaction before reporting an error. This parameter is available in MySQL 5.7 and later versions.",MySQL,0
replica_type_conversions,Set,The `replica_type_conversions` MySQL configuration parameter specifies conversions that the server performs when replicating data between different data types. This parameter can be used to control how the server handles conversions to ensure consistency during replication. It is available in MySQL 8.0 and later versions.,MySQL,0
replication_optimize_for_static_plugin_config,Boolean,"The ""replication_optimize_for_static_plugin_config"" MySQL configuration parameter is used to optimize replication performance when static plugins are being used. This parameter adjusts the behavior of the server to increase performance specifically in setups where static plugins are extensively utilized. It is available starting from MySQL 5.7.9.",MySQL,0
replication_sender_observe_commit_only,Boolean,"The `replication_sender_observe_commit_only` parameter in MySQL controls whether a replication server waits until transactions are committed before sending them to the replica. When enabled, it ensures that only committed transactions are sent, enhancing data consistency in replication. This parameter is available in MySQL 8.0 and later versions.",MySQL,0
require_row_format,Boolean,"The require_row_format MySQL configuration parameter specifies whether a table must be created with a specific row format. When set to ""1"", it enforces the requirement for the table to use the specified row format, either REDUNDANT or COMPACT. This parameter is available in MySQL 5.7.9 and later versions.",MySQL,0
require_secure_transport,Boolean,"The ""require_secure_transport"" MySQL configuration parameter enforces the use of encrypted connections for client connections to the server. When enabled, it ensures that clients connect securely using TLS/SSL to protect data transmission between the client and the server. This parameter helps enhance the security of data exchanged between the MySQL server and connecting clients.",MySQL,0
restrict_fk_on_non_standard_key,Boolean,The `restrict_fk_on_non_standard_key` parameter in MySQL is deprecated and no longer applicable in any specific version. It was used to restrict foreign key constraints from being created or dropped if the column types did not exactly match the referenced column types. It allowed for stricter enforcement of foreign key relationships based on column data types.,MySQL,0
resultset_metadata,Enumeration,"The `resultset_metadata` MySQL configuration parameter controls whether the server should send result set metadata to clients. By default, metadata information such as column names and types is included in result sets. Disabling this parameter can reduce network traffic, especially when dealing with large result sets. This parameter is available in MySQL 5.7 and later versions.",MySQL,0
rewriter_enabled,Boolean,The parameter `rewriter_enabled` is not a standard MySQL configuration setting recognized in official MySQL documentation. It appears to be a custom or third-party parameter that is not part of MySQL's core configuration options. It is recommended to refer to the official MySQL documentation for a comprehensive list of supported configuration parameters.,MySQL,0
rewriter_enabled_for_threads_without_privilege_checks,Boolean,"The `rewriter_enabled_for_threads_without_privilege_checks` parameter in MySQL determines whether query rewrites can be performed for threads that do not have the necessary privilege checks. When enabled, the query rewriter plugin can modify statements executed by threads even if the privileges are insufficient. This parameter is not deprecated and applies to MySQL versions that support the query rewriter feature.",MySQL,0
rewriter_verbose,Integer,"The `rewriter_verbose` configuration parameter in MySQL is not a standard configuration option in MySQL servers. Therefore, there is no specific role or purpose defined by the official MySQL documentation for this parameter. If you have any other MySQL configuration parameters that you would like information on, feel free to ask.",MySQL,0
rpl_read_size,Integer,"The MySQL configuration parameter ""rpl_read_size"" specifies the size, in bytes, of a batch read request sent by a MySQL replication slave to the master server. This parameter controls the amount of data that the replication slave requests from the master in a single read operation during the replication process. It is available in MySQL 5.7 and later versions.",MySQL,0
rpl_semi_sync_master_enabled,Boolean,"The `rpl_semi_sync_master_enabled` MySQL configuration parameter is used to enable or disable the semi-synchronous replication feature for the master server. When enabled, the master waits for acknowledgment from at least one replica before committing transactions. This helps ensure data consistency but can impact performance due to the additional network round-trips required.",MySQL,0
rpl_semi_sync_master_timeout,Integer,The rpl_semi_sync_master_timeout parameter in MySQL specifies the timeout in milliseconds for the master server to wait for acknowledgment from the secondary server. It determines how long the master server should wait for a response before considering the transaction as failed. This feature is available in MySQL 5.5 and later versions.,MySQL,0
rpl_semi_sync_master_trace_level,Integer,"The `rpl_semi_sync_master_trace_level` is a MySQL server parameter that controls the level of tracing for the semisynchronous replication plugin on the master side. When enabled, it provides detailed debug information for troubleshooting purposes related to semisynchronous replication. This parameter is available in MySQL versions 5.5 and later.",MySQL,0
rpl_semi_sync_master_wait_for_slave_count,Integer,The `rpl_semi_sync_master_wait_for_slave_count` parameter in MySQL server determines the number of replicas that need to acknowledge receipt of a transaction before the master server considers the transaction as committed. Setting a higher value increases data integrity but may also increase latency. This parameter is available starting from MySQL version 5.5.9.,MySQL,0
rpl_semi_sync_master_wait_no_slave,Boolean,"The `rpl_semi_sync_master_wait_no_slave` parameter in MySQL is used to specify the time, in milliseconds, that a master server should wait for a replica before falling back to asynchronous replication if no replica acknowledges reception of transaction events within the defined time frame. This parameter helps manage semi-synchronous replication behavior by allowing the master to revert to traditional asynchronous replication if no replicas are available to confirm transaction receipt in a timely manner. This parameter is available in MySQL 5.7 and later versions.",MySQL,0
rpl_semi_sync_master_wait_point,Enumeration,The `rpl_semi_sync_master_wait_point` parameter in MySQL configures the point at which semi-sync replication waits for acknowledgement from the slave before continuing. It determines when the master blocks after sending the transaction to the slave and awaiting acknowledgment. This parameter helps control the synchronization behavior between master and slave in semi-synchronous replication configurations.,MySQL,0
rpl_semi_sync_replica_enabled,Boolean,"The MySQL configuration parameter `rpl_semi_sync_replica_enabled` enables or disables the semi-synchronous replication feature for replica servers in MySQL. When enabled, the replica server must acknowledge receipt of the binary log event before a transaction commits on the source server. This parameter was introduced in MySQL version 5.5.9 and is available in later versions as well.",MySQL,0
rpl_semi_sync_replica_trace_level,Integer,"The ""rpl_semi_sync_replica_trace_level"" MySQL configuration parameter specifies the logging level for semi-synchronous replication on the replica side. It controls the amount of information written to the error log related to the semi-synchronous replication process on the replica server. This parameter is available starting from MySQL version 5.7.5.",MySQL,0
rpl_semi_sync_slave_enabled,Boolean,"The `rpl_semi_sync_slave_enabled` MySQL configuration parameter enables or disables semi-synchronous replication on the slave side. When enabled, the slave confirms receipt of transactions from the master before sending acknowledgment to the master. This helps improve data durability by ensuring that transactions are safely replicated to the slave before being committed on the master. This parameter is available starting from MySQL version 5.5.9.",MySQL,0
rpl_semi_sync_slave_trace_level,Integer,The rpl_semi_sync_slave_trace_level MySQL configuration parameter determines the amount of debug information provided by the semi-sync replication plugin relay or I/O threads. It is used to set the tracing level for semi-synchronous replication on the slave side. This parameter is available in MySQL 5.7 and later versions.,MySQL,0
rpl_semi_sync_source_enabled,Boolean,"The `rpl_semi_sync_source_enabled` MySQL configuration parameter indicates whether the semi-synchronous replication feature is enabled on the master server. When enabled, the master waits until at least one replica acknowledges receiving the data before committing the transaction. This helps ensure data consistency between the master and replicas in MySQL replication setups.",MySQL,0
rpl_semi_sync_source_timeout,Integer,"The MySQL configuration parameter ""rpl_semi_sync_source_timeout"" specifies the timeout in milliseconds for the synchronization engine on the source side of a semisynchronous replication setup. When this timeout is reached without receiving an acknowledgment from the replica, the source server considers the replica as unreachable and reverts to asynchronous replication. This parameter is available in MySQL 5.5 and later versions.",MySQL,0
rpl_semi_sync_source_trace_level,Integer,The `rpl_semi_sync_source_trace_level` configuration parameter in MySQL determines the verbosity level of debugging output related to semi-synchronous replication from the source server's perspective. It allows you to control the amount of information logged for troubleshooting purposes when using semi-synchronous replication in a MySQL server setup. This parameter is available in MySQL version 5.7 and later.,MySQL,0
rpl_semi_sync_source_wait_for_replica_count,Integer,"```markdown
Parameter: rpl_semi_sync_source_wait_for_replica_count

- Description: Defines the number of replicas from which the source server waits for acknowledgement in semi-synchronous replication before commit.
- Usage: Increasing this value can improve data durability but may impact performance due to waiting for more replicas to acknowledge.
```",MySQL,0
rpl_semi_sync_source_wait_no_replica,Boolean,The MySQL configuration parameter `rpl_semi_sync_source_wait_no_replica` determines the number of transactions a source server waits before it begins to transmit data to a semisynchronous slave when no semisynchronous replicas are available. This parameter is applicable in MySQL 8.0 and above and is useful in optimizing replication performance in setups where semisynchronous replication is used. This parameter helps ensure reliable replication in scenarios with potential replication lag issues.,MySQL,0
rpl_semi_sync_source_wait_point,Enumeration,The `rpl_semi_sync_source_wait_point` parameter in MySQL is used to specify the replication acknowledgement wait point for semisynchronous replication from the source side. This parameter determines the moment at which a transaction that has been acknowledged is marked as fully committed in the binary log before it is sent to the replica. The default value for this parameter is `AFTER_SYNC`. This parameter is available starting from MySQL version 5.5.9.,MySQL,0
rpl_stop_replica_timeout,Integer,"The `rpl_stop_replica_timeout` parameter in MySQL specifies the timeout value, in seconds, for stopping a replica. When a timeout occurs during the replica stopping process, the STOP REPLICA command fails, and the replica continues running. This parameter is available in MySQL 8.0 and later versions.",MySQL,0
rpl_stop_slave_timeout,Integer,"The `rpl_stop_slave_timeout` MySQL configuration parameter specifies the maximum amount of time, in seconds, that the slave thread waits for new events from the master before stopping. If no events are received within this time frame, the slave thread stops automatically. This parameter is particularly useful in scenarios where the replication lag needs to be controlled and managed efficiently.",MySQL,0
schema_definition_cache,Integer,"The `schema_definition_cache` MySQL configuration parameter specifies the size of the cache used to store schema definitions for tables in memory. The purpose of this cache is to reduce the frequency of table definition lookups, improving performance by avoiding repeated queries to the data dictionary. This parameter is available starting from MySQL 5.6.6.",MySQL,0
secondary_engine_cost_threshold,Numeric,"The `secondary_engine_cost_threshold` MySQL configuration parameter determines the cost threshold at which the optimizer will consider using a secondary storage engine for executing a query. It controls when MySQL will switch to an alternative engine, such as the MyISAM storage engine, based on cost estimations. This parameter can be adjusted to fine-tune performance based on specific workload characteristics.",MySQL,0
select_into_buffer_size,Integer,The `select_into_buffer_size` MySQL configuration parameter specifies the size of the buffer used when performing a SELECT ... INTO OUTFILE or SELECT ... INTO DUMPFILE operation. It determines the maximum amount of data that can be transferred from the server to a file. This parameter is available in MySQL 5.7 and later versions.,MySQL,0
select_into_disk_sync,Boolean,"The `select_into_disk_sync` MySQL configuration parameter controls how SELECT ... INTO OUTFILE or SELECT ... INTO DUMPFILE statements synchronize data to disk. When enabled, it ensures that data is fully written to disk before the connection is released. This parameter is available in MySQL 8.0 and later versions.",MySQL,0
select_into_disk_sync_delay,Integer,"Parameter: select_into_disk_sync_delay

Description: The select_into_disk_sync_delay parameter in MySQL specifies the number of microseconds to delay between the time a result row is put into a temp table on disk and when the disk write is synchronized. This parameter allows control over the sync delay to optimize disk write performance for temporary tables during query execution. It is available in MySQL 5.7 and later versions.",MySQL,0
server_id,Integer,The `server_id` MySQL configuration parameter is used to uniquely identify each server in a replication topology. It should have a different value on each server to avoid conflicts and ensure proper replication functioning. This parameter is essential for setting up and managing replication within a MySQL server environment.,MySQL,0
session_track_gtids,Enumeration,"The `session_track_gtids` MySQL configuration parameter is used to control whether the Global Transaction Identifier (GTID) tracking is enabled or disabled on a per-session basis. When enabled, MySQL tracks GTID information for the current session, allowing for easy replication management and monitoring within that session. This feature is available in MySQL versions 5.6.9 and later.",MySQL,0
session_track_schema,Boolean,"The `session_track_schema` MySQL configuration parameter allows tracking changes to the current schema used for a session. It stores the schema name in the session state, facilitating monitoring and auditing of schema changes at the session level. This parameter is available in MySQL version 8.0 and higher.",MySQL,0
session_track_state_change,Boolean,"The `session_track_state_change` MySQL configuration parameter specifies whether to track state changes for user-defined variables across sessions. Setting this parameter to `ON` enables monitoring changes in user-defined variable values, facilitating tracking and debugging sessions. This parameter is available starting from MySQL version 8.0.3 and is not deprecated as of the latest MySQL version.",MySQL,0
session_track_system_variables,String,The `session_track_system_variables` configuration parameter in MySQL is used to track changes made to system variables only within the scope of the current session. It allows monitoring and logging of modifications to system variables for debugging or auditing purposes without affecting the global server state. This feature is available in MySQL 5.7 and higher versions.,MySQL,0
session_track_transaction_info,Enumeration,"The `session_track_transaction_info` parameter in MySQL controls whether the server tracks transaction characteristics for the current session. When enabled, it provides information about transactions and affects the behavior of other session-related status variables. This parameter is available starting from MySQL version 5.6.5.",MySQL,0
set_operations_buffer_size,Integer,"The `set_operations_buffer_size` configuration parameter in MySQL defines the buffer size for set operations (UNION, INTERSECT, EXCEPT) performed by the optimizer. It controls the amount of memory allocated for storing intermediate results during these set operations. This parameter is available in MySQL 8.0 and later versions.",MySQL,0
sha256_password_proxy_users,Boolean,The `sha256_password_proxy_users` configuration parameter in MySQL allows proxy users created with the SHA-256 authentication plugin to act as intermediaries for client connections. This parameter specifies a list of users who are permitted to act as proxy users using the SHA-256 authentication method. It helps control access and security for proxy users utilizing SHA-256 authentication in MySQL server versions supporting this feature.,MySQL,0
show_create_table_skip_secondary_engine,Boolean,"The MySQL configuration parameter ""show_create_table_skip_secondary_engine"" is not a valid or recognized parameter according to the official MySQL documentation. It does not have any defined role or purpose in MySQL server configuration settings. It is important to refer to the official MySQL documentation for accurate information on valid configuration parameters.",MySQL,0
show_create_table_verbosity,Boolean,"The `show_create_table_verbosity` parameter in MySQL controls the level of detail displayed in the output of the SHOW CREATE TABLE statement. It accepts values from 0 to 2, where 0 provides the least verbose output and 2 the most detailed information. This feature was introduced in MySQL 8.0.23.",MySQL,0
show_gipk_in_create_table_and_information_schema,Boolean,"The `show_create_table` option, when enabled, includes the GENERATED columns' definition in the output of `CREATE TABLE` and `SHOW CREATE TABLE` statements. This can provide information about how the columns are generated, such as AUTO_INCREMENT, TIMESTAMP, or expressions. The option also affects the `INFORMATION_SCHEMA.COLUMNS` table, reflecting the generated columns' information when queried.",MySQL,0
slave_allow_batching,Boolean,The `slave_allow_batching` parameter in MySQL controls whether slave threads are allowed to batch multiple events together before applying them. This can improve replication performance by reducing the number of transactions processed individually on the slave. This parameter is available in MySQL 5.6.6 and later versions.,MySQL,0
slave_checkpoint_group,Integer,The `slave_checkpoint_group` MySQL configuration parameter is used to control how many binary log groups the replication SQL thread should checkpoint at a time. This parameter helps improve replication performance by reducing the frequency of disk I/O operations during checkpoints. The `slave_checkpoint_group` parameter is available starting from MySQL version 8.0.19.,MySQL,0
slave_checkpoint_period,Integer,The `slave_checkpoint_period` MySQL configuration parameter specifies the interval in milliseconds at which the MySQL replication slave updates its position in the binary log. This parameter helps control the frequency of checkpointing which is a process for recording the current replication position. It is available in MySQL 5.7 and later versions.,MySQL,0
slave_compressed_protocol,Boolean,"The `slave_compressed_protocol` MySQL configuration parameter enables a replication slave to use the MySQL client/server compressed protocol for communicating with the master server. This can help reduce network traffic and improve replication performance, especially when replicating across a slow network connection. The parameter is supported in MySQL versions 5.7 and later.",MySQL,0
slave_exec_mode,Enumeration,"The `slave_exec_mode` parameter in MySQL is used to control how a MySQL replication slave executes binary log events. It determines whether the slave threads execute events in parallel, serially, or semi-serially. Supported values for this parameter include STRICT_PARALLEL, PARALLEL, and SERIAL. This option is available starting from MySQL 8.0.21.",MySQL,0
slave_max_allowed_packet,Integer,The `slave_max_allowed_packet` parameter in MySQL configures the maximum size of packets that the slave SQL thread can receive from the master server. This setting is used to control the maximum size of replicated transactions when data is being asynchronously replicated from the master to the slave. It is non-deprecated and applicable to MySQL versions 5.6 and later.,MySQL,0
slave_net_timeout,Integer,"The MySQL configuration parameter `slave_net_timeout` specifies the number of seconds to wait for more data from a master before the slave considers the connection timed out. If no data is received within this timeframe, the slave server disconnects from the master. This parameter is relevant for MySQL versions 5.7 and later.",MySQL,0
slave_parallel_type,Enumeration,"The `slave_parallel_type` configuration parameter in MySQL specifies the method used for coordinating parallel execution of replication events on slave servers. Supported values include `DATABASE` and `LOGICAL_CLOCK`. The `DATABASE` mode parallelizes events based on the database affected, while `LOGICAL_CLOCK` mode orders events based on their commit timestamp. This parameter is available starting from MySQL 5.7.5.",MySQL,0
slave_parallel_workers,Integer,"The `slave_parallel_workers` MySQL configuration parameter specifies the number of worker threads to be used for parallel execution of replication events on a replication slave. By setting this parameter to a value greater than 0, replication events can be executed concurrently, potentially improving replication performance by utilizing multiple CPU cores. This parameter is available starting from MySQL 5.7.5.",MySQL,0
slave_pending_jobs_size_max,Integer,The `slave_pending_jobs_size_max` parameter in MySQL specifies the maximum number of transactions that can accumulate in the queue on a replication slave when the SQL thread is active. It helps manage the workload on the replication slave by limiting the number of pending transactions. This parameter is available in MySQL 8.0 and later versions.,MySQL,0
slave_preserve_commit_order,Boolean,"The MySQL configuration parameter `slave_preserve_commit_order` specifies whether the slave SQL thread should preserve the order of transactions committed on the master. When enabled, this parameter helps maintain the commit order consistency between the master and the slave, which can be crucial for applications that rely on transaction order. This parameter is available in MySQL version 5.7.5 and later.",MySQL,0
slave_sql_verify_checksum,Boolean,"Parameter Name: slave_sql_verify_checksum

Description:
The ""slave_sql_verify_checksum"" MySQL configuration parameter controls whether the SQL thread verifies the checksum of received GTIDs (Global Transaction Identifiers). When enabled, the SQL thread checks the checksum for GTIDs from the relay log events against the master's checksum. This helps ensure data integrity and prevent inconsistencies during replication processes in MySQL servers. This parameter is available in MySQL 5.6 and later versions.",MySQL,0
slave_transaction_retries,Integer,"The `slave_transaction_retries` MySQL configuration parameter specifies the number of times a replication slave should retry a transaction in case of a failure. If set to a value greater than zero, the slave server will automatically retry failed transactions up to the specified limit. This parameter is available in MySQL 5.7 and later versions.",MySQL,0
slave_type_conversions,Set,The `slave_type_conversions` MySQL configuration parameter is deprecated in MySQL 8.0 and removed in MySQL 8.0.1. It controlled whether replication slave server performs implicit conversions when applying replicated updates. This parameter allowed specifying the handling of data type conversions during replication on the slave.,MySQL,0
slow_launch_time,Integer,"The MySQL configuration parameter `slow_launch_time` specifies the threshold, in seconds, to consider a server launch as slow. When the server startup exceeds this value, a warning is issued in the error log to alert about potential performance issues. This parameter is available in MySQL versions 5.7.23 and later.",MySQL,0
slow_query_log,Boolean,"The `slow_query_log` MySQL configuration parameter controls whether slow query logging is enabled. When enabled, MySQL writes queries that take longer than the `long_query_time` threshold to execute to the slow query log file. This parameter allows users to track and analyze queries that could be potential performance bottlenecks.",MySQL,0
slow_query_log_file,File name,The `slow_query_log_file` parameter in MySQL specifies the file path where slow query log entries are recorded. Slow query log records queries that take longer than the value set in `long_query_time` to execute. The slow query log helps in identifying and optimizing queries that may impact performance. This parameter is supported in MySQL 5.1 and later versions.,MySQL,0
sort_buffer_size,Integer,"The `sort_buffer_size` MySQL configuration parameter specifies the size of the buffer used for sorting operations that cannot be performed in memory. Sorting large data sets may require additional temporary files, impacting performance. It is recommended to adjust this parameter based on the specific workload and available memory to optimize sorting operations.",MySQL,0
source_verify_checksum,Boolean,"The `source_verify_checksum` MySQL configuration parameter enables or disables the verification of binary log events against the checksum specified in event headers. When set to `ON`, MySQL checks the checksum of events received from a replication source to ensure data integrity. This parameter is available in MySQL 5.6 and later versions.",MySQL,0
sql_auto_is_null,Boolean,The MySQL configuration parameter `sql_auto_is_null` is deprecated as of MySQL 5.7.5. This parameter controlled the handling of the `AUTO_INCREMENT` column when set to `NULL`. It no longer has any effect in MySQL and should not be used in the configuration.,MySQL,0
sql_big_selects,Boolean,"The `sql_big_selects` MySQL configuration parameter is used to enable or disable the check for queries that potentially could return large result sets. When enabled, queries that have the potential to return a large number of rows will be logged in the error log. This parameter is available in MySQL 5.6 and later versions.",MySQL,0
sql_buffer_result,Boolean,"The `sql_buffer_result` MySQL configuration parameter is not recognized in MySQL 8.0 and later versions. It was used in MySQL 5.7 and earlier to control whether result sets should be buffered on the server or not. This feature has been removed as of MySQL 8.0, and the parameter is considered deprecated.",MySQL,0
sql_generate_invisible_primary_key,Boolean,"The MySQL configuration parameter sql_generate_invisible_primary_key controls whether invisible primary keys are added automatically to the tables when they are detected as missing. This feature helps maintain data integrity by ensuring each row has a unique identifier, even if a primary key is not explicitly defined. This parameter is available in MySQL 8.0 and higher versions.",MySQL,0
sql_log_bin,Boolean,"The `sql_log_bin` parameter in MySQL is used to control binary logging. When enabled, it allows SQL statements that modify data to be logged in a binary format for replication, point-in-time recovery, and data auditing purposes. This parameter is available in all recent versions of MySQL and is not deprecated.",MySQL,0
sql_log_off,Boolean,"The MySQL configuration parameter `sql_log_off` was added in MySQL 8.0.23 but is deprecated as of MySQL 8.0.28. When set to `ON`, it disables logging SQL statements in the general query log. This can help improve performance by reducing the overhead of logging each executed query.",MySQL,0
sql_mode,Set,"The `sql_mode` parameter in MySQL defines the SQL mode for the server. It determines which SQL syntax rules and non-standard behavior MySQL should support. The `sql_mode` setting affects the server's handling of both syntax errors and data validation during SQL query processing. Different sql_mode values can impact the behavior of queries, such as how strict the server should be in enforcing standards compliance or handling invalid data.
",MySQL,0
sql_notes,Boolean,"The MySQL configuration parameter ""sql_notes"" controls the logging of notes to the error log regarding statement execution. When enabled, it adds additional information for monitoring and debugging purposes. This parameter is not deprecated and is applicable to MySQL versions where it is listed in the official documentation.",MySQL,0
sql_quote_show_create,Boolean,"The `sql_quote_show_create` parameter in MySQL controls whether the SHOW CREATE TABLE statement output includes backticks around table and column names. When set to 1 (ON), the generated output will quote names with backticks. If set to 0 (OFF), the backticks will be excluded. This parameter is available in MySQL 8.0 and later versions and is not deprecated.",MySQL,0
sql_replica_skip_counter,Integer,The `sql_replica_skip_counter` parameter in MySQL controls the number of events the replica SQL thread skips before continuing replication. This parameter is typically used to skip over problematic statements or events during replication to allow the replica to catch up with the primary server. It is available in MySQL 5.7 and later versions.,MySQL,0
sql_require_primary_key,Boolean,"The `sql_require_primary_key` parameter in MySQL determines whether tables must have a primary key defined for every table. When enabled, it enforces the presence of a primary key on all tables, ensuring data integrity and facilitating efficient querying. This parameter is not deprecated and is available in MySQL versions 5.7 and later.",MySQL,0
sql_safe_updates,Boolean,"The MySQL configuration parameter ""sql_safe_updates"" dictates whether UPDATE and DELETE statements require a WHERE clause to prevent accidental modification or deletion of all rows in a table. When enabled, it helps prevent unintentional data loss by restricting these statements without a WHERE clause. This parameter is supported in MySQL versions 5.0.2 and later.",MySQL,0
sql_select_limit,Integer,The MySQL configuration parameter sql_select_limit controls the maximum number of rows that can be returned by a SELECT statement. It can be used to limit the result set size to improve query performance and prevent excessive resource consumption. This parameter is available in MySQL version 5.6 and later.,MySQL,0
sql_slave_skip_counter,Integer,"The `sql_slave_skip_counter` parameter in MySQL is used to ignore a specified number of events in the replication stream on a MySQL replication slave server. When this parameter is set, the specified number of events are skipped, allowing the replication process to continue from the next event. It provides a way to bypass errors or inconsistencies in the replication process. This parameter is available in MySQL 5.1 and later versions.",MySQL,0
sql_warnings,Boolean,"The `sql_warnings` configuration parameter in MySQL controls the level of warning messages generated during the execution of SQL statements. When enabled, it causes warnings to be treated as errors, terminating the statement execution. By default, `sql_warnings` is disabled, allowing SQL statements to continue executing even when warnings are encountered. This parameter is available in MySQL 5.7 and later versions.",MySQL,0
ssl_ca,File name,The `ssl_ca` parameter in MySQL specifies the path to the Certificate Authority (CA) file for establishing secure connections using SSL/TLS. This file contains the trusted CA certificates that the server will use to verify the authenticity of the presented server certificates during the SSL/TLS handshake. It ensures secure communication by verifying the server's certificate against the trusted CA certificates.,MySQL,0
ssl_capath,Directory name,"The `ssl_capath` MySQL configuration parameter specifies the path to a directory that contains trusted SSL CA certificates. When establishing an SSL connection, MySQL Server uses the CA certificates in this directory to verify the authenticity of the certificate presented by the client or server. This parameter is available in MySQL 5.7 and later versions.",MySQL,0
ssl_cert,File name,"The `ssl_cert` MySQL configuration parameter specifies the path to the server SSL certificate file. When SSL is enabled, this certificate is used to verify the server's identity during secure connections. It is essential for establishing secure encrypted communication between the MySQL server and clients over SSL/TLS protocols. The `ssl_cert` parameter is available in MySQL versions that support SSL encryption.",MySQL,0
ssl_cipher,String,"The `ssl_cipher` parameter in MySQL is used to specify the cipher suites that the server accepts for encrypted connections established over SSL. By configuring this parameter, the server can control the security levels and encryption algorithms for SSL/TLS connections. It allows administrators to define a list of preferred cipher suites or restrict the accepted ciphers for enhanced security. This parameter is available in MySQL versions that support SSL/TLS encryption.",MySQL,0
ssl_crl,File name,"The `ssl_crl` MySQL configuration parameter specifies the path to the Certificate Revocation List (CRL) file used in SSL connections. When enabled, MySQL checks this list to determine if a client certificate has been revoked before allowing the SSL connection. This parameter is available in MySQL 5.6.16 and later versions.",MySQL,0
ssl_crlpath,Directory name,The MySQL configuration parameter `ssl_crlpath` specifies the file path to the directory containing Certificate Revocation Lists (CRLs) used for checking the revocation status of SSL certificates. This parameter is relevant when SSL connections are enabled in MySQL to enhance security by validating the authenticity of certificates against CRLs. `ssl_crlpath` is supported in MySQL 5.6.16 and later versions.,MySQL,0
ssl_key,File name,The `ssl_key` MySQL configuration parameter specifies the file path to the private key used for SSL connections. This key is required for encrypting data exchanged between the server and clients for secure communication. It is essential for enabling SSL/TLS encryption in MySQL server connections.,MySQL,0
ssl_session_cache_mode,Boolean,"**Parameter: ssl_session_cache_mode**

- **Role and Purpose:**
  - Determines the SSL session cache mode available for secure connections in MySQL Server.
  - This parameter offers control over how SSL session caching is handled, impacting the efficiency and security of SSL/TLS connections.
  - The values for this parameter are OFF, SERVER, and CLIENT, which dictate whether session caching is disabled, cached server-side, or cached client-side, respectively.",MySQL,0
ssl_session_cache_timeout,Integer,"The `ssl_session_cache_timeout` MySQL configuration parameter specifies the maximum time in seconds that an SSL session cache entry remains in the cache. When an SSL connection is established, its session information is stored in the cache for potential reuse in subsequent connections, reducing the overhead of setting up new SSL sessions. Lowering this value can free up cache space more frequently, while increasing it can improve SSL session reuse efficiency. This parameter is available starting from MySQL 5.7.31 and 8.0.21 versions.",MySQL,0
stored_program_cache,Integer,"The `stored_program_cache` MySQL configuration parameter defines the size in bytes of the cache allocated for stored programs such as stored procedures and functions. This cache stores the compiled version of these programs, reducing the overhead of repeatedly parsing them. By adjusting this parameter, users can optimize memory usage and performance related to stored programs in MySQL. The `stored_program_cache` parameter is available in MySQL 8.0 and later versions.",MySQL,0
stored_program_definition_cache,Integer,"The `stored_program_definition_cache` parameter in MySQL specifies the size of the cache used for storing stored program definitions. This cache holds parsed representations of stored programs such as procedures and functions, improving performance by reducing the need for re-parsing. It is available starting from MySQL version 8.0.",MySQL,0
super_read_only,Boolean,"The `super_read_only` parameter in MySQL is used to prevent users with the SUPER privilege from modifying data when set to 1. This setting is particularly useful for scenarios where write operations should be restricted, such as during failover situations. It does not apply to users who have the SUPER privilege, allowing them to continue modifying data if needed. This parameter is available starting from MySQL version 8.0.14.",MySQL,0
sync_binlog,Integer,"The `sync_binlog` parameter in MySQL controls the synchronization behavior of binary log disk writes. When set to 1, it ensures that each write operation is synchronized to disk on every commit. This setting provides durability but might impact performance due to disk sync operations. This parameter is available in MySQL versions 5.5 and higher.",MySQL,0
sync_master_info,Integer,"The `sync_master_info` parameter in MySQL controls whether the server writes synchronization information to the metadata file `master.info` for a replication master. When enabled, MySQL synchronizes the binary log coordinates between the master and its replicas. This parameter is applicable to MySQL versions 5.6 and later.",MySQL,0
sync_relay_log,Integer,"The `sync_relay_log` parameter in MySQL controls whether the relay log contents are synchronized to disk for each event. When enabled, each event is synchronized immediately to disk, ensuring data durability in case of a server crash. This can impact performance, so it should be used with caution depending on the level of data protection required.",MySQL,0
sync_relay_log_info,Integer,"The `sync_relay_log_info` MySQL configuration parameter specifies whether the relay log info file should be synchronized to disk after each write operation. Enabling this parameter ensures that relay log information is safely stored on disk, reducing the risk of data loss in case of a crash. It is available in MySQL 5.6.21 and later versions.",MySQL,0
sync_source_info,Integer,The `sync_source_info` MySQL configuration parameter specifies whether to synchronize the source information stored in the INFORMATION_SCHEMA.TABLES table for a given table. Enabling this parameter ensures that changes made on the server - such as rename table operations - are accurately reflected in the metadata stored in INFORMATION_SCHEMA. This parameter is available in MySQL 8.0 and later versions.,MySQL,0
syseventlog.facility,String,"The `syseventlog.facility` configuration parameter in MySQL determines the syslog facility to use for logging classification-related messages. The facility value is an integer representing the category/type of the message being logged, such as ""local0,"" ""local1,"" etc. This parameter is not deprecated and is available in MySQL versions where the syslog support is included.",MySQL,0
syseventlog.include_pid,Boolean,"The `syseventlog.include_pid` MySQL configuration parameter determines whether the thread ID associated with each entry in the system event log includes the server process ID. Setting this parameter to a value of `1` includes the process ID in the log entries, while setting it to `0` excludes the process ID. This parameter is available in MySQL 8.0 and later versions.",MySQL,0
syseventlog.tag,String,"The syseventlog.tag MySQL configuration parameter is used to specify a tag value that is prepended to all messages written to the System Event Log. This tag can help identify the source or category of the events logged, providing a way to organize and differentiate them. The syseventlog.tag parameter is available in MySQL 8.0 and later versions.",MySQL,0
table_definition_cache,Integer,"The `table_definition_cache` parameter in MySQL specifies the number of table definition objects that can be stored in the cache. This cache stores parsed table definitions, reducing overhead when accessing table metadata. Allocating an appropriate size for this cache can improve performance by reducing the need to parse table structure repeatedly. This parameter is available in MySQL 5.6 and later versions.",MySQL,0
table_encryption_privilege_check,Boolean,"The MySQL configuration parameter ""table_encryption_privilege_check"" is used to control whether nonprivileged user accounts can query or modify encrypted InnoDB tables. When enabled, this parameter enforces access restrictions on encrypted tables, requiring users to have the necessary privileges to access the data. This parameter was introduced in MySQL 8.0.14 and later versions.",MySQL,0
table_open_cache,Integer,"The `table_open_cache` parameter in MySQL determines the number of table descriptors that the server caches for reuse. By increasing this parameter, MySQL can handle a higher number of concurrent connections and access a large number of tables efficiently. It helps optimize performance by reducing the overhead of opening and closing tables frequently.",MySQL,0
tablespace_definition_cache,Integer,"The `tablespace_definition_cache` parameter in MySQL controls the number of tablespace definitions stored in the cache. This cache is used to improve performance by avoiding the need to look up tablespace definitions from the data dictionary repeatedly. By adjusting this parameter, users can optimize the memory allocation for caching tablespace definitions, impacting the efficiency of operations related to tablespaces in MySQL.",MySQL,0
telemetry.otel_log_level,Enumeration,"The `telemetry.otel_log_level` MySQL configuration parameter specifies the log level for OpenTelemetry instrumentation. Possible values for this parameter include ""debug"", ""info"", ""warn"", and ""error"". This parameter is available in MySQL 8.0.24 and later versions.",MySQL,0
telemetry.query_text_enabled,Boolean,"The `telemetry.query_text_enabled` configuration parameter in MySQL controls whether query text is included in Performance Schema telemetry events. When set to `ON`, it enables the collection of query text information for specific events, aiding in performance analysis and monitoring. This parameter is available in MySQL 8.0 and later versions and is not deprecated.",MySQL,0
telemetry.trace_enabled,Boolean,"The MySQL configuration parameter 'telemetry.trace_enabled' controls whether tracing is enabled for telemetry data collection. When set to true, MySQL captures tracing information for telemetry purposes. This parameter is available in MySQL versions 8.0.16 and higher.",MySQL,0
temptable_max_mmap,Integer,"The `temptable_max_mmap` configuration parameter in MySQL determines the maximum size allowed for in-memory temporary tables created using the memory-mapped file technique. It specifies the limit for memory-mapped temporary tables, which can enhance performance for some workloads. This parameter is available in MySQL 8.0 and later versions.",MySQL,0
temptable_max_ram,Integer,"The `temptable_max_ram` MySQL configuration parameter specifies the maximum amount of memory that can be allocated for in-memory temporary tables within a query. Temporary tables are used during query processing for sorting and grouping operations, and this parameter helps control the memory used for such tasks. It is important to set this value appropriately to prevent excessive memory consumption during query execution. This parameter is supported in MySQL versions 5.7 and later.",MySQL,0
temptable_use_mmap,Boolean,The MySQL configuration parameter temptable_use_mmap is not a valid or recognized parameter in MySQL. Please refer to the official MySQL documentation for a list of valid configuration parameters.,MySQL,0
terminology_use_previous,Enumeration,"The MySQL configuration parameter ""terminology_use_previous"" is not a standard or officially documented parameter in the MySQL documentation. It may not exist in the MySQL server configuration. If you have any other MySQL parameters you would like to inquire about, please feel free to ask for more information.",MySQL,0
thread_cache_size,Integer,The `thread_cache_size` configuration parameter in MySQL specifies the number of threads the server should cache to reduce the thread creation overhead. This parameter helps improve performance by allowing threads to be reused instead of being constantly created and destroyed. It is recommended to set `thread_cache_size` to a value that can accommodate the expected number of connections to efficiently manage thread resources.,MySQL,0
thread_pool_high_priority_connection,Integer,The `thread_pool_high_priority_connection` MySQL configuration parameter defines the number of high-priority connections permitted in the thread pool. High-priority connections are favored over normal connections in the thread pool to ensure priority service. This parameter is available in MySQL version 5.7 and later.,MySQL,0
thread_pool_longrun_trx_limit,Integer,The `thread_pool_longrun_trx_limit` parameter in MySQL configures the maximum number of transactions that can run for a long time in the thread pool's long-run thread group. Transactions exceeding this limit are moved to the short-run thread group for better resource management. This parameter is available in MySQL version 8.0 and later.,MySQL,0
thread_pool_max_active_query_threads,Integer,"The `thread_pool_max_active_query_threads` parameter in MySQL dictates the maximum number of queries that can be actively processed in the thread pool concurrently. Once this limit is reached, additional queries are queued until a thread becomes available. This parameter helps manage the workload on the MySQL server by controlling the number of active queries executing simultaneously.",MySQL,0
thread_pool_max_transactions_limit,Integer,"The `thread_pool_max_transactions_limit` MySQL configuration parameter specifies the maximum number of transactions to allow within the thread pool. When this limit is reached, new transactions are either queued or rejected based on the `thread_pool_max_threads` setting. This parameter is relevant for MySQL versions 5.7.5 and later.",MySQL,0
thread_pool_max_unused_threads,Integer,"- **Parameter Name:** thread_pool_max_unused_threads
- **Description:** Specifies the maximum number of unused threads that the Thread Pool plugin retains in the thread pool for potential reuse. Exceeding this value causes the excessive threads to be discarded, up to thread_pool_size, and new threads are created as needed to handle new client connections. This parameter is available in MySQL 8.0.20 and later versions.
",MySQL,0
thread_pool_prio_kickup_timer,Integer,"The `thread_pool_prio_kickup_timer` MySQL configuration parameter is utilized to specify the time interval, in milliseconds, after which a connection with higher priority can preempt a lower-priority connection in the thread pool as per the thread_pool_prio_kickup_mode setting. This parameter facilitates the prioritization of client connections based on their importance, enabling efficient resource allocation within the thread pool subsystem of MySQL Server. The `thread_pool_prio_kickup_timer` parameter is available in MySQL 5.7.7 and later versions.",MySQL,0
thread_pool_query_threads_per_group,Integer,The `thread_pool_query_threads_per_group` parameter in MySQL configures the number of worker threads per group that can process queries in the thread pool plugin. This setting determines the concurrency level for query execution within each group. It is a dynamic variable available in MySQL 5.6 and later versions.,MySQL,0
thread_pool_stall_limit,Integer,"The `thread_pool_stall_limit` parameter in MySQL server configuration determines the maximum number of times a connection thread will ""stall"" due to insufficient read/write resources before being forcibly disconnected. Once this limit is reached, the connection is terminated to prevent resource exhaustion in the thread pool. This feature is available in MySQL 5.7.17 and later versions, specifically suitable for server environments where managing thread stalls is critical for performance optimization.",MySQL,0
thread_pool_transaction_delay,Integer,"The `thread_pool_transaction_delay` MySQL configuration parameter specifies the delay, in microseconds, for transactions handled by the thread pool plugin. When a delay is set, transactions may be held before execution, allowing for potential batching and reducing the number of context switches between threads. This parameter is specific to MySQL versions that support the thread pool plugin, such as MySQL 5.7 and later.",MySQL,0
time_zone,String,"The `time_zone` parameter in MySQL server configuration defines the default time zone used for displaying and interpreting temporal data. It allows users to set a specific time zone globally for the server, impacting date and time-related functions and storage. It helps ensure consistent handling of time-related data across different queries and client connections.",MySQL,0
timestamp,Numeric,The `timestamp` is a MySQL configuration parameter that specifies a column in a table to automatically record the timestamp of when a row was created or last updated. This data type represents datetime values using UTC to ensure consistency regardless of the server's timezone setting. The `timestamp` data type has been a part of MySQL since version 3.23. createTime and updateTime fields are commonly defined with the `timestamp`.,MySQL,0
tls_ciphersuites,String,The `tls_ciphersuites` MySQL configuration parameter specifies the list of allowed TLS ciphersuites for encrypted connections. It allows administrators to restrict the ciphersuites that the server supports for securing communication between clients and the server using TLS. This parameter enables fine-grained control over the security measures employed during encrypted connections in MySQL.,MySQL,0
tls_version,String,The `tls_version` parameter in MySQL is used to specify the minimum Transport Layer Security (TLS) protocol version that the server will use for encrypted connections. This parameter allows administrators to enforce a minimum security level for TLS connections by restricting the accepted protocol versions. It is available starting from MySQL version 5.7.11.,MySQL,0
tmp_table_size,Integer,The MySQL configuration parameter tmp_table_size specifies the maximum size in bytes for temporary tables created in memory. Temporary tables exceeding this size are converted to on-disk tables. It is recommended to set this parameter based on the workload to balance memory usage and performance. This parameter is supported in MySQL 5.7 and later versions.,MySQL,0
transaction_alloc_block_size,Integer,The `transaction_alloc_block_size` MySQL configuration parameter specifies the size of the memory block allocated for transaction IDs during statement execution within an active transaction. It controls the memory allocation granularity to improve performance and optimize memory usage when handling transaction-related operations. It is available in MySQL 8.0 and later versions.,MySQL,0
transaction_allow_batching,Boolean,"The `transaction_allow_batching` parameter in MySQL controls whether XA transaction commands can be batched together and sent to the server simultaneously. Enabling this parameter can improve the efficiency of handling multiple XA transactions, particularly when there are multiple transaction branches involved. This parameter is available in MySQL versions 8.0.22 and later.",MySQL,0
transaction_isolation,Enumeration,"The `transaction_isolation` MySQL configuration parameter determines the isolation level for transactions in the database system. It specifies how transactions interact with each other concurrently, affecting their visibility to other transactions and the level of data integrity maintained. Possible values for this parameter include options like READ COMMITTED, READ UNCOMMITTED, REPEATABLE READ, and SERIALIZABLE. This parameter is available in MySQL versions later than 5.6.5.",MySQL,0
transaction_prealloc_size,Integer,"The `transaction_prealloc_size` configuration parameter in MySQL determines the initial size, in bytes, allocated for multi-versioning. This memory pool helps manage transaction identifiers in the InnoDB storage engine. This parameter is applicable to MySQL versions 5.6.7 to 5.7.x.",MySQL,0
transaction_read_only,Boolean,"The `transaction_read_only` parameter in MySQL determines whether the current transaction is read-only. When set to `ON`, it specifies that subsequent statements within the current transaction are read-only. This parameter can be set dynamically using `SET TRANSACTION`. It is not deprecated and applies to MySQL version 5.6 and above.",MySQL,0
unique_checks,Boolean,"The `unique_checks` configuration parameter in MySQL is a Boolean option that determines whether uniqueness checks constraints on unique indexes are enforced. When set to `1` (ON), MySQL enforces uniqueness checks. Setting `unique_checks` to `0` (OFF) allows to temporarily disable uniqueness checks. This parameter affects most statements that modify table contents. The `unique_checks` parameter is supported in all versions of MySQL.",MySQL,0
updatable_views_with_limit,Boolean,"The `updatable_views_with_limit` MySQL configuration parameter determines whether views that use the LIMIT clause are updatable. When set to 1 (the default), views with the LIMIT clause can be updated, and when set to 0, such views are not updatable. This setting applies to MySQL 8.0.28 and later versions.",MySQL,0
use_secondary_engine,Enumeration,"The use_secondary_engine MySQL configuration parameter specifies whether the server should use a secondary storage engine for specific operations. This parameter allows for leveraging a different storage engine for certain tasks, providing flexibility in optimizing performance or functionality based on requirements. It is not deprecated and can be used in MySQL versions that support this feature.",MySQL,0
validate_password_check_user_name,Boolean,The `validate_password_check_user_name` parameter in MySQL is used to enforce the validation of user names along with passwords when the validate_password plugin is enabled. It ensures that user names also follow the specified password policy rules set by the validate_password plugin. This parameter was introduced in MySQL 5.6.6.,MySQL,0
validate_password_dictionary_file,File name,The validate_password_dictionary_file MySQL configuration parameter specifies the path to a file containing a list of words used for checking the strength of passwords generated by the validate_password plugin. This parameter enables administrators to define a custom dictionary for password validation. The parameter is available in MySQL 5.6.6 and later versions.,MySQL,0
validate_password_length,Integer,"Parameter Name: validate_password_length

Description: The validate_password_length parameter in MySQL specifies the minimum length for passwords when using the validate_password plugin for password validation. This parameter helps enforce password security policies by ensuring passwords meet a specified minimum length requirement. By setting an appropriate value for this parameter, administrators can enhance the security of MySQL user accounts by requiring passwords to be of a minimum length.",MySQL,0
validate_password_mixed_case_count,Integer,"The `validate_password_mixed_case_count` MySQL configuration parameter specifies the minimum count of uppercase letters required in a valid password as part of the password validation process. By setting this parameter, administrators can enforce password policies that include a specific number of uppercase characters to enhance password strength. This parameter is available starting from MySQL version 5.7.12.",MySQL,0
validate_password_number_count,Integer,The `validate_password_number_count` configuration parameter in MySQL signifies the minimum count of numeric characters required for a password to be considered secure when using the validate_password plugin. Setting a value greater than 0 mandates the inclusion of the specified number of numeric characters in new or updated passwords. This parameter is available starting from MySQL version 5.6.15.,MySQL,0
validate_password_policy,Enumeration,"The `validate_password_policy` MySQL configuration parameter specifies the method used to enforce password strength requirements for account passwords. It determines the minimum requirements for a password to be considered secure, such as length, character types, or case sensitivity. This parameter can be set to different policies like 'LOW', 'MEDIUM', 'STRONG', or 'NONE' to control the level of password complexity enforced by MySQL's internal password validation plugin.",MySQL,0
validate_password_special_char_count,Integer,The `validate_password_special_char_count` MySQL configuration parameter specifies the minimum number of special characters required by the `VALIDATE_PASSWORD_STRENGTH` plugin for password validation. This parameter helps enforce password complexity by defining the minimum count of special characters that must be present in a password. The default value for this parameter is 1. This parameter is available in MySQL 5.6.6 and later versions.,MySQL,0
validate_password.changed_characters_percentage,Integer,The `validate_password.changed_characters_percentage` parameter in MySQL specifies the minimum percentage of characters in a new password that must differ from the previous one to meet the password policy requirements enforced by the `validate_password` plugin. This parameter helps enhance security by ensuring that new passwords are sufficiently distinct from previous ones to prevent easy guessing or reuse of old passwords. This parameter is available in MySQL 5.6.6 and later versions.,MySQL,0
validate_password.check_user_name,Boolean,"The `validate_password.check_user_name` MySQL configuration parameter is used to enable or disable the validation of user names as part of the password policy checks performed by the Validate Password Plugin. When set to `ON`, MySQL will enforce rules to check whether the user name is part of the password, preventing the use of highly guessable passwords. This feature is available in MySQL 5.6.6 and later versions.",MySQL,0
validate_password.dictionary_file,File name,The `validate_password.dictionary_file` parameter in MySQL configures the file path to be used as the dictionary file for the `validate_password` component. This dictionary file contains a list of words that the `validate_password` plugin will consider when checking password strength. The parameter is available in MySQL 5.6.6 and later versions.,MySQL,0
validate_password.length,Integer,The `validate_password.length` configuration parameter in MySQL determines the minimum length requirement for passwords generated using the validate_password plugin. It specifies the minimum number of characters a password must have to be considered valid. This parameter helps enforce stronger password policies by setting a minimum length threshold for user passwords.,MySQL,0
validate_password.mixed_case_count,Integer,"The MySQL configuration parameter ""validate_password.mixed_case_count"" specifies the minimum count of uppercase letters required in a password when using the validate_password plugin. This parameter helps enforce password complexity rules by requiring a certain number of uppercase characters. It is available in MySQL 5.6.0 and later versions.",MySQL,0
validate_password.number_count,Integer,"The `validate_password.number_count` parameter in MySQL server configuration determines the minimum count of numeric characters required in a valid password. By setting this parameter, administrators can enforce password policies that necessitate a specific number of numeric characters for password strength validation. This parameter is available in MySQL version 5.6.6 and later.",MySQL,0
validate_password.policy,Enumeration,"The MySQL configuration parameter `validate_password.policy` specifies the criteria for password strength validation when setting or updating user passwords. It allows administrators to define the level of complexity required for passwords based on predefined policy options, such as low, medium, or strong. This parameter helps enhance security by enforcing stricter password guidelines for MySQL user accounts.",MySQL,0
validate_password.special_char_count,Integer,The `validate_password.special_char_count` MySQL configuration parameter specifies the minimum number of special characters required in a password for the validate_password plugin. This parameter helps enforce stronger password complexity by ensuring a specified count of special characters in user passwords. This parameter is applicable in MySQL 5.6.6 and later versions when using the validate_password plugin for password validation.,MySQL,0
version_tokens_session,String,"The MySQL configuration parameter `version_tokens_session` controls the displaying of version and architecture information in session variables. When set to 1, it includes version and architecture information for the current session. This parameter is available starting from MySQL version 8.0.22.",MySQL,0
wait_timeout,Integer,"The `wait_timeout` parameter in MySQL determines the number of seconds the server waits for activity on a non-interactive connection before closing it. Once this timeout period elapses without any activity, the server will automatically terminate the connection. By adjusting this parameter, administrators can manage connection resources efficiently, preventing idle connections from consuming server resources unnecessarily. This parameter is commonly used to optimize server performance and manage connection handling in MySQL environments.",MySQL,0
windowing_use_high_precision,Boolean,"The `windowing_use_high_precision` MySQL configuration parameter controls whether high precision is used for window functions. When enabled, it allows window functions to use high precision arithmetic, leading to more accurate results but potentially slower performance. This parameter is applicable from MySQL 8.0.11 onwards.",MySQL,0
xa_detach_on_prepare,Boolean,"The `xa_detach_on_prepare` MySQL configuration parameter determines whether an XA transaction is automatically detached during the prepare phase. When enabled, the XA transaction is detached, making it possible to issue further statements not related to the XA transaction. By default, this parameter is disabled. This parameter is available in MySQL 8.0.3 and later versions.",MySQL,0
data_directory,string,Specifies the directory to use for data storage. This parameter can only be set at server start.,PostgreSQL,0
config_file,string,Specifies the main server configuration file (customarily calledpostgresql.conf). This parameter can only be set on thepostgrescommand line.,PostgreSQL,0
hba_file,string,Specifies the configuration file for host-based authentication (customarily calledpg_hba.conf). This parameter can only be set at server start.,PostgreSQL,0
ident_file,string,Specifies the configuration file for user name mapping (customarily calledpg_ident.conf). This parameter can only be set at server start. See alsoSection 20.2.,PostgreSQL,0
external_pid_file,string,Specifies the name of an additional process-ID (PID) file that the server should create for use by server administration programs. This parameter can only be set at server start.,PostgreSQL,0
listen_addresses,string,"Specifies the TCP/IP address(es) on which the server is to listen for connections from client applications. The value takes the form of a comma-separated list of host names and/or numeric IP addresses. The special entry*corresponds to all available IP interfaces. The entry0.0.0.0allows listening for all IPv4 addresses and::allows listening for all IPv6 addresses. If the list is empty, the server does not listen on any IP interface at all, in which case only Unix-domain sockets can be used to connect to it. If the list is not empty, the server will start if it can listen on at least one TCP/IP address. A warning will be emitted for any TCP/IP address which cannot be opened. The default value islocalhost, which allows only local TCP/IP“loopback”connections to be made.While client authentication (Chapter 20) allows fine-grained control over who can access the server,listen_addressescontrols which interfaces accept connection attempts, which can help prevent repeated malicious connection requests on insecure network interfaces. This parameter can only be set at server start.",PostgreSQL,0
port,integer,The TCP port the server listens on; 5432 by default. Note that the same port number is used for all IP addresses the server listens on. This parameter can only be set at server start.,PostgreSQL,0
max_connections,integer,"Determines the maximum number of concurrent connections to the database server. The default is typically 100 connections, but might be less if your kernel settings will not support it (as determined duringinitdb). This parameter can only be set at server start.PostgreSQL sizes certain resources based directly on the value ofmax_connections. Increasing its value leads to higher allocation of those resources, including shared memory.When running a standby server, you must set this parameter to the same or higher value than on the primary server. Otherwise, queries will not be allowed in the standby server.",PostgreSQL,0
reserved_connections,integer,"Determines the number of connection“slots”that are reserved for connections by roles with privileges of thepg_use_reserved_connectionsrole. Whenever the number of free connection slots is greater thansuperuser_reserved_connectionsbut less than or equal to the sum ofsuperuser_reserved_connectionsandreserved_connections, new connections will be accepted only for superusers and roles with privileges ofpg_use_reserved_connections. Ifsuperuser_reserved_connectionsor fewer connection slots are available, new connections will be accepted only for superusers.The default value is zero connections. The value must be less thanmax_connectionsminussuperuser_reserved_connections. This parameter can only be set at server start.",PostgreSQL,0
superuser_reserved_connections,integer,"Determines the number of connection“slots”that are reserved for connections byPostgreSQLsuperusers. At mostmax_connectionsconnections can ever be active simultaneously. Whenever the number of active concurrent connections is at leastmax_connectionsminussuperuser_reserved_connections, new connections will be accepted only for superusers. The connection slots reserved by this parameter are intended as final reserve for emergency use after the slots reserved byreserved_connectionshave been exhausted.The default value is three connections. The value must be less thanmax_connectionsminusreserved_connections. This parameter can only be set at server start.",PostgreSQL,0
unix_socket_directories,string,"Specifies the directory of the Unix-domain socket(s) on which the server is to listen for connections from client applications. Multiple sockets can be created by listing multiple directories separated by commas. Whitespace between entries is ignored; surround a directory name with double quotes if you need to include whitespace or commas in the name. An empty value specifies not listening on any Unix-domain sockets, in which case only TCP/IP sockets can be used to connect to the server.A value that starts with@specifies that a Unix-domain socket in the abstract namespace should be created (currently supported on Linux only). In that case, this value does not specify a“directory”but a prefix from which the actual socket name is computed in the same manner as for the file-system namespace. While the abstract socket name prefix can be chosen freely, since it is not a file-system location, the convention is to nonetheless use file-system-like values such as@/tmp.The default value is normally/tmp, but that can be changed at build time. On Windows, the default is empty, which means no Unix-domain socket is created by default. This parameter can only be set at server start.In addition to the socket file itself, which is named.s.PGSQL.nnnnwherennnnis the server's port number, an ordinary file named.s.PGSQL.nnnn.lockwill be created in each of theunix_socket_directoriesdirectories. Neither file should ever be removed manually. For sockets in the abstract namespace, no lock file is created.",PostgreSQL,0
unix_socket_group,string,"Sets the owning group of the Unix-domain socket(s). (The owning user of the sockets is always the user that starts the server.) In combination with the parameterunix_socket_permissionsthis can be used as an additional access control mechanism for Unix-domain connections. By default this is the empty string, which uses the default group of the server user. This parameter can only be set at server start.This parameter is not supported on Windows. Any setting will be ignored. Also, sockets in the abstract namespace have no file owner, so this setting is also ignored in that case.",PostgreSQL,0
unix_socket_permissions,integer,"Sets the access permissions of the Unix-domain socket(s). Unix-domain sockets use the usual Unix file system permission set. The parameter value is expected to be a numeric mode specified in the format accepted by thechmodandumasksystem calls. (To use the customary octal format the number must start with a0(zero).)The default permissions are0777, meaning anyone can connect. Reasonable alternatives are0770(only user and group, see alsounix_socket_group) and0700(only user). (Note that for a Unix-domain socket, only write permission matters, so there is no point in setting or revoking read or execute permissions.)This access control mechanism is independent of the one described inChapter 20.This parameter can only be set at server start.This parameter is irrelevant on systems, notably Solaris as of Solaris 10, that ignore socket permissions entirely. There, one can achieve a similar effect by pointingunix_socket_directoriesto a directory having search permission limited to the desired audience.Sockets in the abstract namespace have no file permissions, so this setting is also ignored in that case.",PostgreSQL,0
bonjour,boolean,Enables advertising the server's existence viaBonjour. The default is off. This parameter can only be set at server start.,PostgreSQL,0
bonjour_name,string,Specifies theBonjourservice name. The computer name is used if this parameter is set to the empty string''(which is the default). This parameter is ignored if the server was not compiled withBonjoursupport. This parameter can only be set at server start.,PostgreSQL,0
tcp_keepalives_idle,integer,"Specifies the amount of time with no network activity after which the operating system should send a TCP keepalive message to the client. If this value is specified without units, it is taken as seconds. A value of 0 (the default) selects the operating system's default. On Windows, setting a value of 0 will set this parameter to 2 hours, since Windows does not provide a way to read the system default value. This parameter is supported only on systems that supportTCP_KEEPIDLEor an equivalent socket option, and on Windows; on other systems, it must be zero. In sessions connected via a Unix-domain socket, this parameter is ignored and always reads as zero.",PostgreSQL,0
tcp_keepalives_interval,integer,"Specifies the amount of time after which a TCP keepalive message that has not been acknowledged by the client should be retransmitted. If this value is specified without units, it is taken as seconds. A value of 0 (the default) selects the operating system's default. On Windows, setting a value of 0 will set this parameter to 1 second, since Windows does not provide a way to read the system default value. This parameter is supported only on systems that supportTCP_KEEPINTVLor an equivalent socket option, and on Windows; on other systems, it must be zero. In sessions connected via a Unix-domain socket, this parameter is ignored and always reads as zero.",PostgreSQL,0
tcp_keepalives_count,integer,"Specifies the number of TCP keepalive messages that can be lost before the server's connection to the client is considered dead. A value of 0 (the default) selects the operating system's default. This parameter is supported only on systems that supportTCP_KEEPCNTor an equivalent socket option (which does not include Windows); on other systems, it must be zero. In sessions connected via a Unix-domain socket, this parameter is ignored and always reads as zero.",PostgreSQL,0
tcp_user_timeout,integer,"Specifies the amount of time that transmitted data may remain unacknowledged before the TCP connection is forcibly closed. If this value is specified without units, it is taken as milliseconds. A value of 0 (the default) selects the operating system's default. This parameter is supported only on systems that supportTCP_USER_TIMEOUT(which does not include Windows); on other systems, it must be zero. In sessions connected via a Unix-domain socket, this parameter is ignored and always reads as zero.",PostgreSQL,0
client_connection_check_interval,integer,"Sets the time interval between optional checks that the client is still connected, while running queries. The check is performed by polling the socket, and allows long running queries to be aborted sooner if the kernel reports that the connection is closed.This option relies on kernel events exposed by Linux, macOS, illumos and the BSD family of operating systems, and is not currently available on other systems.If the value is specified without units, it is taken as milliseconds. The default value is0, which disables connection checks. Without connection checks, the server will detect the loss of the connection only at the next interaction with the socket, when it waits for, receives or sends data.For the kernel itself to detect lost TCP connections reliably and within a known timeframe in all scenarios including network failure, it may also be necessary to adjust the TCP keepalive settings of the operating system, or thetcp_keepalives_idle,tcp_keepalives_intervalandtcp_keepalives_countsettings ofPostgreSQL.",PostgreSQL,0
authentication_timeout,integer,"Maximum amount of time allowed to complete client authentication. If a would-be client has not completed the authentication protocol in this much time, the server closes the connection. This prevents hung clients from occupying a connection indefinitely. If this value is specified without units, it is taken as seconds. The default is one minute (1m). This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
password_encryption,enum,"When a password is specified inCREATE ROLEorALTER ROLE, this parameter determines the algorithm to use to encrypt the password. Possible values arescram-sha-256, which will encrypt the password with SCRAM-SHA-256, andmd5, which stores the password as an MD5 hash. The default isscram-sha-256.Note that older clients might lack support for the SCRAM authentication mechanism, and hence not work with passwords encrypted with SCRAM-SHA-256. SeeSection 20.5for more details.",PostgreSQL,0
scram_iterations,integer,"The number of computational iterations to be performed when encrypting a password using SCRAM-SHA-256. The default is4096. A higher number of iterations provides additional protection against brute-force attacks on stored passwords, but makes authentication slower. Changing the value has no effect on existing passwords encrypted with SCRAM-SHA-256 as the iteration count is fixed at the time of encryption. In order to make use of a changed value, a new password must be set.",PostgreSQL,0
krb_server_keyfile,string,"Sets the location of the server's Kerberos key file. The default isFILE:/usr/local/pgsql/etc/krb5.keytab(where the directory part is whatever was specified assysconfdirat build time; usepg_config --sysconfdirto determine that). If this parameter is set to an empty string, it is ignored and a system-dependent default is used. This parameter can only be set in thepostgresql.conffile or on the server command line. SeeSection 20.6for more information.",PostgreSQL,0
krb_caseins_users,boolean,Sets whether GSSAPI user names should be treated case-insensitively. The default isoff(case sensitive). This parameter can only be set in thepostgresql.conffile or on the server command line.,PostgreSQL,0
gss_accept_delegation,boolean,Sets whether GSSAPI delegation should be accepted from the client. The default isoffmeaning credentials from the client willnotbe accepted. Changing this toonwill make the server accept credentials delegated to it from the client. This parameter can only be set in thepostgresql.conffile or on the server command line.,PostgreSQL,0
ssl,boolean,EnablesSSLconnections. This parameter can only be set in thepostgresql.conffile or on the server command line. The default isoff.,PostgreSQL,0
ssl_ca_file,string,"Specifies the name of the file containing the SSL server certificate authority (CA). Relative paths are relative to the data directory. This parameter can only be set in thepostgresql.conffile or on the server command line. The default is empty, meaning no CA file is loaded, and client certificate verification is not performed.",PostgreSQL,0
ssl_cert_file,string,Specifies the name of the file containing the SSL server certificate. Relative paths are relative to the data directory. This parameter can only be set in thepostgresql.conffile or on the server command line. The default isserver.crt.,PostgreSQL,0
ssl_crl_file,string,"Specifies the name of the file containing the SSL client certificate revocation list (CRL). Relative paths are relative to the data directory. This parameter can only be set in thepostgresql.conffile or on the server command line. The default is empty, meaning no CRL file is loaded (unlessssl_crl_diris set).",PostgreSQL,0
ssl_crl_dir,string,"Specifies the name of the directory containing the SSL client certificate revocation list (CRL). Relative paths are relative to the data directory. This parameter can only be set in thepostgresql.conffile or on the server command line. The default is empty, meaning no CRLs are used (unlessssl_crl_fileis set).The directory needs to be prepared with theOpenSSLcommandopenssl rehashorc_rehash. See its documentation for details.When using this setting, CRLs in the specified directory are loaded on-demand at connection time. New CRLs can be added to the directory and will be used immediately. This is unlikessl_crl_file, which causes the CRL in the file to be loaded at server start time or when the configuration is reloaded. Both settings can be used together.",PostgreSQL,0
ssl_key_file,string,Specifies the name of the file containing the SSL server private key. Relative paths are relative to the data directory. This parameter can only be set in thepostgresql.conffile or on the server command line. The default isserver.key.,PostgreSQL,0
ssl_ciphers,string,"Specifies a list ofSSLcipher suites that are allowed to be used by SSL connections. See theciphersmanual page in theOpenSSLpackage for the syntax of this setting and a list of supported values. Only connections using TLS version 1.2 and lower are affected. There is currently no setting that controls the cipher choices used by TLS version 1.3 connections. The default value isHIGH:MEDIUM:+3DES:!aNULL. The default is usually a reasonable choice unless you have specific security requirements.This parameter can only be set in thepostgresql.conffile or on the server command line.Explanation of the default value:HIGH#Cipher suites that use ciphers fromHIGHgroup (e.g., AES, Camellia, 3DES)MEDIUM#Cipher suites that use ciphers fromMEDIUMgroup (e.g., RC4, SEED)+3DES#TheOpenSSLdefault order forHIGHis problematic because it orders 3DES higher than AES128. This is wrong because 3DES offers less security than AES128, and it is also much slower.+3DESreorders it after all otherHIGHandMEDIUMciphers.!aNULL#Disables anonymous cipher suites that do no authentication. Such cipher suites are vulnerable toMITMattacks and therefore should not be used.Available cipher suite details will vary acrossOpenSSLversions. Use the commandopenssl ciphers -v 'HIGH:MEDIUM:+3DES:!aNULL'to see actual details for the currently installedOpenSSLversion. Note that this list is filtered at run time based on the server key type.",PostgreSQL,0
ssl_prefer_server_ciphers,boolean,"Specifies whether to use the server's SSL cipher preferences, rather than the client's. This parameter can only be set in thepostgresql.conffile or on the server command line. The default ison.PostgreSQLversions before 9.4 do not have this setting and always use the client's preferences. This setting is mainly for backward compatibility with those versions. Using the server's preferences is usually better because it is more likely that the server is appropriately configured.",PostgreSQL,0
ssl_ecdh_curve,string,"Specifies the name of the curve to use inECDHkey exchange. It needs to be supported by all clients that connect. It does not need to be the same curve used by the server's Elliptic Curve key. This parameter can only be set in thepostgresql.conffile or on the server command line. The default isprime256v1.OpenSSLnames for the most common curves are:prime256v1(NIST P-256),secp384r1(NIST P-384),secp521r1(NIST P-521). The full list of available curves can be shown with the commandopenssl ecparam -list_curves. Not all of them are usable inTLSthough.",PostgreSQL,0
ssl_min_protocol_version,enum,"Sets the minimum SSL/TLS protocol version to use. Valid values are currently:TLSv1,TLSv1.1,TLSv1.2,TLSv1.3. Older versions of theOpenSSLlibrary do not support all values; an error will be raised if an unsupported setting is chosen. Protocol versions before TLS 1.0, namely SSL version 2 and 3, are always disabled.The default isTLSv1.2, which satisfies industry best practices as of this writing.This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
ssl_max_protocol_version,enum,"Sets the maximum SSL/TLS protocol version to use. Valid values are as forssl_min_protocol_version, with addition of an empty string, which allows any protocol version. The default is to allow any version. Setting the maximum protocol version is mainly useful for testing or if some component has issues working with a newer protocol.This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
ssl_dh_params_file,string,"Specifies the name of the file containing Diffie-Hellman parameters used for so-called ephemeral DH family of SSL ciphers. The default is empty, in which case compiled-in default DH parameters used. Using custom DH parameters reduces the exposure if an attacker manages to crack the well-known compiled-in DH parameters. You can create your own DH parameters file with the commandopenssl dhparam -out dhparams.pem 2048.This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
ssl_passphrase_command,string,"Sets an external command to be invoked when a passphrase for decrypting an SSL file such as a private key needs to be obtained. By default, this parameter is empty, which means the built-in prompting mechanism is used.The command must print the passphrase to the standard output and exit with code 0. In the parameter value,%pis replaced by a prompt string. (Write%%for a literal%.) Note that the prompt string will probably contain whitespace, so be sure to quote adequately. A single newline is stripped from the end of the output if present.The command does not actually have to prompt the user for a passphrase. It can read it from a file, obtain it from a keychain facility, or similar. It is up to the user to make sure the chosen mechanism is adequately secure.This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
ssl_passphrase_command_supports_reload,boolean,"This parameter determines whether the passphrase command set byssl_passphrase_commandwill also be called during a configuration reload if a key file needs a passphrase. If this parameter is off (the default), thenssl_passphrase_commandwill be ignored during a reload and the SSL configuration will not be reloaded if a passphrase is needed. That setting is appropriate for a command that requires a TTY for prompting, which might not be available when the server is running. Setting this parameter to on might be appropriate if the passphrase is obtained from a file, for example.This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
shared_buffers,integer,"Sets the amount of memory the database server uses for shared memory buffers. The default is typically 128 megabytes (128MB), but might be less if your kernel settings will not support it (as determined duringinitdb). This setting must be at least 128 kilobytes. However, settings significantly higher than the minimum are usually needed for good performance. If this value is specified without units, it is taken as blocks, that isBLCKSZbytes, typically 8kB. (Non-default values ofBLCKSZchange the minimum value.) This parameter can only be set at server start.If you have a dedicated database server with 1GB or more of RAM, a reasonable starting value forshared_buffersis 25% of the memory in your system. There are some workloads where even larger settings forshared_buffersare effective, but becausePostgreSQLalso relies on the operating system cache, it is unlikely that an allocation of more than 40% of RAM toshared_bufferswill work better than a smaller amount. Larger settings forshared_buffersusually require a corresponding increase inmax_wal_size, in order to spread out the process of writing large quantities of new or changed data over a longer period of time.On systems with less than 1GB of RAM, a smaller percentage of RAM is appropriate, so as to leave adequate space for the operating system.",PostgreSQL,0
huge_pages,enum,"Controls whether huge pages are requested for the main shared memory area. Valid values aretry(the default),on, andoff. Withhuge_pagesset totry, the server will try to request huge pages, but fall back to the default if that fails. Withon, failure to request huge pages will prevent the server from starting up. Withoff, huge pages will not be requested. The actual state of huge pages is indicated by the server variablehuge_pages_status.At present, this setting is supported only on Linux and Windows. The setting is ignored on other systems when set totry. On Linux, it is only supported whenshared_memory_typeis set tommap(the default).The use of huge pages results in smaller page tables and less CPU time spent on memory management, increasing performance. For more details about using huge pages on Linux, seeSection 18.4.5.Huge pages are known as large pages on Windows. To use them, you need to assign the user right“Lock pages in memory”to the Windows user account that runsPostgreSQL. You can use Windows Group Policy tool (gpedit.msc) to assign the user right“Lock pages in memory”. To start the database server on the command prompt as a standalone process, not as a Windows service, the command prompt must be run as an administrator or User Access Control (UAC) must be disabled. When the UAC is enabled, the normal command prompt revokes the user right“Lock pages in memory”when started.Note that this setting only affects the main shared memory area. Operating systems such as Linux, FreeBSD, and Illumos can also use huge pages (also known as“super”pages or“large”pages) automatically for normal memory allocation, without an explicit request fromPostgreSQL. On Linux, this is called“transparent huge pages”(THP). That feature has been known to cause performance degradation withPostgreSQLfor some users on some Linux versions, so its use is currently discouraged (unlike explicit use ofhuge_pages).",PostgreSQL,0
huge_page_size,integer,"Controls the size of huge pages, when they are enabled withhuge_pages. The default is zero (0). When set to0, the default huge page size on the system will be used. This parameter can only be set at server start.Some commonly available page sizes on modern 64 bit server architectures include:2MBand1GB(Intel and AMD),16MBand16GB(IBM POWER), and64kB,2MB,32MBand1GB(ARM). For more information about usage and support, seeSection 18.4.5.Non-default settings are currently supported only on Linux.",PostgreSQL,0
temp_buffers,integer,"Sets the maximum amount of memory used for temporary buffers within each database session. These are session-local buffers used only for access to temporary tables. If this value is specified without units, it is taken as blocks, that isBLCKSZbytes, typically 8kB. The default is eight megabytes (8MB). (IfBLCKSZis not 8kB, the default value scales proportionally to it.) This setting can be changed within individual sessions, but only before the first use of temporary tables within the session; subsequent attempts to change the value will have no effect on that session.A session will allocate temporary buffers as needed up to the limit given bytemp_buffers. The cost of setting a large value in sessions that do not actually need many temporary buffers is only a buffer descriptor, or about 64 bytes, per increment intemp_buffers. However if a buffer is actually used an additional 8192 bytes will be consumed for it (or in general,BLCKSZbytes).",PostgreSQL,0
max_prepared_transactions,integer,"Sets the maximum number of transactions that can be in the“prepared”state simultaneously (seePREPARE TRANSACTION). Setting this parameter to zero (which is the default) disables the prepared-transaction feature. This parameter can only be set at server start.If you are not planning to use prepared transactions, this parameter should be set to zero to prevent accidental creation of prepared transactions. If you are using prepared transactions, you will probably wantmax_prepared_transactionsto be at least as large asmax_connections, so that every session can have a prepared transaction pending.When running a standby server, you must set this parameter to the same or higher value than on the primary server. Otherwise, queries will not be allowed in the standby server.",PostgreSQL,0
work_mem,integer,"Sets the base maximum amount of memory to be used by a query operation (such as a sort or hash table) before writing to temporary disk files. If this value is specified without units, it is taken as kilobytes. The default value is four megabytes (4MB). Note that a complex query might perform several sort and hash operations at the same time, with each operation generally being allowed to use as much memory as this value specifies before it starts to write data into temporary files. Also, several running sessions could be doing such operations concurrently. Therefore, the total memory used could be many times the value ofwork_mem; it is necessary to keep this fact in mind when choosing the value. Sort operations are used forORDER BY,DISTINCT, and merge joins. Hash tables are used in hash joins, hash-based aggregation, memoize nodes and hash-based processing ofINsubqueries.Hash-based operations are generally more sensitive to memory availability than equivalent sort-based operations. The memory limit for a hash table is computed by multiplyingwork_membyhash_mem_multiplier. This makes it possible for hash-based operations to use an amount of memory that exceeds the usualwork_membase amount.",PostgreSQL,0
hash_mem_multiplier,floating point,"Used to compute the maximum amount of memory that hash-based operations can use. The final limit is determined by multiplyingwork_membyhash_mem_multiplier. The default value is 2.0, which makes hash-based operations use twice the usualwork_membase amount.Consider increasinghash_mem_multiplierin environments where spilling by query operations is a regular occurrence, especially when simply increasingwork_memresults in memory pressure (memory pressure typically takes the form of intermittent out of memory errors). The default setting of 2.0 is often effective with mixed workloads. Higher settings in the range of 2.0 - 8.0 or more may be effective in environments wherework_memhas already been increased to 40MB or more.",PostgreSQL,0
maintenance_work_mem,integer,"Specifies the maximum amount of memory to be used by maintenance operations, such asVACUUM,CREATE INDEX, andALTER TABLE ADD FOREIGN KEY. If this value is specified without units, it is taken as kilobytes. It defaults to 64 megabytes (64MB). Since only one of these operations can be executed at a time by a database session, and an installation normally doesn't have many of them running concurrently, it's safe to set this value significantly larger thanwork_mem. Larger settings might improve performance for vacuuming and for restoring database dumps.Note that when autovacuum runs, up toautovacuum_max_workerstimes this memory may be allocated, so be careful not to set the default value too high. It may be useful to control for this by separately settingautovacuum_work_mem.",PostgreSQL,0
autovacuum_work_mem,integer,"Specifies the maximum amount of memory to be used by each autovacuum worker process. If this value is specified without units, it is taken as kilobytes. It defaults to -1, indicating that the value ofmaintenance_work_memshould be used instead. The setting has no effect on the behavior ofVACUUMwhen run in other contexts. This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
vacuum_buffer_usage_limit,integer,"Specifies the size of theBuffer Access Strategyused by theVACUUMandANALYZEcommands. A setting of0will allow the operation to use any number ofshared_buffers. Otherwise valid sizes range from128 kBto16 GB. If the specified size would exceed 1/8 the size ofshared_buffers, the size is silently capped to that value. The default value is2MB. If this value is specified without units, it is taken as kilobytes. This parameter can be set at any time. It can be overridden forVACUUMandANALYZEwhen passing theBUFFER_USAGE_LIMIToption. Higher settings can allowVACUUMandANALYZEto run more quickly, but having too large a setting may cause too many other useful pages to be evicted from shared buffers.",PostgreSQL,0
logical_decoding_work_mem,integer,"Specifies the maximum amount of memory to be used by logical decoding, before some of the decoded changes are written to local disk. This limits the amount of memory used by logical streaming replication connections. It defaults to 64 megabytes (64MB). Since each replication connection only uses a single buffer of this size, and an installation normally doesn't have many such connections concurrently (as limited bymax_wal_senders), it's safe to set this value significantly higher thanwork_mem, reducing the amount of decoded changes written to disk.",PostgreSQL,0
commit_timestamp_buffers,integer,"Specifies the amount of memory to use to cache the contents ofpg_commit_ts(seeTable 65.1). If this value is specified without units, it is taken as blocks, that isBLCKSZbytes, typically 8kB. The default value is0, which requestsshared_buffers/512 up to 1024 blocks, but not fewer than 16 blocks. This parameter can only be set at server start.",PostgreSQL,0
multixact_member_buffers,integer,"Specifies the amount of shared memory to use to cache the contents ofpg_multixact/members(seeTable 65.1). If this value is specified without units, it is taken as blocks, that isBLCKSZbytes, typically 8kB. The default value is32. This parameter can only be set at server start.",PostgreSQL,0
multixact_offset_buffers,integer,"Specifies the amount of shared memory to use to cache the contents ofpg_multixact/offsets(seeTable 65.1). If this value is specified without units, it is taken as blocks, that isBLCKSZbytes, typically 8kB. The default value is16. This parameter can only be set at server start.",PostgreSQL,0
notify_buffers,integer,"Specifies the amount of shared memory to use to cache the contents ofpg_notify(seeTable 65.1). If this value is specified without units, it is taken as blocks, that isBLCKSZbytes, typically 8kB. The default value is16. This parameter can only be set at server start.",PostgreSQL,0
serializable_buffers,integer,"Specifies the amount of shared memory to use to cache the contents ofpg_serial(seeTable 65.1). If this value is specified without units, it is taken as blocks, that isBLCKSZbytes, typically 8kB. The default value is32. This parameter can only be set at server start.",PostgreSQL,0
subtransaction_buffers,integer,"Specifies the amount of shared memory to use to cache the contents ofpg_subtrans(seeTable 65.1). If this value is specified without units, it is taken as blocks, that isBLCKSZbytes, typically 8kB. The default value is0, which requestsshared_buffers/512 up to 1024 blocks, but not fewer than 16 blocks. This parameter can only be set at server start.",PostgreSQL,0
transaction_buffers,integer,"Specifies the amount of shared memory to use to cache the contents ofpg_xact(seeTable 65.1). If this value is specified without units, it is taken as blocks, that isBLCKSZbytes, typically 8kB. The default value is0, which requestsshared_buffers/512 up to 1024 blocks, but not fewer than 16 blocks. This parameter can only be set at server start.",PostgreSQL,0
max_stack_depth,integer,"Specifies the maximum safe depth of the server's execution stack. The ideal setting for this parameter is the actual stack size limit enforced by the kernel (as set byulimit -sor local equivalent), less a safety margin of a megabyte or so. The safety margin is needed because the stack depth is not checked in every routine in the server, but only in key potentially-recursive routines. If this value is specified without units, it is taken as kilobytes. The default setting is two megabytes (2MB), which is conservatively small and unlikely to risk crashes. However, it might be too small to allow execution of complex functions. Only superusers and users with the appropriateSETprivilege can change this setting.Settingmax_stack_depthhigher than the actual kernel limit will mean that a runaway recursive function can crash an individual backend process. On platforms wherePostgreSQLcan determine the kernel limit, the server will not allow this variable to be set to an unsafe value. However, not all platforms provide the information, so caution is recommended in selecting a value.",PostgreSQL,0
shared_memory_type,enum,"Specifies the shared memory implementation that the server should use for the main shared memory region that holdsPostgreSQL's shared buffers and other shared data. Possible values aremmap(for anonymous shared memory allocated usingmmap),sysv(for System V shared memory allocated viashmget) andwindows(for Windows shared memory). Not all values are supported on all platforms; the first supported option is the default for that platform. The use of thesysvoption, which is not the default on any platform, is generally discouraged because it typically requires non-default kernel settings to allow for large allocations (seeSection 18.4.1).",PostgreSQL,0
dynamic_shared_memory_type,enum,"Specifies the dynamic shared memory implementation that the server should use. Possible values areposix(for POSIX shared memory allocated usingshm_open),sysv(for System V shared memory allocated viashmget),windows(for Windows shared memory), andmmap(to simulate shared memory using memory-mapped files stored in the data directory). Not all values are supported on all platforms; the first supported option is usually the default for that platform. The use of themmapoption, which is not the default on any platform, is generally discouraged because the operating system may write modified pages back to disk repeatedly, increasing system I/O load; however, it may be useful for debugging, when thepg_dynshmemdirectory is stored on a RAM disk, or when other shared memory facilities are not available.",PostgreSQL,0
min_dynamic_shared_memory,integer,"Specifies the amount of memory that should be allocated at server startup for use by parallel queries. When this memory region is insufficient or exhausted by concurrent queries, new parallel queries try to allocate extra shared memory temporarily from the operating system using the method configured withdynamic_shared_memory_type, which may be slower due to memory management overheads. Memory that is allocated at startup withmin_dynamic_shared_memoryis affected by thehuge_pagessetting on operating systems where that is supported, and may be more likely to benefit from larger pages on operating systems where that is managed automatically. The default value is0(none). This parameter can only be set at server start.",PostgreSQL,0
temp_file_limit,integer,"Specifies the maximum amount of disk space that a process can use for temporary files, such as sort and hash temporary files, or the storage file for a held cursor. A transaction attempting to exceed this limit will be canceled. If this value is specified without units, it is taken as kilobytes.-1(the default) means no limit. Only superusers and users with the appropriateSETprivilege can change this setting.This setting constrains the total space used at any instant by all temporary files used by a givenPostgreSQLprocess. It should be noted that disk space used for explicit temporary tables, as opposed to temporary files used behind-the-scenes in query execution, doesnotcount against this limit.",PostgreSQL,0
max_notify_queue_pages,integer,Specifies the maximum amount of allocated pages forNOTIFY/LISTENqueue. The default value is 1048576. For 8 KB pages it allows to consume up to 8 GB of disk space.,PostgreSQL,0
max_files_per_process,integer,"Sets the maximum number of simultaneously open files allowed to each server subprocess. The default is one thousand files. If the kernel is enforcing a safe per-process limit, you don't need to worry about this setting. But on some platforms (notably, most BSD systems), the kernel will allow individual processes to open many more files than the system can actually support if many processes all try to open that many files. If you find yourself seeing“Too many open files”failures, try reducing this setting. This parameter can only be set at server start.",PostgreSQL,0
vacuum_cost_delay,floating point,"The amount of time that the process will sleep when the cost limit has been exceeded. If this value is specified without units, it is taken as milliseconds. The default value is zero, which disables the cost-based vacuum delay feature. Positive values enable cost-based vacuuming.When using cost-based vacuuming, appropriate values forvacuum_cost_delayare usually quite small, perhaps less than 1 millisecond. Whilevacuum_cost_delaycan be set to fractional-millisecond values, such delays may not be measured accurately on older platforms. On such platforms, increasingVACUUM's throttled resource consumption above what you get at 1ms will require changing the other vacuum cost parameters. You should, nonetheless, keepvacuum_cost_delayas small as your platform will consistently measure; large delays are not helpful.",PostgreSQL,0
vacuum_cost_page_hit,integer,"The estimated cost for vacuuming a buffer found in the shared buffer cache. It represents the cost to lock the buffer pool, lookup the shared hash table and scan the content of the page. The default value is one.",PostgreSQL,0
vacuum_cost_page_miss,integer,"The estimated cost for vacuuming a buffer that has to be read from disk. This represents the effort to lock the buffer pool, lookup the shared hash table, read the desired block in from the disk and scan its content. The default value is 2.",PostgreSQL,0
vacuum_cost_page_dirty,integer,The estimated cost charged when vacuum modifies a block that was previously clean. It represents the extra I/O required to flush the dirty block out to disk again. The default value is 20.,PostgreSQL,0
vacuum_cost_limit,integer,This is the accumulated cost that will cause the vacuuming process to sleep forvacuum_cost_delay. The default is 200.,PostgreSQL,0
bgwriter_delay,integer,"Specifies the delay between activity rounds for the background writer. In each round the writer issues writes for some number of dirty buffers (controllable by the following parameters). It then sleeps for the length ofbgwriter_delay, and repeats. When there are no dirty buffers in the buffer pool, though, it goes into a longer sleep regardless ofbgwriter_delay. If this value is specified without units, it is taken as milliseconds. The default value is 200 milliseconds (200ms). Note that on some systems, the effective resolution of sleep delays is 10 milliseconds; settingbgwriter_delayto a value that is not a multiple of 10 might have the same results as setting it to the next higher multiple of 10. This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
bgwriter_lru_maxpages,integer,"In each round, no more than this many buffers will be written by the background writer. Setting this to zero disables background writing. (Note that checkpoints, which are managed by a separate, dedicated auxiliary process, are unaffected.) The default value is 100 buffers. This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
bgwriter_lru_multiplier,floating point,"The number of dirty buffers written in each round is based on the number of new buffers that have been needed by server processes during recent rounds. The average recent need is multiplied bybgwriter_lru_multiplierto arrive at an estimate of the number of buffers that will be needed during the next round. Dirty buffers are written until there are that many clean, reusable buffers available. (However, no more thanbgwriter_lru_maxpagesbuffers will be written per round.) Thus, a setting of 1.0 represents a“just in time”policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0. This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
bgwriter_flush_after,integer,"Whenever more than this amount of data has been written by the background writer, attempt to force the OS to issue these writes to the underlying storage. Doing so will limit the amount of dirty data in the kernel's page cache, reducing the likelihood of stalls when anfsyncis issued at the end of a checkpoint, or when the OS writes data back in larger batches in the background. Often that will result in greatly reduced transaction latency, but there also are some cases, especially with workloads that are bigger thanshared_buffers, but smaller than the OS's page cache, where performance might degrade. This setting may have no effect on some platforms. If this value is specified without units, it is taken as blocks, that isBLCKSZbytes, typically 8kB. The valid range is between0, which disables forced writeback, and2MB. The default is512kBon Linux,0elsewhere. (IfBLCKSZis not 8kB, the default and maximum values scale proportionally to it.) This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
backend_flush_after,integer,"Whenever more than this amount of data has been written by a single backend, attempt to force the OS to issue these writes to the underlying storage. Doing so will limit the amount of dirty data in the kernel's page cache, reducing the likelihood of stalls when anfsyncis issued at the end of a checkpoint, or when the OS writes data back in larger batches in the background. Often that will result in greatly reduced transaction latency, but there also are some cases, especially with workloads that are bigger thanshared_buffers, but smaller than the OS's page cache, where performance might degrade. This setting may have no effect on some platforms. If this value is specified without units, it is taken as blocks, that isBLCKSZbytes, typically 8kB. The valid range is between0, which disables forced writeback, and2MB. The default is0, i.e., no forced writeback. (IfBLCKSZis not 8kB, the maximum value scales proportionally to it.)",PostgreSQL,0
effective_io_concurrency,integer,"Sets the number of concurrent disk I/O operations thatPostgreSQLexpects can be executed simultaneously. Raising this value will increase the number of I/O operations that any individualPostgreSQLsession attempts to initiate in parallel. The allowed range is 1 to 1000, or zero to disable issuance of asynchronous I/O requests. Currently, this setting only affects bitmap heap scans.For magnetic drives, a good starting point for this setting is the number of separate drives comprising a RAID 0 stripe or RAID 1 mirror being used for the database. (For RAID 5 the parity drive should not be counted.) However, if the database is often busy with multiple queries issued in concurrent sessions, lower values may be sufficient to keep the disk array busy. A value higher than needed to keep the disks busy will only result in extra CPU overhead. SSDs and other memory-based storage can often process many concurrent requests, so the best value might be in the hundreds.Asynchronous I/O depends on an effectiveposix_fadvisefunction, which some operating systems lack. If the function is not present then setting this parameter to anything but zero will result in an error. On some operating systems (e.g., Solaris), the function is present but does not actually do anything.The default is 1 on supported systems, otherwise 0. This value can be overridden for tables in a particular tablespace by setting the tablespace parameter of the same name (seeALTER TABLESPACE).",PostgreSQL,0
maintenance_io_concurrency,integer,"Similar toeffective_io_concurrency, but used for maintenance work that is done on behalf of many client sessions.The default is 10 on supported systems, otherwise 0. This value can be overridden for tables in a particular tablespace by setting the tablespace parameter of the same name (seeALTER TABLESPACE).",PostgreSQL,0
io_combine_limit,integer,Controls the largest I/O size in operations that combine I/O. The default is 128kB.,PostgreSQL,0
max_worker_processes,integer,"Sets the maximum number of background processes that the cluster can support. This parameter can only be set at server start. The default is 8.When running a standby server, you must set this parameter to the same or higher value than on the primary server. Otherwise, queries will not be allowed in the standby server.When changing this value, consider also adjustingmax_parallel_workers,max_parallel_maintenance_workers, andmax_parallel_workers_per_gather.",PostgreSQL,0
max_parallel_workers_per_gather,integer,"Sets the maximum number of workers that can be started by a singleGatherorGather Mergenode. Parallel workers are taken from the pool of processes established bymax_worker_processes, limited bymax_parallel_workers. Note that the requested number of workers may not actually be available at run time. If this occurs, the plan will run with fewer workers than expected, which may be inefficient. The default value is 2. Setting this value to 0 disables parallel query execution.Note that parallel queries may consume very substantially more resources than non-parallel queries, because each worker process is a completely separate process which has roughly the same impact on the system as an additional user session. This should be taken into account when choosing a value for this setting, as well as when configuring other settings that control resource utilization, such aswork_mem. Resource limits such aswork_memare applied individually to each worker, which means the total utilization may be much higher across all processes than it would normally be for any single process. For example, a parallel query using 4 workers may use up to 5 times as much CPU time, memory, I/O bandwidth, and so forth as a query which uses no workers at all.For more information on parallel query, seeChapter 15.",PostgreSQL,0
max_parallel_maintenance_workers,integer,"Sets the maximum number of parallel workers that can be started by a single utility command. Currently, the parallel utility commands that support the use of parallel workers areCREATE INDEXwhen building a B-tree or BRIN index, andVACUUMwithoutFULLoption. Parallel workers are taken from the pool of processes established bymax_worker_processes, limited bymax_parallel_workers. Note that the requested number of workers may not actually be available at run time. If this occurs, the utility operation will run with fewer workers than expected. The default value is 2. Setting this value to 0 disables the use of parallel workers by utility commands.Note that parallel utility commands should not consume substantially more memory than equivalent non-parallel operations. This strategy differs from that of parallel query, where resource limits generally apply per worker process. Parallel utility commands treat the resource limitmaintenance_work_memas a limit to be applied to the entire utility command, regardless of the number of parallel worker processes. However, parallel utility commands may still consume substantially more CPU resources and I/O bandwidth.",PostgreSQL,0
max_parallel_workers,integer,"Sets the maximum number of workers that the cluster can support for parallel operations. The default value is 8. When increasing or decreasing this value, consider also adjustingmax_parallel_maintenance_workersandmax_parallel_workers_per_gather. Also, note that a setting for this value which is higher thanmax_worker_processeswill have no effect, since parallel workers are taken from the pool of worker processes established by that setting.",PostgreSQL,0
parallel_leader_participation,boolean,"Allows the leader process to execute the query plan underGatherandGather Mergenodes instead of waiting for worker processes. The default ison. Setting this value tooffreduces the likelihood that workers will become blocked because the leader is not reading tuples fast enough, but requires the leader process to wait for worker processes to start up before the first tuples can be produced. The degree to which the leader can help or hinder performance depends on the plan type, number of workers and query duration.",PostgreSQL,0
wal_level,enum,"wal_leveldetermines how much information is written to the WAL. The default value isreplica, which writes enough data to support WAL archiving and replication, including running read-only queries on a standby server.minimalremoves all logging except the information required to recover from a crash or immediate shutdown. Finally,logicaladds information necessary to support logical decoding. Each level includes the information logged at all lower levels. This parameter can only be set at server start.Theminimallevel generates the least WAL volume. It logs no row information for permanent relations in transactions that create or rewrite them. This can make operations much faster (seeSection 14.4.7). Operations that initiate this optimization include:ALTER ... SET TABLESPACECLUSTERCREATE TABLEREFRESH MATERIALIZED VIEW(withoutCONCURRENTLY)REINDEXTRUNCATEHowever, minimal WAL does not contain sufficient information for point-in-time recovery, soreplicaor higher must be used to enable continuous archiving (archive_mode) and streaming binary replication. In fact, the server will not even start in this mode ifmax_wal_sendersis non-zero. Note that changingwal_leveltominimalmakes previous base backups unusable for point-in-time recovery and standby servers.Inlogicallevel, the same information is logged as withreplica, plus information needed to extract logical change sets from the WAL. Using a level oflogicalwill increase the WAL volume, particularly if many tables are configured forREPLICA IDENTITY FULLand manyUPDATEandDELETEstatements are executed.In releases prior to 9.6, this parameter also allowed the valuesarchiveandhot_standby. These are still accepted but mapped toreplica.",PostgreSQL,0
fsync,boolean,"If this parameter is on, thePostgreSQLserver will try to make sure that updates are physically written to disk, by issuingfsync()system calls or various equivalent methods (seewal_sync_method). This ensures that the database cluster can recover to a consistent state after an operating system or hardware crash.While turning offfsyncis often a performance benefit, this can result in unrecoverable data corruption in the event of a power failure or system crash. Thus it is only advisable to turn offfsyncif you can easily recreate your entire database from external data.Examples of safe circumstances for turning offfsyncinclude the initial loading of a new database cluster from a backup file, using a database cluster for processing a batch of data after which the database will be thrown away and recreated, or for a read-only database clone which gets recreated frequently and is not used for failover. High quality hardware alone is not a sufficient justification for turning offfsync.For reliable recovery when changingfsyncoff to on, it is necessary to force all modified buffers in the kernel to durable storage. This can be done while the cluster is shutdown or whilefsyncis on by runninginitdb --sync-only, runningsync, unmounting the file system, or rebooting the server.In many situations, turning offsynchronous_commitfor noncritical transactions can provide much of the potential performance benefit of turning offfsync, without the attendant risks of data corruption.fsynccan only be set in thepostgresql.conffile or on the server command line. If you turn this parameter off, also consider turning offfull_page_writes.",PostgreSQL,0
synchronous_commit,enum,"Specifies how much WAL processing must complete before the database server returns a“success”indication to the client. Valid values areremote_apply,on(the default),remote_write,local, andoff.Ifsynchronous_standby_namesis empty, the only meaningful settings areonandoff;remote_apply,remote_writeandlocalall provide the same local synchronization level ason. The local behavior of all non-offmodes is to wait for local flush of WAL to disk. Inoffmode, there is no waiting, so there can be a delay between when success is reported to the client and when the transaction is later guaranteed to be safe against a server crash. (The maximum delay is three timeswal_writer_delay.) Unlikefsync, setting this parameter tooffdoes not create any risk of database inconsistency: an operating system or database crash might result in some recent allegedly-committed transactions being lost, but the database state will be just the same as if those transactions had been aborted cleanly. So, turningsynchronous_commitoff can be a useful alternative when performance is more important than exact certainty about the durability of a transaction. For more discussion seeSection 28.4.Ifsynchronous_standby_namesis non-empty,synchronous_commitalso controls whether transaction commits will wait for their WAL records to be processed on the standby server(s).When set toremote_apply, commits will wait until replies from the current synchronous standby(s) indicate they have received the commit record of the transaction and applied it, so that it has become visible to queries on the standby(s), and also written to durable storage on the standbys. This will cause much larger commit delays than previous settings since it waits for WAL replay. When set toon, commits wait until replies from the current synchronous standby(s) indicate they have received the commit record of the transaction and flushed it to durable storage. This ensures the transaction will not be lost unless both the primary and all synchronous standbys suffer corruption of their database storage. When set toremote_write, commits will wait until replies from the current synchronous standby(s) indicate they have received the commit record of the transaction and written it to their file systems. This setting ensures data preservation if a standby instance ofPostgreSQLcrashes, but not if the standby suffers an operating-system-level crash because the data has not necessarily reached durable storage on the standby. The settinglocalcauses commits to wait for local flush to disk, but not for replication. This is usually not desirable when synchronous replication is in use, but is provided for completeness.This parameter can be changed at any time; the behavior for any one transaction is determined by the setting in effect when it commits. It is therefore possible, and useful, to have some transactions commit synchronously and others asynchronously. For example, to make a single multistatement transaction commit asynchronously when the default is the opposite, issueSET LOCAL synchronous_commit TO OFFwithin the transaction.Table 19.1summarizes the capabilities of thesynchronous_commitsettings.Table 19.1. synchronous_commit Modessynchronous_commit settinglocal durable commitstandby durable commit after PG crashstandby durable commit after OS crashstandby query consistencyremote_apply••••on•••remote_write••local•off",PostgreSQL,0
wal_sync_method,enum,"Method used for forcing WAL updates out to disk. Iffsyncis off then this setting is irrelevant, since WAL file updates will not be forced out at all. Possible values are:open_datasync(write WAL files withopen()optionO_DSYNC)fdatasync(callfdatasync()at each commit)fsync(callfsync()at each commit)fsync_writethrough(callfsync()at each commit, forcing write-through of any disk write cache)open_sync(write WAL files withopen()optionO_SYNC)Not all of these choices are available on all platforms. The default is the first method in the above list that is supported by the platform, except thatfdatasyncis the default on Linux and FreeBSD. The default is not necessarily ideal; it might be necessary to change this setting or other aspects of your system configuration in order to create a crash-safe configuration or achieve optimal performance. These aspects are discussed inSection 28.1. This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
full_page_writes,boolean,"When this parameter is on, thePostgreSQLserver writes the entire content of each disk page to WAL during the first modification of that page after a checkpoint. This is needed because a page write that is in process during an operating system crash might be only partially completed, leading to an on-disk page that contains a mix of old and new data. The row-level change data normally stored in WAL will not be enough to completely restore such a page during post-crash recovery. Storing the full page image guarantees that the page can be correctly restored, but at the price of increasing the amount of data that must be written to WAL. (Because WAL replay always starts from a checkpoint, it is sufficient to do this during the first change of each page after a checkpoint. Therefore, one way to reduce the cost of full-page writes is to increase the checkpoint interval parameters.)Turning this parameter off speeds normal operation, but might lead to either unrecoverable data corruption, or silent data corruption, after a system failure. The risks are similar to turning offfsync, though smaller, and it should be turned off only based on the same circumstances recommended for that parameter.Turning off this parameter does not affect use of WAL archiving for point-in-time recovery (PITR) (seeSection 25.3).This parameter can only be set in thepostgresql.conffile or on the server command line. The default ison.",PostgreSQL,0
wal_log_hints,boolean,"When this parameter ison, thePostgreSQLserver writes the entire content of each disk page to WAL during the first modification of that page after a checkpoint, even for non-critical modifications of so-called hint bits.If data checksums are enabled, hint bit updates are always WAL-logged and this setting is ignored. You can use this setting to test how much extra WAL-logging would occur if your database had data checksums enabled.This parameter can only be set at server start. The default value isoff.",PostgreSQL,0
wal_compression,enum,"This parameter enables compression of WAL using the specified compression method. When enabled, thePostgreSQLserver compresses full page images written to WAL whenfull_page_writesis on or during a base backup. A compressed page image will be decompressed during WAL replay. The supported methods arepglz,lz4(ifPostgreSQLwas compiled with--with-lz4) andzstd(ifPostgreSQLwas compiled with--with-zstd). The default value isoff. Only superusers and users with the appropriateSETprivilege can change this setting.Enabling compression can reduce the WAL volume without increasing the risk of unrecoverable data corruption, but at the cost of some extra CPU spent on the compression during WAL logging and on the decompression during WAL replay.",PostgreSQL,0
wal_init_zero,boolean,"If set toon(the default), this option causes new WAL files to be filled with zeroes. On some file systems, this ensures that space is allocated before we need to write WAL records. However,Copy-On-Write(COW) file systems may not benefit from this technique, so the option is given to skip the unnecessary work. If set tooff, only the final byte is written when the file is created so that it has the expected size.",PostgreSQL,0
wal_recycle,boolean,"If set toon(the default), this option causes WAL files to be recycled by renaming them, avoiding the need to create new ones. On COW file systems, it may be faster to create new ones, so the option is given to disable this behavior.",PostgreSQL,0
wal_buffers,integer,"The amount of shared memory used for WAL data that has not yet been written to disk. The default setting of -1 selects a size equal to 1/32nd (about 3%) ofshared_buffers, but not less than64kBnor more than the size of one WAL segment, typically16MB. This value can be set manually if the automatic choice is too large or too small, but any positive value less than32kBwill be treated as32kB. If this value is specified without units, it is taken as WAL blocks, that isXLOG_BLCKSZbytes, typically 8kB. This parameter can only be set at server start.The contents of the WAL buffers are written out to disk at every transaction commit, so extremely large values are unlikely to provide a significant benefit. However, setting this value to at least a few megabytes can improve write performance on a busy server where many clients are committing at once. The auto-tuning selected by the default setting of -1 should give reasonable results in most cases.",PostgreSQL,0
wal_writer_delay,integer,"Specifies how often the WAL writer flushes WAL, in time terms. After flushing WAL the writer sleeps for the length of time given bywal_writer_delay, unless woken up sooner by an asynchronously committing transaction. If the last flush happened less thanwal_writer_delayago and less thanwal_writer_flush_afterworth of WAL has been produced since, then WAL is only written to the operating system, not flushed to disk. If this value is specified without units, it is taken as milliseconds. The default value is 200 milliseconds (200ms). Note that on some systems, the effective resolution of sleep delays is 10 milliseconds; settingwal_writer_delayto a value that is not a multiple of 10 might have the same results as setting it to the next higher multiple of 10. This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
wal_writer_flush_after,integer,"Specifies how often the WAL writer flushes WAL, in volume terms. If the last flush happened less thanwal_writer_delayago and less thanwal_writer_flush_afterworth of WAL has been produced since, then WAL is only written to the operating system, not flushed to disk. Ifwal_writer_flush_afteris set to0then WAL data is always flushed immediately. If this value is specified without units, it is taken as WAL blocks, that isXLOG_BLCKSZbytes, typically 8kB. The default is1MB. This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
wal_skip_threshold,integer,"Whenwal_levelisminimaland a transaction commits after creating or rewriting a permanent relation, this setting determines how to persist the new data. If the data is smaller than this setting, write it to the WAL log; otherwise, use an fsync of affected files. Depending on the properties of your storage, raising or lowering this value might help if such commits are slowing concurrent transactions. If this value is specified without units, it is taken as kilobytes. The default is two megabytes (2MB).",PostgreSQL,0
commit_delay,integer,"Settingcommit_delayadds a time delay before a WAL flush is initiated. This can improve group commit throughput by allowing a larger number of transactions to commit via a single WAL flush, if system load is high enough that additional transactions become ready to commit within the given interval. However, it also increases latency by up to thecommit_delayfor each WAL flush. Because the delay is just wasted if no other transactions become ready to commit, a delay is only performed if at leastcommit_siblingsother transactions are active when a flush is about to be initiated. Also, no delays are performed iffsyncis disabled. If this value is specified without units, it is taken as microseconds. The defaultcommit_delayis zero (no delay). Only superusers and users with the appropriateSETprivilege can change this setting.InPostgreSQLreleases prior to 9.3,commit_delaybehaved differently and was much less effective: it affected only commits, rather than all WAL flushes, and waited for the entire configured delay even if the WAL flush was completed sooner. Beginning inPostgreSQL9.3, the first process that becomes ready to flush waits for the configured interval, while subsequent processes wait only until the leader completes the flush operation.",PostgreSQL,0
commit_siblings,integer,Minimum number of concurrent open transactions to require before performing thecommit_delaydelay. A larger value makes it more probable that at least one other transaction will become ready to commit during the delay interval. The default is five transactions.,PostgreSQL,0
checkpoint_timeout,integer,"Maximum time between automatic WAL checkpoints. If this value is specified without units, it is taken as seconds. The valid range is between 30 seconds and one day. The default is five minutes (5min). Increasing this parameter can increase the amount of time needed for crash recovery. This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
checkpoint_completion_target,floating point,"Specifies the target of checkpoint completion, as a fraction of total time between checkpoints. The default is 0.9, which spreads the checkpoint across almost all of the available interval, providing fairly consistent I/O load while also leaving some time for checkpoint completion overhead. Reducing this parameter is not recommended because it causes the checkpoint to complete faster. This results in a higher rate of I/O during the checkpoint followed by a period of less I/O between the checkpoint completion and the next scheduled checkpoint. This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
checkpoint_flush_after,integer,"Whenever more than this amount of data has been written while performing a checkpoint, attempt to force the OS to issue these writes to the underlying storage. Doing so will limit the amount of dirty data in the kernel's page cache, reducing the likelihood of stalls when anfsyncis issued at the end of the checkpoint, or when the OS writes data back in larger batches in the background. Often that will result in greatly reduced transaction latency, but there also are some cases, especially with workloads that are bigger thanshared_buffers, but smaller than the OS's page cache, where performance might degrade. This setting may have no effect on some platforms. If this value is specified without units, it is taken as blocks, that isBLCKSZbytes, typically 8kB. The valid range is between0, which disables forced writeback, and2MB. The default is256kBon Linux,0elsewhere. (IfBLCKSZis not 8kB, the default and maximum values scale proportionally to it.) This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
checkpoint_warning,integer,"Write a message to the server log if checkpoints caused by the filling of WAL segment files happen closer together than this amount of time (which suggests thatmax_wal_sizeought to be raised). If this value is specified without units, it is taken as seconds. The default is 30 seconds (30s). Zero disables the warning. No warnings will be generated ifcheckpoint_timeoutis less thancheckpoint_warning. This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
max_wal_size,integer,"Maximum size to let the WAL grow during automatic checkpoints. This is a soft limit; WAL size can exceedmax_wal_sizeunder special circumstances, such as heavy load, a failingarchive_commandorarchive_library, or a highwal_keep_sizesetting. If this value is specified without units, it is taken as megabytes. The default is 1 GB. Increasing this parameter can increase the amount of time needed for crash recovery. This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
min_wal_size,integer,"As long as WAL disk usage stays below this setting, old WAL files are always recycled for future use at a checkpoint, rather than removed. This can be used to ensure that enough WAL space is reserved to handle spikes in WAL usage, for example when running large batch jobs. If this value is specified without units, it is taken as megabytes. The default is 80 MB. This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
archive_mode,enum,"Whenarchive_modeis enabled, completed WAL segments are sent to archive storage by settingarchive_commandorarchive_library. In addition tooff, to disable, there are two modes:on, andalways. During normal operation, there is no difference between the two modes, but when set toalwaysthe WAL archiver is enabled also during archive recovery or standby mode. Inalwaysmode, all files restored from the archive or streamed with streaming replication will be archived (again). SeeSection 26.2.9for details.archive_modeis a separate setting fromarchive_commandandarchive_libraryso thatarchive_commandandarchive_librarycan be changed without leaving archiving mode. This parameter can only be set at server start.archive_modecannot be enabled whenwal_levelis set tominimal.",PostgreSQL,0
archive_command,string,"The local shell command to execute to archive a completed WAL file segment. Any%pin the string is replaced by the path name of the file to archive, and any%fis replaced by only the file name. (The path name is relative to the working directory of the server, i.e., the cluster's data directory.) Use%%to embed an actual%character in the command. It is important for the command to return a zero exit status only if it succeeds. For more information seeSection 25.3.1.This parameter can only be set in thepostgresql.conffile or on the server command line. It is only used ifarchive_modewas enabled at server start andarchive_libraryis set to an empty string. If botharchive_commandandarchive_libraryare set, an error will be raised. Ifarchive_commandis an empty string (the default) whilearchive_modeis enabled (andarchive_libraryis set to an empty string), WAL archiving is temporarily disabled, but the server continues to accumulate WAL segment files in the expectation that a command will soon be provided. Settingarchive_commandto a command that does nothing but return true, e.g.,/bin/true(REMon Windows), effectively disables archiving, but also breaks the chain of WAL files needed for archive recovery, so it should only be used in unusual circumstances.",PostgreSQL,0
archive_library,string,"The library to use for archiving completed WAL file segments. If set to an empty string (the default), archiving via shell is enabled, andarchive_commandis used. If botharchive_commandandarchive_libraryare set, an error will be raised. Otherwise, the specified shared library is used for archiving. The WAL archiver process is restarted by the postmaster when this parameter changes. For more information, seeSection 25.3.1andChapter 49.This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
archive_timeout,integer,"Thearchive_commandorarchive_libraryis only invoked for completed WAL segments. Hence, if your server generates little WAL traffic (or has slack periods where it does so), there could be a long delay between the completion of a transaction and its safe recording in archive storage. To limit how old unarchived data can be, you can setarchive_timeoutto force the server to switch to a new WAL segment file periodically. When this parameter is greater than zero, the server will switch to a new segment file whenever this amount of time has elapsed since the last segment file switch, and there has been any database activity, including a single checkpoint (checkpoints are skipped if there is no database activity). Note that archived files that are closed early due to a forced switch are still the same length as completely full files. Therefore, it is unwise to use a very shortarchive_timeout— it will bloat your archive storage.archive_timeoutsettings of a minute or so are usually reasonable. You should consider using streaming replication, instead of archiving, if you want data to be copied off the primary server more quickly than that. If this value is specified without units, it is taken as seconds. This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
recovery_prefetch,enum,"Whether to try to prefetch blocks that are referenced in the WAL that are not yet in the buffer pool, during recovery. Valid values areoff,onandtry(the default). The settingtryenables prefetching only if the operating system provides theposix_fadvisefunction, which is currently used to implement prefetching. Note that some operating systems provide the function, but it doesn't do anything.Prefetching blocks that will soon be needed can reduce I/O wait times during recovery with some workloads. See also thewal_decode_buffer_sizeandmaintenance_io_concurrencysettings, which limit prefetching activity.",PostgreSQL,0
wal_decode_buffer_size,integer,"A limit on how far ahead the server can look in the WAL, to find blocks to prefetch. If this value is specified without units, it is taken as bytes. The default is 512kB.",PostgreSQL,0
restore_command,string,"The local shell command to execute to retrieve an archived segment of the WAL file series. This parameter is required for archive recovery, but optional for streaming replication. Any%fin the string is replaced by the name of the file to retrieve from the archive, and any%pis replaced by the copy destination path name on the server. (The path name is relative to the current working directory, i.e., the cluster's data directory.) Any%ris replaced by the name of the file containing the last valid restart point. That is the earliest file that must be kept to allow a restore to be restartable, so this information can be used to truncate the archive to just the minimum required to support restarting from the current restore.%ris typically only used by warm-standby configurations (seeSection 26.2). Write%%to embed an actual%character.It is important for the command to return a zero exit status only if it succeeds. The commandwillbe asked for file names that are not present in the archive; it must return nonzero when so asked. Examples:restore_command = 'cp /mnt/server/archivedir/%f ""%p""'
restore_command = 'copy ""C:\\server\\archivedir\\%f"" ""%p""'  # WindowsAn exception is that if the command was terminated by a signal (other thanSIGTERM, which is used as part of a database server shutdown) or an error by the shell (such as command not found), then recovery will abort and the server will not start up.This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
archive_cleanup_command,string,"This optional parameter specifies a shell command that will be executed at every restartpoint. The purpose ofarchive_cleanup_commandis to provide a mechanism for cleaning up old archived WAL files that are no longer needed by the standby server. Any%ris replaced by the name of the file containing the last valid restart point. That is the earliest file that must bekeptto allow a restore to be restartable, and so all files earlier than%rmay be safely removed. This information can be used to truncate the archive to just the minimum required to support restart from the current restore. Thepg_archivecleanupmodule is often used inarchive_cleanup_commandfor single-standby configurations, for example:archive_cleanup_command = 'pg_archivecleanup /mnt/server/archivedir %r'Note however that if multiple standby servers are restoring from the same archive directory, you will need to ensure that you do not delete WAL files until they are no longer needed by any of the servers.archive_cleanup_commandwould typically be used in a warm-standby configuration (seeSection 26.2). Write%%to embed an actual%character in the command.If the command returns a nonzero exit status then a warning log message will be written. An exception is that if the command was terminated by a signal or an error by the shell (such as command not found), a fatal error will be raised.This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
recovery_end_command,string,"This parameter specifies a shell command that will be executed once only at the end of recovery. This parameter is optional. The purpose of therecovery_end_commandis to provide a mechanism for cleanup following replication or recovery. Any%ris replaced by the name of the file containing the last valid restart point, like inarchive_cleanup_command.If the command returns a nonzero exit status then a warning log message will be written and the database will proceed to start up anyway. An exception is that if the command was terminated by a signal or an error by the shell (such as command not found), the database will not proceed with startup.This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
recovery_target,,"This parameter specifies that recovery should end as soon as a consistent state is reached, i.e., as early as possible. When restoring from an online backup, this means the point where taking the backup ended.Technically, this is a string parameter, but'immediate'is currently the only allowed value.",PostgreSQL,0
recovery_target_name,string,This parameter specifies the named restore point (created withpg_create_restore_point()) to which recovery will proceed.,PostgreSQL,0
recovery_target_time,timestamp,"This parameter specifies the time stamp up to which recovery will proceed. The precise stopping point is also influenced byrecovery_target_inclusive.The value of this parameter is a time stamp in the same format accepted by thetimestamp with time zonedata type, except that you cannot use a time zone abbreviation (unless thetimezone_abbreviationsvariable has been set earlier in the configuration file). Preferred style is to use a numeric offset from UTC, or you can write a full time zone name, e.g.,Europe/HelsinkinotEEST.",PostgreSQL,0
recovery_target_xid,string,"This parameter specifies the transaction ID up to which recovery will proceed. Keep in mind that while transaction IDs are assigned sequentially at transaction start, transactions can complete in a different numeric order. The transactions that will be recovered are those that committed before (and optionally including) the specified one. The precise stopping point is also influenced byrecovery_target_inclusive.",PostgreSQL,0
recovery_target_lsn,pg_lsn,This parameter specifies the LSN of the write-ahead log location up to which recovery will proceed. The precise stopping point is also influenced byrecovery_target_inclusive. This parameter is parsed using the system data typepg_lsn.,PostgreSQL,0
recovery_target_inclusive,boolean,"Specifies whether to stop just after the specified recovery target (on), or just before the recovery target (off). Applies whenrecovery_target_lsn,recovery_target_time, orrecovery_target_xidis specified. This setting controls whether transactions having exactly the target WAL location (LSN), commit time, or transaction ID, respectively, will be included in the recovery. Default ison.",PostgreSQL,0
recovery_target_timeline,string,"Specifies recovering into a particular timeline. The value can be a numeric timeline ID or a special value. The valuecurrentrecovers along the same timeline that was current when the base backup was taken. The valuelatestrecovers to the latest timeline found in the archive, which is useful in a standby server.latestis the default.To specify a timeline ID in hexadecimal (for example, if extracted from a WAL file name or history file), prefix it with a0x. For instance, if the WAL file name is00000011000000A10000004F, then the timeline ID is0x11(or 17 decimal).You usually only need to set this parameter in complex re-recovery situations, where you need to return to a state that itself was reached after a point-in-time recovery. SeeSection 25.3.6for discussion.",PostgreSQL,0
recovery_target_action,enum,"Specifies what action the server should take once the recovery target is reached. The default ispause, which means recovery will be paused.promotemeans the recovery process will finish and the server will start to accept connections. Finallyshutdownwill stop the server after reaching the recovery target.The intended use of thepausesetting is to allow queries to be executed against the database to check if this recovery target is the most desirable point for recovery. The paused state can be resumed by usingpg_wal_replay_resume()(seeTable 9.97), which then causes recovery to end. If this recovery target is not the desired stopping point, then shut down the server, change the recovery target settings to a later target and restart to continue recovery.Theshutdownsetting is useful to have the instance ready at the exact replay point desired. The instance will still be able to replay more WAL records (and in fact will have to replay WAL records since the last checkpoint next time it is started).Note that becauserecovery.signalwill not be removed whenrecovery_target_actionis set toshutdown, any subsequent start will end with immediate shutdown unless the configuration is changed or therecovery.signalfile is removed manually.This setting has no effect if no recovery target is set. Ifhot_standbyis not enabled, a setting ofpausewill act the same asshutdown. If the recovery target is reached while a promotion is ongoing, a setting ofpausewill act the same aspromote.In any case, if a recovery target is configured but the archive recovery ends before the target is reached, the server will shut down with a fatal error.",PostgreSQL,0
summarize_wal,boolean,"Enables the WAL summarizer process. Note that WAL summarization can be enabled either on a primary or on a standby. This parameter can only be set in thepostgresql.conffile or on the server command line. The default isoff.The server cannot be started withsummarize_wal=onifwal_levelis set tominimal. Ifsummarize_wal=onis configured after server startup whilewal_level=minimal, the summarizer will run but refuse to generate summary files for any WAL generated withwal_level=minimal.",PostgreSQL,0
wal_summary_keep_time,integer,"Configures the amount of time after which the WAL summarizer automatically removes old WAL summaries. The file timestamp is used to determine which files are old enough to remove. Typically, you should set this comfortably higher than the time that could pass between a backup and a later incremental backup that depends on it. WAL summaries must be available for the entire range of WAL records between the preceding backup and the new one being taken; if not, the incremental backup will fail. If this parameter is set to zero, WAL summaries will not be automatically deleted, but it is safe to manually remove files that you know will not be required for future incremental backups. This parameter can only be set in thepostgresql.conffile or on the server command line. If this value is specified without units, it is taken as minutes. The default is 10 days. Ifsummarize_wal = off, existing WAL summaries will not be removed regardless of the value of this parameter, because the WAL summarizer will not run.",PostgreSQL,0
max_wal_senders,integer,"Specifies the maximum number of concurrent connections from standby servers or streaming base backup clients (i.e., the maximum number of simultaneously running WAL sender processes). The default is10. The value0means replication is disabled. Abrupt disconnection of a streaming client might leave an orphaned connection slot behind until a timeout is reached, so this parameter should be set slightly higher than the maximum number of expected clients so disconnected clients can immediately reconnect. This parameter can only be set at server start. Also,wal_levelmust be set toreplicaor higher to allow connections from standby servers.When running a standby server, you must set this parameter to the same or higher value than on the primary server. Otherwise, queries will not be allowed in the standby server.",PostgreSQL,0
max_replication_slots,integer,"Specifies the maximum number of replication slots (seeSection 26.2.6) that the server can support. The default is 10. This parameter can only be set at server start. Setting it to a lower value than the number of currently existing replication slots will prevent the server from starting. Also,wal_levelmust be set toreplicaor higher to allow replication slots to be used.Note that this parameter also applies on the subscriber side, but with a different meaning.",PostgreSQL,0
wal_keep_size,integer,"Specifies the minimum size of past WAL files kept in thepg_waldirectory, in case a standby server needs to fetch them for streaming replication. If a standby server connected to the sending server falls behind by more thanwal_keep_sizemegabytes, the sending server might remove a WAL segment still needed by the standby, in which case the replication connection will be terminated. Downstream connections will also eventually fail as a result. (However, the standby server can recover by fetching the segment from archive, if WAL archiving is in use.)This sets only the minimum size of segments retained inpg_wal; the system might need to retain more segments for WAL archival or to recover from a checkpoint. Ifwal_keep_sizeis zero (the default), the system doesn't keep any extra segments for standby purposes, so the number of old WAL segments available to standby servers is a function of the location of the previous checkpoint and status of WAL archiving. If this value is specified without units, it is taken as megabytes. This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
max_slot_wal_keep_size,integer,"Specify the maximum size of WAL files thatreplication slotsare allowed to retain in thepg_waldirectory at checkpoint time. Ifmax_slot_wal_keep_sizeis -1 (the default), replication slots may retain an unlimited amount of WAL files. Otherwise, if restart_lsn of a replication slot falls behind the current LSN by more than the given size, the standby using the slot may no longer be able to continue replication due to removal of required WAL files. You can see the WAL availability of replication slots inpg_replication_slots. If this value is specified without units, it is taken as megabytes. This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
wal_sender_timeout,integer,"Terminate replication connections that are inactive for longer than this amount of time. This is useful for the sending server to detect a standby crash or network outage. If this value is specified without units, it is taken as milliseconds. The default value is 60 seconds. A value of zero disables the timeout mechanism.With a cluster distributed across multiple geographic locations, using different values per location brings more flexibility in the cluster management. A smaller value is useful for faster failure detection with a standby having a low-latency network connection, and a larger value helps in judging better the health of a standby if located on a remote location, with a high-latency network connection.",PostgreSQL,0
track_commit_timestamp,boolean,Record commit time of transactions. This parameter can only be set inpostgresql.conffile or on the server command line. The default value isoff.,PostgreSQL,0
synchronized_standby_slots,string,"A comma-separated list of streaming replication standby server slot names that logical WAL sender processes will wait for. Logical WAL sender processes will send decoded changes to plugins only after the specified replication slots confirm receiving WAL. This guarantees that logical replication failover slots do not consume changes until those changes are received and flushed to corresponding physical standbys. If a logical replication connection is meant to switch to a physical standby after the standby is promoted, the physical replication slot for the standby should be listed here. Note that logical replication will not proceed if the slots specified in thesynchronized_standby_slotsdo not exist or are invalidated. Additionally, the replication management functionspg_replication_slot_advance,pg_logical_slot_get_changes, andpg_logical_slot_peek_changes, when used with logical failover slots, will block until all physical slots specified insynchronized_standby_slotshave confirmed WAL receipt.The standbys corresponding to the physical replication slots insynchronized_standby_slotsmust configuresync_replication_slots = trueso they can receive logical failover slot changes from the primary.",PostgreSQL,0
synchronous_standby_names,string,"Specifies a list of standby servers that can supportsynchronous replication, as described inSection 26.2.8. There will be one or more active synchronous standbys; transactions waiting for commit will be allowed to proceed after these standby servers confirm receipt of their data. The synchronous standbys will be those whose names appear in this list, and that are both currently connected and streaming data in real-time (as shown by a state ofstreamingin thepg_stat_replicationview). Specifying more than one synchronous standby can allow for very high availability and protection against data loss.The name of a standby server for this purpose is theapplication_namesetting of the standby, as set in the standby's connection information. In case of a physical replication standby, this should be set in theprimary_conninfosetting; the default is the setting ofcluster_nameif set, elsewalreceiver. For logical replication, this can be set in the connection information of the subscription, and it defaults to the subscription name. For other replication stream consumers, consult their documentation.This parameter specifies a list of standby servers using either of the following syntaxes:[FIRST]num_sync(standby_name[, ...] )
ANYnum_sync(standby_name[, ...] )standby_name[, ...]wherenum_syncis the number of synchronous standbys that transactions need to wait for replies from, andstandby_nameis the name of a standby server.FIRSTandANYspecify the method to choose synchronous standbys from the listed servers.The keywordFIRST, coupled withnum_sync, specifies a priority-based synchronous replication and makes transaction commits wait until their WAL records are replicated tonum_syncsynchronous standbys chosen based on their priorities. For example, a setting ofFIRST 3 (s1, s2, s3, s4)will cause each commit to wait for replies from three higher-priority standbys chosen from standby serverss1,s2,s3ands4. The standbys whose names appear earlier in the list are given higher priority and will be considered as synchronous. Other standby servers appearing later in this list represent potential synchronous standbys. If any of the current synchronous standbys disconnects for whatever reason, it will be replaced immediately with the next-highest-priority standby. The keywordFIRSTis optional.The keywordANY, coupled withnum_sync, specifies a quorum-based synchronous replication and makes transaction commits wait until their WAL records are replicated toat leastnum_synclisted standbys. For example, a setting ofANY 3 (s1, s2, s3, s4)will cause each commit to proceed as soon as at least any three standbys ofs1,s2,s3ands4reply.FIRSTandANYare case-insensitive. If these keywords are used as the name of a standby server, itsstandby_namemust be double-quoted.The third syntax was used beforePostgreSQLversion 9.6 and is still supported. It's the same as the first syntax withFIRSTandnum_syncequal to 1. For example,FIRST 1 (s1, s2)ands1, s2have the same meaning: eithers1ors2is chosen as a synchronous standby.The special entry*matches any standby name.There is no mechanism to enforce uniqueness of standby names. In case of duplicates one of the matching standbys will be considered as higher priority, though exactly which one is indeterminate.NoteEachstandby_nameshould have the form of a valid SQL identifier, unless it is*. You can use double-quoting if necessary. But note thatstandby_names are compared to standby application names case-insensitively, whether double-quoted or not.If no synchronous standby names are specified here, then synchronous replication is not enabled and transaction commits will not wait for replication. This is the default configuration. Even when synchronous replication is enabled, individual transactions can be configured not to wait for replication by setting thesynchronous_commitparameter tolocaloroff.This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
primary_conninfo,string,"Specifies a connection string to be used for the standby server to connect with a sending server. This string is in the format described inSection 32.1.1. If any option is unspecified in this string, then the corresponding environment variable (seeSection 32.15) is checked. If the environment variable is not set either, then defaults are used.The connection string should specify the host name (or address) of the sending server, as well as the port number if it is not the same as the standby server's default. Also specify a user name corresponding to a suitably-privileged role on the sending server (seeSection 26.2.5.1). A password needs to be provided too, if the sender demands password authentication. It can be provided in theprimary_conninfostring, or in a separate~/.pgpassfile on the standby server (usereplicationas the database name).For replication slot synchronization (seeSection 47.2.3), it is also necessary to specify a validdbnamein theprimary_conninfostring. This will only be used for slot synchronization. It is ignored for streaming.This parameter can only be set in thepostgresql.conffile or on the server command line. If this parameter is changed while the WAL receiver process is running, that process is signaled to shut down and expected to restart with the new setting (except ifprimary_conninfois an empty string). This setting has no effect if the server is not in standby mode.",PostgreSQL,0
primary_slot_name,string,"Optionally specifies an existing replication slot to be used when connecting to the sending server via streaming replication to control resource removal on the upstream node (seeSection 26.2.6). This parameter can only be set in thepostgresql.conffile or on the server command line. If this parameter is changed while the WAL receiver process is running, that process is signaled to shut down and expected to restart with the new setting. This setting has no effect ifprimary_conninfois not set or the server is not in standby mode.",PostgreSQL,0
hot_standby,boolean,"Specifies whether or not you can connect and run queries during recovery, as described inSection 26.4. The default value ison. This parameter can only be set at server start. It only has effect during archive recovery or in standby mode.",PostgreSQL,0
max_standby_archive_delay,integer,"When hot standby is active, this parameter determines how long the standby server should wait before canceling standby queries that conflict with about-to-be-applied WAL entries, as described inSection 26.4.2.max_standby_archive_delayapplies when WAL data is being read from WAL archive (and is therefore not current). If this value is specified without units, it is taken as milliseconds. The default is 30 seconds. A value of -1 allows the standby to wait forever for conflicting queries to complete. This parameter can only be set in thepostgresql.conffile or on the server command line.Note thatmax_standby_archive_delayis not the same as the maximum length of time a query can run before cancellation; rather it is the maximum total time allowed to apply any one WAL segment's data. Thus, if one query has resulted in significant delay earlier in the WAL segment, subsequent conflicting queries will have much less grace time.",PostgreSQL,0
max_standby_streaming_delay,integer,"When hot standby is active, this parameter determines how long the standby server should wait before canceling standby queries that conflict with about-to-be-applied WAL entries, as described inSection 26.4.2.max_standby_streaming_delayapplies when WAL data is being received via streaming replication. If this value is specified without units, it is taken as milliseconds. The default is 30 seconds. A value of -1 allows the standby to wait forever for conflicting queries to complete. This parameter can only be set in thepostgresql.conffile or on the server command line.Note thatmax_standby_streaming_delayis not the same as the maximum length of time a query can run before cancellation; rather it is the maximum total time allowed to apply WAL data once it has been received from the primary server. Thus, if one query has resulted in significant delay, subsequent conflicting queries will have much less grace time until the standby server has caught up again.",PostgreSQL,0
wal_receiver_create_temp_slot,boolean,"Specifies whether the WAL receiver process should create a temporary replication slot on the remote instance when no permanent replication slot to use has been configured (usingprimary_slot_name). The default is off. This parameter can only be set in thepostgresql.conffile or on the server command line. If this parameter is changed while the WAL receiver process is running, that process is signaled to shut down and expected to restart with the new setting.",PostgreSQL,0
wal_receiver_status_interval,integer,"Specifies the minimum frequency for the WAL receiver process on the standby to send information about replication progress to the primary or upstream standby, where it can be seen using thepg_stat_replicationview. The standby will report the last write-ahead log location it has written, the last position it has flushed to disk, and the last position it has applied. This parameter's value is the maximum amount of time between reports. Updates are sent each time the write or flush positions change, or as often as specified by this parameter if set to a non-zero value. There are additional cases where updates are sent while ignoring this parameter; for example, when processing of the existing WAL completes or whensynchronous_commitis set toremote_apply. Thus, the apply position may lag slightly behind the true position. If this value is specified without units, it is taken as seconds. The default value is 10 seconds. This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
hot_standby_feedback,boolean,"Specifies whether or not a hot standby will send feedback to the primary or upstream standby about queries currently executing on the standby. This parameter can be used to eliminate query cancels caused by cleanup records, but can cause database bloat on the primary for some workloads. Feedback messages will not be sent more frequently than once perwal_receiver_status_interval. The default value isoff. This parameter can only be set in thepostgresql.conffile or on the server command line.If cascaded replication is in use the feedback is passed upstream until it eventually reaches the primary. Standbys make no other use of feedback they receive other than to pass upstream.",PostgreSQL,0
wal_receiver_timeout,integer,"Terminate replication connections that are inactive for longer than this amount of time. This is useful for the receiving standby server to detect a primary node crash or network outage. If this value is specified without units, it is taken as milliseconds. The default value is 60 seconds. A value of zero disables the timeout mechanism. This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
wal_retrieve_retry_interval,integer,"Specifies how long the standby server should wait when WAL data is not available from any sources (streaming replication, localpg_walor WAL archive) before trying again to retrieve WAL data. If this value is specified without units, it is taken as milliseconds. The default value is 5 seconds. This parameter can only be set in thepostgresql.conffile or on the server command line.This parameter is useful in configurations where a node in recovery needs to control the amount of time to wait for new WAL data to be available. For example, in archive recovery, it is possible to make the recovery more responsive in the detection of a new WAL file by reducing the value of this parameter. On a system with low WAL activity, increasing it reduces the amount of requests necessary to access WAL archives, something useful for example in cloud environments where the number of times an infrastructure is accessed is taken into account.In logical replication, this parameter also limits how often a failing replication apply worker will be respawned.",PostgreSQL,0
recovery_min_apply_delay,integer,"By default, a standby server restores WAL records from the sending server as soon as possible. It may be useful to have a time-delayed copy of the data, offering opportunities to correct data loss errors. This parameter allows you to delay recovery by a specified amount of time. For example, if you set this parameter to5min, the standby will replay each transaction commit only when the system time on the standby is at least five minutes past the commit time reported by the primary. If this value is specified without units, it is taken as milliseconds. The default is zero, adding no delay.It is possible that the replication delay between servers exceeds the value of this parameter, in which case no delay is added. Note that the delay is calculated between the WAL time stamp as written on primary and the current time on the standby. Delays in transfer because of network lag or cascading replication configurations may reduce the actual wait time significantly. If the system clocks on primary and standby are not synchronized, this may lead to recovery applying records earlier than expected; but that is not a major issue because useful settings of this parameter are much larger than typical time deviations between servers.The delay occurs only on WAL records for transaction commits. Other records are replayed as quickly as possible, which is not a problem because MVCC visibility rules ensure their effects are not visible until the corresponding commit record is applied.The delay occurs once the database in recovery has reached a consistent state, until the standby is promoted or triggered. After that the standby will end recovery without further waiting.WAL records must be kept on the standby until they are ready to be applied. Therefore, longer delays will result in a greater accumulation of WAL files, increasing disk space requirements for the standby'spg_waldirectory.This parameter is intended for use with streaming replication deployments; however, if the parameter is specified it will be honored in all cases except crash recovery.hot_standby_feedbackwill be delayed by use of this feature which could lead to bloat on the primary; use both together with care.WarningSynchronous replication is affected by this setting whensynchronous_commitis set toremote_apply; everyCOMMITwill need to wait to be applied.This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
sync_replication_slots,boolean,It enables a physical standby to synchronize logical failover slots from the primary server so that logical subscribers can resume replication from the new primary server after failover.It is disabled by default. This parameter can only be set in thepostgresql.conffile or on the server command line.,PostgreSQL,0
max_replication_slots,integer,"Specifies how many replication origins (seeChapter 48) can be tracked simultaneously, effectively limiting how many logical replication subscriptions can be created on the server. Setting it to a lower value than the current number of tracked replication origins (reflected inpg_replication_origin_status) will prevent the server from starting.max_replication_slotsmust be set to at least the number of subscriptions that will be added to the subscriber, plus some reserve for table synchronization.Note that this parameter also applies on a sending server, but with a different meaning.",PostgreSQL,0
max_logical_replication_workers,integer,"Specifies maximum number of logical replication workers. This includes leader apply workers, parallel apply workers, and table synchronization workers.Logical replication workers are taken from the pool defined bymax_worker_processes.The default value is 4. This parameter can only be set at server start.",PostgreSQL,0
max_sync_workers_per_subscription,integer,"Maximum number of synchronization workers per subscription. This parameter controls the amount of parallelism of the initial data copy during the subscription initialization or when new tables are added.Currently, there can be only one synchronization worker per table.The synchronization workers are taken from the pool defined bymax_logical_replication_workers.The default value is 2. This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
max_parallel_apply_workers_per_subscription,integer,Maximum number of parallel apply workers per subscription. This parameter controls the amount of parallelism for streaming of in-progress transactions with subscription parameterstreaming = parallel.The parallel apply workers are taken from the pool defined bymax_logical_replication_workers.The default value is 2. This parameter can only be set in thepostgresql.conffile or on the server command line.,PostgreSQL,0
enable_async_append,boolean,Enables or disables the query planner's use of async-aware append plan types. The default ison.,PostgreSQL,0
enable_bitmapscan,boolean,Enables or disables the query planner's use of bitmap-scan plan types. The default ison.,PostgreSQL,0
enable_gathermerge,boolean,Enables or disables the query planner's use of gather merge plan types. The default ison.,PostgreSQL,0
enable_group_by_reordering,boolean,"Controls if the query planner will produce a plan which will provideGROUP BYkeys sorted in the order of keys of a child node of the plan, such as an index scan. When disabled, the query planner will produce a plan withGROUP BYkeys only sorted to match theORDER BYclause, if any. When enabled, the planner will try to produce a more efficient plan. The default value ison.",PostgreSQL,0
enable_hashagg,boolean,Enables or disables the query planner's use of hashed aggregation plan types. The default ison.,PostgreSQL,0
enable_hashjoin,boolean,Enables or disables the query planner's use of hash-join plan types. The default ison.,PostgreSQL,0
enable_incremental_sort,boolean,Enables or disables the query planner's use of incremental sort steps. The default ison.,PostgreSQL,0
enable_indexscan,boolean,Enables or disables the query planner's use of index-scan and index-only-scan plan types. The default ison. Also seeenable_indexonlyscan.,PostgreSQL,0
enable_indexonlyscan,boolean,Enables or disables the query planner's use of index-only-scan plan types (seeSection 11.9). The default ison. Theenable_indexscansetting must also be enabled to have the query planner consider index-only-scans.,PostgreSQL,0
enable_material,boolean,"Enables or disables the query planner's use of materialization. It is impossible to suppress materialization entirely, but turning this variable off prevents the planner from inserting materialize nodes except in cases where it is required for correctness. The default ison.",PostgreSQL,0
enable_memoize,boolean,Enables or disables the query planner's use of memoize plans for caching results from parameterized scans inside nested-loop joins. This plan type allows scans to the underlying plans to be skipped when the results for the current parameters are already in the cache. Less commonly looked up results may be evicted from the cache when more space is required for new entries. The default ison.,PostgreSQL,0
enable_mergejoin,boolean,Enables or disables the query planner's use of merge-join plan types. The default ison.,PostgreSQL,0
enable_nestloop,boolean,"Enables or disables the query planner's use of nested-loop join plans. It is impossible to suppress nested-loop joins entirely, but turning this variable off discourages the planner from using one if there are other methods available. The default ison.",PostgreSQL,0
enable_parallel_append,boolean,Enables or disables the query planner's use of parallel-aware append plan types. The default ison.,PostgreSQL,0
enable_parallel_hash,boolean,Enables or disables the query planner's use of hash-join plan types with parallel hash. Has no effect if hash-join plans are not also enabled. The default ison.,PostgreSQL,0
enable_partition_pruning,boolean,Enables or disables the query planner's ability to eliminate a partitioned table's partitions from query plans. This also controls the planner's ability to generate query plans which allow the query executor to remove (ignore) partitions during query execution. The default ison. SeeSection 5.12.4for details.,PostgreSQL,0
enable_partitionwise_join,boolean,"Enables or disables the query planner's use of partitionwise join, which allows a join between partitioned tables to be performed by joining the matching partitions. Partitionwise join currently applies only when the join conditions include all the partition keys, which must be of the same data type and have one-to-one matching sets of child partitions. With this setting enabled, the number of nodes whose memory usage is restricted bywork_memappearing in the final plan can increase linearly according to the number of partitions being scanned. This can result in a large increase in overall memory consumption during the execution of the query. Query planning also becomes significantly more expensive in terms of memory and CPU. The default value isoff.",PostgreSQL,0
enable_partitionwise_aggregate,boolean,"Enables or disables the query planner's use of partitionwise grouping or aggregation, which allows grouping or aggregation on partitioned tables to be performed separately for each partition. If theGROUP BYclause does not include the partition keys, only partial aggregation can be performed on a per-partition basis, and finalization must be performed later. With this setting enabled, the number of nodes whose memory usage is restricted bywork_memappearing in the final plan can increase linearly according to the number of partitions being scanned. This can result in a large increase in overall memory consumption during the execution of the query. Query planning also becomes significantly more expensive in terms of memory and CPU. The default value isoff.",PostgreSQL,0
enable_presorted_aggregate,boolean,"Controls if the query planner will produce a plan which will provide rows which are presorted in the order required for the query'sORDER BY/DISTINCTaggregate functions. When disabled, the query planner will produce a plan which will always require the executor to perform a sort before performing aggregation of each aggregate function containing anORDER BYorDISTINCTclause. When enabled, the planner will try to produce a more efficient plan which provides input to the aggregate functions which is presorted in the order they require for aggregation. The default value ison.",PostgreSQL,0
enable_seqscan,boolean,"Enables or disables the query planner's use of sequential scan plan types. It is impossible to suppress sequential scans entirely, but turning this variable off discourages the planner from using one if there are other methods available. The default ison.",PostgreSQL,0
enable_sort,boolean,"Enables or disables the query planner's use of explicit sort steps. It is impossible to suppress explicit sorts entirely, but turning this variable off discourages the planner from using one if there are other methods available. The default ison.",PostgreSQL,0
enable_tidscan,boolean,Enables or disables the query planner's use ofTIDscan plan types. The default ison.,PostgreSQL,0
seq_page_cost,floating point,Sets the planner's estimate of the cost of a disk page fetch that is part of a series of sequential fetches. The default is 1.0. This value can be overridden for tables and indexes in a particular tablespace by setting the tablespace parameter of the same name (seeALTER TABLESPACE).,PostgreSQL,0
random_page_cost,floating point,"Sets the planner's estimate of the cost of a non-sequentially-fetched disk page. The default is 4.0. This value can be overridden for tables and indexes in a particular tablespace by setting the tablespace parameter of the same name (seeALTER TABLESPACE).Reducing this value relative toseq_page_costwill cause the system to prefer index scans; raising it will make index scans look relatively more expensive. You can raise or lower both values together to change the importance of disk I/O costs relative to CPU costs, which are described by the following parameters.Random access to mechanical disk storage is normally much more expensive than four times sequential access. However, a lower default is used (4.0) because the majority of random accesses to disk, such as indexed reads, are assumed to be in cache. The default value can be thought of as modeling random access as 40 times slower than sequential, while expecting 90% of random reads to be cached.If you believe a 90% cache rate is an incorrect assumption for your workload, you can increase random_page_cost to better reflect the true cost of random storage reads. Correspondingly, if your data is likely to be completely in cache, such as when the database is smaller than the total server memory, decreasing random_page_cost can be appropriate. Storage that has a low random read cost relative to sequential, e.g., solid-state drives, might also be better modeled with a lower value for random_page_cost, e.g.,1.1.TipAlthough the system will let you setrandom_page_costto less thanseq_page_cost, it is not physically sensible to do so. However, setting them equal makes sense if the database is entirely cached in RAM, since in that case there is no penalty for touching pages out of sequence. Also, in a heavily-cached database you should lower both values relative to the CPU parameters, since the cost of fetching a page already in RAM is much smaller than it would normally be.",PostgreSQL,0
cpu_tuple_cost,floating point,Sets the planner's estimate of the cost of processing each row during a query. The default is 0.01.,PostgreSQL,0
cpu_index_tuple_cost,floating point,Sets the planner's estimate of the cost of processing each index entry during an index scan. The default is 0.005.,PostgreSQL,0
cpu_operator_cost,floating point,Sets the planner's estimate of the cost of processing each operator or function executed during a query. The default is 0.0025.,PostgreSQL,0
parallel_setup_cost,floating point,Sets the planner's estimate of the cost of launching parallel worker processes. The default is 1000.,PostgreSQL,0
parallel_tuple_cost,floating point,Sets the planner's estimate of the cost of transferring one tuple from a parallel worker process to another process. The default is 0.1.,PostgreSQL,0
min_parallel_table_scan_size,integer,"Sets the minimum amount of table data that must be scanned in order for a parallel scan to be considered. For a parallel sequential scan, the amount of table data scanned is always equal to the size of the table, but when indexes are used the amount of table data scanned will normally be less. If this value is specified without units, it is taken as blocks, that isBLCKSZbytes, typically 8kB. The default is 8 megabytes (8MB).",PostgreSQL,0
min_parallel_index_scan_size,integer,"Sets the minimum amount of index data that must be scanned in order for a parallel scan to be considered. Note that a parallel index scan typically won't touch the entire index; it is the number of pages which the planner believes will actually be touched by the scan which is relevant. This parameter is also used to decide whether a particular index can participate in a parallel vacuum. SeeVACUUM. If this value is specified without units, it is taken as blocks, that isBLCKSZbytes, typically 8kB. The default is 512 kilobytes (512kB).",PostgreSQL,0
effective_cache_size,integer,"Sets the planner's assumption about the effective size of the disk cache that is available to a single query. This is factored into estimates of the cost of using an index; a higher value makes it more likely index scans will be used, a lower value makes it more likely sequential scans will be used. When setting this parameter you should consider bothPostgreSQL's shared buffers and the portion of the kernel's disk cache that will be used forPostgreSQLdata files, though some data might exist in both places. Also, take into account the expected number of concurrent queries on different tables, since they will have to share the available space. This parameter has no effect on the size of shared memory allocated byPostgreSQL, nor does it reserve kernel disk cache; it is used only for estimation purposes. The system also does not assume data remains in the disk cache between queries. If this value is specified without units, it is taken as blocks, that isBLCKSZbytes, typically 8kB. The default is 4 gigabytes (4GB). (IfBLCKSZis not 8kB, the default value scales proportionally to it.)",PostgreSQL,0
jit_above_cost,floating point,"Sets the query cost above which JIT compilation is activated, if enabled (seeChapter 30). PerformingJITcosts planning time but can accelerate query execution. Setting this to-1disables JIT compilation. The default is100000.",PostgreSQL,0
jit_inline_above_cost,floating point,"Sets the query cost above which JIT compilation attempts to inline functions and operators. Inlining adds planning time, but can improve execution speed. It is not meaningful to set this to less thanjit_above_cost. Setting this to-1disables inlining. The default is500000.",PostgreSQL,0
jit_optimize_above_cost,floating point,"Sets the query cost above which JIT compilation applies expensive optimizations. Such optimization adds planning time, but can improve execution speed. It is not meaningful to set this to less thanjit_above_cost, and it is unlikely to be beneficial to set it to more thanjit_inline_above_cost. Setting this to-1disables expensive optimizations. The default is500000.",PostgreSQL,0
geqo,boolean,Enables or disables genetic query optimization. This is on by default. It is usually best not to turn it off in production; thegeqo_thresholdvariable provides more granular control of GEQO.,PostgreSQL,0
geqo_threshold,integer,"Use genetic query optimization to plan queries with at least this manyFROMitems involved. (Note that aFULL OUTER JOINconstruct counts as only oneFROMitem.) The default is 12. For simpler queries it is usually best to use the regular, exhaustive-search planner, but for queries with many tables the exhaustive search takes too long, often longer than the penalty of executing a suboptimal plan. Thus, a threshold on the size of the query is a convenient way to manage use of GEQO.",PostgreSQL,0
geqo_effort,integer,"Controls the trade-off between planning time and query plan quality in GEQO. This variable must be an integer in the range from 1 to 10. The default value is five. Larger values increase the time spent doing query planning, but also increase the likelihood that an efficient query plan will be chosen.geqo_effortdoesn't actually do anything directly; it is only used to compute the default values for the other variables that influence GEQO behavior (described below). If you prefer, you can set the other parameters by hand instead.",PostgreSQL,0
geqo_pool_size,integer,"Controls the pool size used by GEQO, that is the number of individuals in the genetic population. It must be at least two, and useful values are typically 100 to 1000. If it is set to zero (the default setting) then a suitable value is chosen based ongeqo_effortand the number of tables in the query.",PostgreSQL,0
geqo_generations,integer,"Controls the number of generations used by GEQO, that is the number of iterations of the algorithm. It must be at least one, and useful values are in the same range as the pool size. If it is set to zero (the default setting) then a suitable value is chosen based ongeqo_pool_size.",PostgreSQL,0
geqo_selection_bias,floating point,Controls the selection bias used by GEQO. The selection bias is the selective pressure within the population. Values can be from 1.50 to 2.00; the latter is the default.,PostgreSQL,0
geqo_seed,floating point,"Controls the initial value of the random number generator used by GEQO to select random paths through the join order search space. The value can range from zero (the default) to one. Varying the value changes the set of join paths explored, and may result in a better or worse best path being found.",PostgreSQL,0
default_statistics_target,integer,"Sets the default statistics target for table columns without a column-specific target set viaALTER TABLE SET STATISTICS. Larger values increase the time needed to doANALYZE, but might improve the quality of the planner's estimates. The default is 100. For more information on the use of statistics by thePostgreSQLquery planner, refer toSection 14.2.",PostgreSQL,0
constraint_exclusion,enum,"Controls the query planner's use of table constraints to optimize queries. The allowed values ofconstraint_exclusionareon(examine constraints for all tables),off(never examine constraints), andpartition(examine constraints only for inheritance child tables andUNION ALLsubqueries).partitionis the default setting. It is often used with traditional inheritance trees to improve performance.When this parameter allows it for a particular table, the planner compares query conditions with the table'sCHECKconstraints, and omits scanning tables for which the conditions contradict the constraints. For example:CREATE TABLE parent(key integer, ...);
CREATE TABLE child1000(check (key between 1000 and 1999)) INHERITS(parent);
CREATE TABLE child2000(check (key between 2000 and 2999)) INHERITS(parent);
...
SELECT * FROM parent WHERE key = 2400;With constraint exclusion enabled, thisSELECTwill not scanchild1000at all, improving performance.Currently, constraint exclusion is enabled by default only for cases that are often used to implement table partitioning via inheritance trees. Turning it on for all tables imposes extra planning overhead that is quite noticeable on simple queries, and most often will yield no benefit for simple queries. If you have no tables that are partitioned using traditional inheritance, you might prefer to turn it off entirely. (Note that the equivalent feature for partitioned tables is controlled by a separate parameter,enable_partition_pruning.)Refer toSection 5.12.5for more information on using constraint exclusion to implement partitioning.",PostgreSQL,0
cursor_tuple_fraction,floating point,"Sets the planner's estimate of the fraction of a cursor's rows that will be retrieved. The default is 0.1. Smaller values of this setting bias the planner towards using“fast start”plans for cursors, which will retrieve the first few rows quickly while perhaps taking a long time to fetch all rows. Larger values put more emphasis on the total estimated time. At the maximum setting of 1.0, cursors are planned exactly like regular queries, considering only the total estimated time and not how soon the first rows might be delivered.",PostgreSQL,0
from_collapse_limit,integer,"The planner will merge sub-queries into upper queries if the resultingFROMlist would have no more than this many items. Smaller values reduce planning time but might yield inferior query plans. The default is eight. For more information seeSection 14.3.Setting this value togeqo_thresholdor more may trigger use of the GEQO planner, resulting in non-optimal plans. SeeSection 19.7.3.",PostgreSQL,0
jit,boolean,"Determines whetherJITcompilation may be used byPostgreSQL, if available (seeChapter 30). The default ison.",PostgreSQL,0
join_collapse_limit,integer,"The planner will rewrite explicitJOINconstructs (exceptFULL JOINs) into lists ofFROMitems whenever a list of no more than this many items would result. Smaller values reduce planning time but might yield inferior query plans.By default, this variable is set the same asfrom_collapse_limit, which is appropriate for most uses. Setting it to 1 prevents any reordering of explicitJOINs. Thus, the explicit join order specified in the query will be the actual order in which the relations are joined. Because the query planner does not always choose the optimal join order, advanced users can elect to temporarily set this variable to 1, and then specify the join order they desire explicitly. For more information seeSection 14.3.Setting this value togeqo_thresholdor more may trigger use of the GEQO planner, resulting in non-optimal plans. SeeSection 19.7.3.",PostgreSQL,0
plan_cache_mode,enum,"Prepared statements (either explicitly prepared or implicitly generated, for example by PL/pgSQL) can be executed using custom or generic plans. Custom plans are made afresh for each execution using its specific set of parameter values, while generic plans do not rely on the parameter values and can be re-used across executions. Thus, use of a generic plan saves planning time, but if the ideal plan depends strongly on the parameter values then a generic plan may be inefficient. The choice between these options is normally made automatically, but it can be overridden withplan_cache_mode. The allowed values areauto(the default),force_custom_planandforce_generic_plan. This setting is considered when a cached plan is to be executed, not when it is prepared. For more information seePREPARE.",PostgreSQL,0
recursive_worktable_factor,floating point,"Sets the planner's estimate of the average size of the working table of arecursive query, as a multiple of the estimated size of the initial non-recursive term of the query. This helps the planner choose the most appropriate method for joining the working table to the query's other tables. The default value is10.0. A smaller value such as1.0can be helpful when the recursion has low“fan-out”from one step to the next, as for example in shortest-path queries. Graph analytics queries may benefit from larger-than-default values.",PostgreSQL,0
log_destination,string,"PostgreSQLsupports several methods for logging server messages, includingstderr,csvlog,jsonlog, andsyslog. On Windows,eventlogis also supported. Set this parameter to a list of desired log destinations separated by commas. The default is to log tostderronly. This parameter can only be set in thepostgresql.conffile or on the server command line.Ifcsvlogis included inlog_destination, log entries are output in“comma separated value”(CSV) format, which is convenient for loading logs into programs. SeeSection 19.8.4for details.logging_collectormust be enabled to generate CSV-format log output.Ifjsonlogis included inlog_destination, log entries are output inJSONformat, which is convenient for loading logs into programs. SeeSection 19.8.5for details.logging_collectormust be enabled to generate JSON-format log output.When eitherstderr,csvlogorjsonlogare included, the filecurrent_logfilesis created to record the location of the log file(s) currently in use by the logging collector and the associated logging destination. This provides a convenient way to find the logs currently in use by the instance. Here is an example of this file's content:stderr log/postgresql.log
csvlog log/postgresql.csv
jsonlog log/postgresql.jsoncurrent_logfilesis recreated when a new log file is created as an effect of rotation, and whenlog_destinationis reloaded. It is removed when none ofstderr,csvlogorjsonlogare included inlog_destination, and when the logging collector is disabled.NoteOn most Unix systems, you will need to alter the configuration of your system'ssyslogdaemon in order to make use of thesyslogoption forlog_destination.PostgreSQLcan log tosyslogfacilitiesLOCAL0throughLOCAL7(seesyslog_facility), but the defaultsyslogconfiguration on most platforms will discard all such messages. You will need to add something like:local0.*    /var/log/postgresqlto thesyslogdaemon's configuration file to make it work.On Windows, when you use theeventlogoption forlog_destination, you should register an event source and its library with the operating system so that the Windows Event Viewer can display event log messages cleanly. SeeSection 18.12for details.",PostgreSQL,0
logging_collector,boolean,"This parameter enables thelogging collector, which is a background process that captures log messages sent tostderrand redirects them into log files. This approach is often more useful than logging tosyslog, since some types of messages might not appear insyslogoutput. (One common example is dynamic-linker failure messages; another is error messages produced by scripts such asarchive_command.) This parameter can only be set at server start.NoteIt is possible to log tostderrwithout using the logging collector; the log messages will just go to wherever the server'sstderris directed. However, that method is only suitable for low log volumes, since it provides no convenient way to rotate log files. Also, on some platforms not using the logging collector can result in lost or garbled log output, because multiple processes writing concurrently to the same log file can overwrite each other's output.NoteThe logging collector is designed to never lose messages. This means that in case of extremely high load, server processes could be blocked while trying to send additional log messages when the collector has fallen behind. In contrast,syslogprefers to drop messages if it cannot write them, which means it may fail to log some messages in such cases but it will not block the rest of the system.",PostgreSQL,0
log_directory,string,"Whenlogging_collectoris enabled, this parameter determines the directory in which log files will be created. It can be specified as an absolute path, or relative to the cluster data directory. This parameter can only be set in thepostgresql.conffile or on the server command line. The default islog.",PostgreSQL,0
log_filename,string,"Whenlogging_collectoris enabled, this parameter sets the file names of the created log files. The value is treated as astrftimepattern, so%-escapes can be used to specify time-varying file names. (Note that if there are any time-zone-dependent%-escapes, the computation is done in the zone specified bylog_timezone.) The supported%-escapes are similar to those listed in the Open Group'sstrftimespecification. Note that the system'sstrftimeis not used directly, so platform-specific (nonstandard) extensions do not work. The default ispostgresql-%Y-%m-%d_%H%M%S.log.If you specify a file name without escapes, you should plan to use a log rotation utility to avoid eventually filling the entire disk. In releases prior to 8.4, if no%escapes were present,PostgreSQLwould append the epoch of the new log file's creation time, but this is no longer the case.If CSV-format output is enabled inlog_destination,.csvwill be appended to the timestamped log file name to create the file name for CSV-format output. (Iflog_filenameends in.log, the suffix is replaced instead.)If JSON-format output is enabled inlog_destination,.jsonwill be appended to the timestamped log file name to create the file name for JSON-format output. (Iflog_filenameends in.log, the suffix is replaced instead.)This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
log_file_mode,integer,"On Unix systems this parameter sets the permissions for log files whenlogging_collectoris enabled. (On Microsoft Windows this parameter is ignored.) The parameter value is expected to be a numeric mode specified in the format accepted by thechmodandumasksystem calls. (To use the customary octal format the number must start with a0(zero).)The default permissions are0600, meaning only the server owner can read or write the log files. The other commonly useful setting is0640, allowing members of the owner's group to read the files. Note however that to make use of such a setting, you'll need to alterlog_directoryto store the files somewhere outside the cluster data directory. In any case, it's unwise to make the log files world-readable, since they might contain sensitive data.This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
log_rotation_age,integer,"Whenlogging_collectoris enabled, this parameter determines the maximum amount of time to use an individual log file, after which a new log file will be created. If this value is specified without units, it is taken as minutes. The default is 24 hours. Set to zero to disable time-based creation of new log files. This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
log_rotation_size,integer,"Whenlogging_collectoris enabled, this parameter determines the maximum size of an individual log file. After this amount of data has been emitted into a log file, a new log file will be created. If this value is specified without units, it is taken as kilobytes. The default is 10 megabytes. Set to zero to disable size-based creation of new log files. This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
log_truncate_on_rotation,boolean,"Whenlogging_collectoris enabled, this parameter will causePostgreSQLto truncate (overwrite), rather than append to, any existing log file of the same name. However, truncation will occur only when a new file is being opened due to time-based rotation, not during server startup or size-based rotation. When off, pre-existing files will be appended to in all cases. For example, using this setting in combination with alog_filenamelikepostgresql-%H.logwould result in generating twenty-four hourly log files and then cyclically overwriting them. This parameter can only be set in thepostgresql.conffile or on the server command line.Example: To keep 7 days of logs, one log file per day namedserver_log.Mon,server_log.Tue, etc., and automatically overwrite last week's log with this week's log, setlog_filenametoserver_log.%a,log_truncate_on_rotationtoon, andlog_rotation_ageto1440.Example: To keep 24 hours of logs, one log file per hour, but also rotate sooner if the log file size exceeds 1GB, setlog_filenametoserver_log.%H%M,log_truncate_on_rotationtoon,log_rotation_ageto60, andlog_rotation_sizeto1000000. Including%Minlog_filenameallows any size-driven rotations that might occur to select a file name different from the hour's initial file name.",PostgreSQL,0
syslog_facility,enum,"When logging tosyslogis enabled, this parameter determines thesyslog“facility”to be used. You can choose fromLOCAL0,LOCAL1,LOCAL2,LOCAL3,LOCAL4,LOCAL5,LOCAL6,LOCAL7; the default isLOCAL0. See also the documentation of your system'ssyslogdaemon. This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
syslog_ident,string,"When logging tosyslogis enabled, this parameter determines the program name used to identifyPostgreSQLmessages insysloglogs. The default ispostgres. This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
syslog_sequence_numbers,boolean,"When logging tosyslogand this is on (the default), then each message will be prefixed by an increasing sequence number (such as[2]). This circumvents the“--- last message repeated N times ---”suppression that many syslog implementations perform by default. In more modern syslog implementations, repeated message suppression can be configured (for example,$RepeatedMsgReductioninrsyslog), so this might not be necessary. Also, you could turn this off if you actually want to suppress repeated messages.This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
syslog_split_messages,boolean,"When logging tosyslogis enabled, this parameter determines how messages are delivered to syslog. When on (the default), messages are split by lines, and long lines are split so that they will fit into 1024 bytes, which is a typical size limit for traditional syslog implementations. When off, PostgreSQL server log messages are delivered to the syslog service as is, and it is up to the syslog service to cope with the potentially bulky messages.If syslog is ultimately logging to a text file, then the effect will be the same either way, and it is best to leave the setting on, since most syslog implementations either cannot handle large messages or would need to be specially configured to handle them. But if syslog is ultimately writing into some other medium, it might be necessary or more useful to keep messages logically together.This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
event_source,string,"When logging toevent logis enabled, this parameter determines the program name used to identifyPostgreSQLmessages in the log. The default isPostgreSQL. This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
log_min_messages,enum,"Controls whichmessage levelsare written to the server log. Valid values areDEBUG5,DEBUG4,DEBUG3,DEBUG2,DEBUG1,INFO,NOTICE,WARNING,ERROR,LOG,FATAL, andPANIC. Each level includes all the levels that follow it. The later the level, the fewer messages are sent to the log. The default isWARNING. Note thatLOGhas a different rank here than inclient_min_messages. Only superusers and users with the appropriateSETprivilege can change this setting.",PostgreSQL,0
log_min_error_statement,enum,"Controls which SQL statements that cause an error condition are recorded in the server log. The current SQL statement is included in the log entry for any message of the specifiedseverityor higher. Valid values areDEBUG5,DEBUG4,DEBUG3,DEBUG2,DEBUG1,INFO,NOTICE,WARNING,ERROR,LOG,FATAL, andPANIC. The default isERROR, which means statements causing errors, log messages, fatal errors, or panics will be logged. To effectively turn off logging of failing statements, set this parameter toPANIC. Only superusers and users with the appropriateSETprivilege can change this setting.",PostgreSQL,0
log_min_duration_statement,integer,"Causes the duration of each completed statement to be logged if the statement ran for at least the specified amount of time. For example, if you set it to250msthen all SQL statements that run 250ms or longer will be logged. Enabling this parameter can be helpful in tracking down unoptimized queries in your applications. If this value is specified without units, it is taken as milliseconds. Setting this to zero prints all statement durations.-1(the default) disables logging statement durations. Only superusers and users with the appropriateSETprivilege can change this setting.This overrideslog_min_duration_sample, meaning that queries with duration exceeding this setting are not subject to sampling and are always logged.For clients using extended query protocol, durations of the Parse, Bind, and Execute steps are logged independently.NoteWhen using this option together withlog_statement, the text of statements that are logged because oflog_statementwill not be repeated in the duration log message. If you are not usingsyslog, it is recommended that you log the PID or session ID usinglog_line_prefixso that you can link the statement message to the later duration message using the process ID or session ID.",PostgreSQL,0
log_min_duration_sample,integer,"Allows sampling the duration of completed statements that ran for at least the specified amount of time. This produces the same kind of log entries aslog_min_duration_statement, but only for a subset of the executed statements, with sample rate controlled bylog_statement_sample_rate. For example, if you set it to100msthen all SQL statements that run 100ms or longer will be considered for sampling. Enabling this parameter can be helpful when the traffic is too high to log all queries. If this value is specified without units, it is taken as milliseconds. Setting this to zero samples all statement durations.-1(the default) disables sampling statement durations. Only superusers and users with the appropriateSETprivilege can change this setting.This setting has lower priority thanlog_min_duration_statement, meaning that statements with durations exceedinglog_min_duration_statementare not subject to sampling and are always logged.Other notes forlog_min_duration_statementapply also to this setting.",PostgreSQL,0
log_statement_sample_rate,floating point,"Determines the fraction of statements with duration exceedinglog_min_duration_samplethat will be logged. Sampling is stochastic, for example0.5means there is statistically one chance in two that any given statement will be logged. The default is1.0, meaning to log all sampled statements. Setting this to zero disables sampled statement-duration logging, the same as settinglog_min_duration_sampleto-1. Only superusers and users with the appropriateSETprivilege can change this setting.",PostgreSQL,0
log_transaction_sample_rate,floating point,"Sets the fraction of transactions whose statements are all logged, in addition to statements logged for other reasons. It applies to each new transaction regardless of its statements' durations. Sampling is stochastic, for example0.1means there is statistically one chance in ten that any given transaction will be logged.log_transaction_sample_ratecan be helpful to construct a sample of transactions. The default is0, meaning not to log statements from any additional transactions. Setting this to1logs all statements of all transactions. Only superusers and users with the appropriateSETprivilege can change this setting.NoteLike all statement-logging options, this option can add significant overhead.",PostgreSQL,0
log_startup_progress_interval,integer,"Sets the amount of time after which the startup process will log a message about a long-running operation that is still in progress, as well as the interval between further progress messages for that operation. The default is 10 seconds. A setting of0disables the feature. If this value is specified without units, it is taken as milliseconds. This setting is applied separately to each operation. This parameter can only be set in thepostgresql.conffile or on the server command line.For example, if syncing the data directory takes 25 seconds and thereafter resetting unlogged relations takes 8 seconds, and if this setting has the default value of 10 seconds, then a messages will be logged for syncing the data directory after it has been in progress for 10 seconds and again after it has been in progress for 20 seconds, but nothing will be logged for resetting unlogged relations.",PostgreSQL,0
application_name,string,Theapplication_namecan be any string of less thanNAMEDATALENcharacters (64 characters in a standard build). It is typically set by an application upon connection to the server. The name will be displayed in thepg_stat_activityview and included in CSV log entries. It can also be included in regular log entries via thelog_line_prefixparameter. Only printable ASCII characters may be used in theapplication_namevalue. Other characters are replaced withC-style hexadecimal escapes.,PostgreSQL,0
debug_print_parse,boolean,"These parameters enable various debugging output to be emitted. When set, they print the resulting parse tree, the query rewriter output, or the execution plan for each executed query. These messages are emitted atLOGmessage level, so by default they will appear in the server log but will not be sent to the client. You can change that by adjustingclient_min_messagesand/orlog_min_messages. These parameters are off by default.",PostgreSQL,0
debug_pretty_print,boolean,"When set,debug_pretty_printindents the messages produced bydebug_print_parse,debug_print_rewritten, ordebug_print_plan. This results in more readable but much longer output than the“compact”format used when it is off. It is on by default.",PostgreSQL,0
log_autovacuum_min_duration,integer,"Causes each action executed by autovacuum to be logged if it ran for at least the specified amount of time. Setting this to zero logs all autovacuum actions.-1disables logging autovacuum actions. If this value is specified without units, it is taken as milliseconds. For example, if you set this to250msthen all automatic vacuums and analyzes that run 250ms or longer will be logged. In addition, when this parameter is set to any value other than-1, a message will be logged if an autovacuum action is skipped due to a conflicting lock or a concurrently dropped relation. The default is10min. Enabling this parameter can be helpful in tracking autovacuum activity. This parameter can only be set in thepostgresql.conffile or on the server command line; but the setting can be overridden for individual tables by changing table storage parameters.",PostgreSQL,0
log_checkpoints,boolean,"Causes checkpoints and restartpoints to be logged in the server log. Some statistics are included in the log messages, including the number of buffers written and the time spent writing them. This parameter can only be set in thepostgresql.conffile or on the server command line. The default is on.",PostgreSQL,0
log_connections,boolean,"Causes each attempted connection to the server to be logged, as well as successful completion of both client authentication (if necessary) and authorization. Only superusers and users with the appropriateSETprivilege can change this parameter at session start, and it cannot be changed at all within a session. The default isoff.NoteSome client programs, likepsql, attempt to connect twice while determining if a password is required, so duplicate“connection received”messages do not necessarily indicate a problem.",PostgreSQL,0
log_disconnections,boolean,"Causes session terminations to be logged. The log output provides information similar tolog_connections, plus the duration of the session. Only superusers and users with the appropriateSETprivilege can change this parameter at session start, and it cannot be changed at all within a session. The default isoff.",PostgreSQL,0
log_duration,boolean,"Causes the duration of every completed statement to be logged. The default isoff. Only superusers and users with the appropriateSETprivilege can change this setting.For clients using extended query protocol, durations of the Parse, Bind, and Execute steps are logged independently.NoteThe difference between enablinglog_durationand settinglog_min_duration_statementto zero is that exceedinglog_min_duration_statementforces the text of the query to be logged, but this option doesn't. Thus, iflog_durationisonandlog_min_duration_statementhas a positive value, all durations are logged but the query text is included only for statements exceeding the threshold. This behavior can be useful for gathering statistics in high-load installations.",PostgreSQL,0
log_error_verbosity,enum,"Controls the amount of detail written in the server log for each message that is logged. Valid values areTERSE,DEFAULT, andVERBOSE, each adding more fields to displayed messages.TERSEexcludes the logging ofDETAIL,HINT,QUERY, andCONTEXTerror information.VERBOSEoutput includes theSQLSTATEerror code (see alsoAppendix A) and the source code file name, function name, and line number that generated the error. Only superusers and users with the appropriateSETprivilege can change this setting.",PostgreSQL,0
log_hostname,boolean,"By default, connection log messages only show the IP address of the connecting host. Turning this parameter on causes logging of the host name as well. Note that depending on your host name resolution setup this might impose a non-negligible performance penalty. This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
log_line_prefix,string,"This is aprintf-style string that is output at the beginning of each log line.%characters begin“escape sequences”that are replaced with status information as outlined below. Unrecognized escapes are ignored. Other characters are copied straight to the log line. Some escapes are only recognized by session processes, and will be treated as empty by background processes such as the main server process. Status information may be aligned either left or right by specifying a numeric literal after the % and before the option. A negative value will cause the status information to be padded on the right with spaces to give it a minimum width, whereas a positive value will pad on the left. Padding can be useful to aid human readability in log files.This parameter can only be set in thepostgresql.conffile or on the server command line. The default is'%m [%p] 'which logs a time stamp and the process ID.EscapeEffectSession only%aApplication nameyes%uUser nameyes%dDatabase nameyes%rRemote host name or IP address, and remote portyes%hRemote host name or IP addressyes%bBackend typeno%pProcess IDno%PProcess ID of the parallel group leader, if this process is a parallel query workerno%tTime stamp without millisecondsno%mTime stamp with millisecondsno%nTime stamp with milliseconds (as a Unix epoch)no%iCommand tag: type of session's current commandyes%eSQLSTATE error codeno%cSession ID: see belowno%lNumber of the log line for each session or process, starting at 1no%sProcess start time stampno%vVirtual transaction ID (procNumber/localXID); seeSection 66.1no%xTransaction ID (0 if none is assigned); seeSection 66.1no%qProduces no output, but tells non-session processes to stop at this point in the string; ignored by session processesno%QQuery identifier of the current query. Query identifiers are not computed by default, so this field will be zero unlesscompute_query_idparameter is enabled or a third-party module that computes query identifiers is configured.yes%%Literal%noThe backend type corresponds to the columnbackend_typein the viewpg_stat_activity, but additional types can appear in the log that don't show in that view.The%cescape prints a quasi-unique session identifier, consisting of two 4-byte hexadecimal numbers (without leading zeros) separated by a dot. The numbers are the process start time and the process ID, so%ccan also be used as a space saving way of printing those items. For example, to generate the session identifier frompg_stat_activity, use this query:SELECT to_hex(trunc(EXTRACT(EPOCH FROM backend_start))::integer) || '.' ||
       to_hex(pid)
FROM pg_stat_activity;TipIf you set a nonempty value forlog_line_prefix, you should usually make its last character be a space, to provide visual separation from the rest of the log line. A punctuation character can be used too.TipSyslogproduces its own time stamp and process ID information, so you probably do not want to include those escapes if you are logging tosyslog.TipThe%qescape is useful when including information that is only available in session (backend) context like user or database name. For example:log_line_prefix = '%m [%p] %q%u@%d/%a 'NoteThe%Qescape always reports a zero identifier for lines output bylog_statementbecauselog_statementgenerates output before an identifier can be calculated, including invalid statements for which an identifier cannot be calculated.",PostgreSQL,0
log_lock_waits,boolean,Controls whether a log message is produced when a session waits longer thandeadlock_timeoutto acquire a lock. This is useful in determining if lock waits are causing poor performance. The default isoff. Only superusers and users with the appropriateSETprivilege can change this setting.,PostgreSQL,0
log_recovery_conflict_waits,boolean,Controls whether a log message is produced when the startup process waits longer thandeadlock_timeoutfor recovery conflicts. This is useful in determining if recovery conflicts prevent the recovery from applying WAL.The default isoff. This parameter can only be set in thepostgresql.conffile or on the server command line.,PostgreSQL,0
log_parameter_max_length,integer,"If greater than zero, each bind parameter value logged with a non-error statement-logging message is trimmed to this many bytes. Zero disables logging of bind parameters for non-error statement logs.-1(the default) allows bind parameters to be logged in full. If this value is specified without units, it is taken as bytes. Only superusers and users with the appropriateSETprivilege can change this setting.This setting only affects log messages printed as a result oflog_statement,log_duration, and related settings. Non-zero values of this setting add some overhead, particularly if parameters are sent in binary form, since then conversion to text is required.",PostgreSQL,0
log_parameter_max_length_on_error,integer,"If greater than zero, each bind parameter value reported in error messages is trimmed to this many bytes. Zero (the default) disables including bind parameters in error messages.-1allows bind parameters to be printed in full. If this value is specified without units, it is taken as bytes.Non-zero values of this setting add overhead, asPostgreSQLwill need to store textual representations of parameter values in memory at the start of each statement, whether or not an error eventually occurs. The overhead is greater when bind parameters are sent in binary form than when they are sent as text, since the former case requires data conversion while the latter only requires copying the string.",PostgreSQL,0
log_statement,enum,"Controls which SQL statements are logged. Valid values arenone(off),ddl,mod, andall(all statements).ddllogs all data definition statements, such asCREATE,ALTER, andDROPstatements.modlogs allddlstatements, plus data-modifying statements such asINSERT,UPDATE,DELETE,TRUNCATE, andCOPY FROM.PREPARE,EXECUTE, andEXPLAIN ANALYZEstatements are also logged if their contained command is of an appropriate type. For clients using extended query protocol, logging occurs when an Execute message is received, and values of the Bind parameters are included (with any embedded single-quote marks doubled).The default isnone. Only superusers and users with the appropriateSETprivilege can change this setting.NoteStatements that contain simple syntax errors are not logged even by thelog_statement=allsetting, because the log message is emitted only after basic parsing has been done to determine the statement type. In the case of extended query protocol, this setting likewise does not log statements that fail before the Execute phase (i.e., during parse analysis or planning). Setlog_min_error_statementtoERROR(or lower) to log such statements.Logged statements might reveal sensitive data and even contain plaintext passwords.",PostgreSQL,0
log_replication_commands,boolean,Causes each replication command andwalsenderprocess's replication slot acquisition/release to be logged in the server log. SeeSection 53.4for more information about replication command. The default value isoff. Only superusers and users with the appropriateSETprivilege can change this setting.,PostgreSQL,0
log_temp_files,integer,"Controls logging of temporary file names and sizes. Temporary files can be created for sorts, hashes, and temporary query results. If enabled by this setting, a log entry is emitted for each temporary file, with the file size specified in bytes, when it is deleted. A value of zero logs all temporary file information, while positive values log only files whose size is greater than or equal to the specified amount of data. If this value is specified without units, it is taken as kilobytes. The default setting is -1, which disables such logging. Only superusers and users with the appropriateSETprivilege can change this setting.",PostgreSQL,0
log_timezone,string,"Sets the time zone used for timestamps written in the server log. UnlikeTimeZone, this value is cluster-wide, so that all sessions will report timestamps consistently. The built-in default isGMT, but that is typically overridden inpostgresql.conf;initdbwill install a setting there corresponding to its system environment. SeeSection 8.5.3for more information. This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
cluster_name,string,"Sets a name that identifies this database cluster (instance) for various purposes. The cluster name appears in the process title for all server processes in this cluster. Moreover, it is the default application name for a standby connection (seesynchronous_standby_names).The name can be any string of less thanNAMEDATALENcharacters (64 characters in a standard build). Only printable ASCII characters may be used in thecluster_namevalue. Other characters are replaced withC-style hexadecimal escapes. No name is shown if this parameter is set to the empty string''(which is the default). This parameter can only be set at server start.",PostgreSQL,0
update_process_title,boolean,"Enables updating of the process title every time a new SQL command is received by the server. This setting defaults toonon most platforms, but it defaults tooffon Windows due to that platform's larger overhead for updating the process title. Only superusers and users with the appropriateSETprivilege can change this setting.",PostgreSQL,0
track_activities,boolean,"Enables the collection of information on the currently executing command of each session, along with its identifier and the time when that command began execution. This parameter is on by default. Note that even when enabled, this information is only visible to superusers, roles with privileges of thepg_read_all_statsrole and the user owning the sessions being reported on (including sessions belonging to a role they have the privileges of), so it should not represent a security risk. Only superusers and users with the appropriateSETprivilege can change this setting.",PostgreSQL,0
track_activity_query_size,integer,"Specifies the amount of memory reserved to store the text of the currently executing command for each active session, for thepg_stat_activity.queryfield. If this value is specified without units, it is taken as bytes. The default value is 1024 bytes. This parameter can only be set at server start.",PostgreSQL,0
track_counts,boolean,"Enables collection of statistics on database activity. This parameter is on by default, because the autovacuum daemon needs the collected information. Only superusers and users with the appropriateSETprivilege can change this setting.",PostgreSQL,0
track_io_timing,boolean,"Enables timing of database I/O calls. This parameter is off by default, as it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms. You can use thepg_test_timingtool to measure the overhead of timing on your system. I/O timing information is displayed inpg_stat_database,pg_stat_io, in the output ofEXPLAINwhen theBUFFERSoption is used, in the output ofVACUUMwhen theVERBOSEoption is used, by autovacuum for auto-vacuums and auto-analyzes, whenlog_autovacuum_min_durationis set and bypg_stat_statements. Only superusers and users with the appropriateSETprivilege can change this setting.",PostgreSQL,0
track_wal_io_timing,boolean,"Enables timing of WAL I/O calls. This parameter is off by default, as it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms. You can use thepg_test_timingtool to measure the overhead of timing on your system. I/O timing information is displayed inpg_stat_wal. Only superusers and users with the appropriateSETprivilege can change this setting.",PostgreSQL,0
track_functions,enum,"Enables tracking of function call counts and time used. Specifyplto track only procedural-language functions,allto also track SQL and C language functions. The default isnone, which disables function statistics tracking. Only superusers and users with the appropriateSETprivilege can change this setting.NoteSQL-language functions that are simple enough to be“inlined”into the calling query will not be tracked, regardless of this setting.",PostgreSQL,0
stats_fetch_consistency,enum,"Determines the behavior when cumulative statistics are accessed multiple times within a transaction. When set tonone, each access re-fetches counters from shared memory. When set tocache, the first access to statistics for an object caches those statistics until the end of the transaction unlesspg_stat_clear_snapshot()is called. When set tosnapshot, the first statistics access caches all statistics accessible in the current database, until the end of the transaction unlesspg_stat_clear_snapshot()is called. Changing this parameter in a transaction discards the statistics snapshot. The default iscache.Notenoneis most suitable for monitoring systems. If values are only accessed once, it is the most efficient.cacheensures repeat accesses yield the same values, which is important for queries involving e.g. self-joins.snapshotcan be useful when interactively inspecting statistics, but has higher overhead, particularly if many database objects exist.",PostgreSQL,0
compute_query_id,enum,"Enables in-core computation of a query identifier. Query identifiers can be displayed in thepg_stat_activityview, usingEXPLAIN, or emitted in the log if configured via thelog_line_prefixparameter. Thepg_stat_statementsextension also requires a query identifier to be computed. Note that an external module can alternatively be used if the in-core query identifier computation method is not acceptable. In this case, in-core computation must be always disabled. Valid values areoff(always disabled),on(always enabled),auto, which lets modules such aspg_stat_statementsautomatically enable it, andregresswhich has the same effect asauto, except that the query identifier is not shown in theEXPLAINoutput in order to facilitate automated regression testing. The default isauto.NoteTo ensure that only one query identifier is calculated and displayed, extensions that calculate query identifiers should throw an error if a query identifier has already been computed.",PostgreSQL,0
log_statement_stats,boolean,"For each query, output performance statistics of the respective module to the server log. This is a crude profiling instrument, similar to the Unixgetrusage()operating system facility.log_statement_statsreports total statement statistics, while the others report per-module statistics.log_statement_statscannot be enabled together with any of the per-module options. All of these options are disabled by default. Only superusers and users with the appropriateSETprivilege can change these settings.",PostgreSQL,0
autovacuum,boolean,"Controls whether the server should run the autovacuum launcher daemon. This is on by default; however,track_countsmust also be enabled for autovacuum to work. This parameter can only be set in thepostgresql.conffile or on the server command line; however, autovacuuming can be disabled for individual tables by changing table storage parameters.Note that even when this parameter is disabled, the system will launch autovacuum processes if necessary to prevent transaction ID wraparound. SeeSection 24.1.5for more information.",PostgreSQL,0
autovacuum_max_workers,integer,Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.,PostgreSQL,0
autovacuum_naptime,integer,"Specifies the minimum delay between autovacuum runs on any given database. In each round the daemon examines the database and issuesVACUUMandANALYZEcommands as needed for tables in that database. If this value is specified without units, it is taken as seconds. The default is one minute (1min). This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
autovacuum_vacuum_threshold,integer,Specifies the minimum number of updated or deleted tuples needed to trigger aVACUUMin any one table. The default is 50 tuples. This parameter can only be set in thepostgresql.conffile or on the server command line; but the setting can be overridden for individual tables by changing table storage parameters.,PostgreSQL,0
autovacuum_vacuum_insert_threshold,integer,"Specifies the number of inserted tuples needed to trigger aVACUUMin any one table. The default is 1000 tuples. If -1 is specified, autovacuum will not trigger aVACUUMoperation on any tables based on the number of inserts. This parameter can only be set in thepostgresql.conffile or on the server command line; but the setting can be overridden for individual tables by changing table storage parameters.",PostgreSQL,0
autovacuum_analyze_threshold,integer,"Specifies the minimum number of inserted, updated or deleted tuples needed to trigger anANALYZEin any one table. The default is 50 tuples. This parameter can only be set in thepostgresql.conffile or on the server command line; but the setting can be overridden for individual tables by changing table storage parameters.",PostgreSQL,0
autovacuum_vacuum_scale_factor,floating point,Specifies a fraction of the table size to add toautovacuum_vacuum_thresholdwhen deciding whether to trigger aVACUUM. The default is 0.2 (20% of table size). This parameter can only be set in thepostgresql.conffile or on the server command line; but the setting can be overridden for individual tables by changing table storage parameters.,PostgreSQL,0
autovacuum_vacuum_insert_scale_factor,floating point,Specifies a fraction of the table size to add toautovacuum_vacuum_insert_thresholdwhen deciding whether to trigger aVACUUM. The default is 0.2 (20% of table size). This parameter can only be set in thepostgresql.conffile or on the server command line; but the setting can be overridden for individual tables by changing table storage parameters.,PostgreSQL,0
autovacuum_analyze_scale_factor,floating point,Specifies a fraction of the table size to add toautovacuum_analyze_thresholdwhen deciding whether to trigger anANALYZE. The default is 0.1 (10% of table size). This parameter can only be set in thepostgresql.conffile or on the server command line; but the setting can be overridden for individual tables by changing table storage parameters.,PostgreSQL,0
autovacuum_freeze_max_age,integer,"Specifies the maximum age (in transactions) that a table'spg_class.relfrozenxidfield can attain before aVACUUMoperation is forced to prevent transaction ID wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled.Vacuum also allows removal of old files from thepg_xactsubdirectory, which is why the default is a relatively low 200 million transactions. This parameter can only be set at server start, but the setting can be reduced for individual tables by changing table storage parameters. For more information seeSection 24.1.5.",PostgreSQL,0
autovacuum_multixact_freeze_max_age,integer,"Specifies the maximum age (in multixacts) that a table'spg_class.relminmxidfield can attain before aVACUUMoperation is forced to prevent multixact ID wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled.Vacuuming multixacts also allows removal of old files from thepg_multixact/membersandpg_multixact/offsetssubdirectories, which is why the default is a relatively low 400 million multixacts. This parameter can only be set at server start, but the setting can be reduced for individual tables by changing table storage parameters. For more information seeSection 24.1.5.1.",PostgreSQL,0
autovacuum_vacuum_cost_delay,floating point,"Specifies the cost delay value that will be used in automaticVACUUMoperations. If -1 is specified, the regularvacuum_cost_delayvalue will be used. If this value is specified without units, it is taken as milliseconds. The default value is 2 milliseconds. This parameter can only be set in thepostgresql.conffile or on the server command line; but the setting can be overridden for individual tables by changing table storage parameters.",PostgreSQL,0
autovacuum_vacuum_cost_limit,integer,"Specifies the cost limit value that will be used in automaticVACUUMoperations. If -1 is specified (which is the default), the regularvacuum_cost_limitvalue will be used. Note that the value is distributed proportionally among the running autovacuum workers, if there is more than one, so that the sum of the limits for each worker does not exceed the value of this variable. This parameter can only be set in thepostgresql.conffile or on the server command line; but the setting can be overridden for individual tables by changing table storage parameters.",PostgreSQL,0
client_min_messages,enum,"Controls whichmessage levelsare sent to the client. Valid values areDEBUG5,DEBUG4,DEBUG3,DEBUG2,DEBUG1,LOG,NOTICE,WARNING, andERROR. Each level includes all the levels that follow it. The later the level, the fewer messages are sent. The default isNOTICE. Note thatLOGhas a different rank here than inlog_min_messages.INFOlevel messages are always sent to the client.",PostgreSQL,0
search_path,string,"This variable specifies the order in which schemas are searched when an object (table, data type, function, etc.) is referenced by a simple name with no schema specified. When there are objects of identical names in different schemas, the one found first in the search path is used. An object that is not in any of the schemas in the search path can only be referenced by specifying its containing schema with a qualified (dotted) name.The value forsearch_pathmust be a comma-separated list of schema names. Any name that is not an existing schema, or is a schema for which the user does not haveUSAGEpermission, is silently ignored.If one of the list items is the special name$user, then the schema having the name returned byCURRENT_USERis substituted, if there is such a schema and the user hasUSAGEpermission for it. (If not,$useris ignored.)The system catalog schema,pg_catalog, is always searched, whether it is mentioned in the path or not. If it is mentioned in the path then it will be searched in the specified order. Ifpg_catalogis not in the path then it will be searchedbeforesearching any of the path items.Likewise, the current session's temporary-table schema,pg_temp_nnn, is always searched if it exists. It can be explicitly listed in the path by using the aliaspg_temp. If it is not listed in the path then it is searched first (even beforepg_catalog). However, the temporary schema is only searched for relation (table, view, sequence, etc.) and data type names. It is never searched for function or operator names.When objects are created without specifying a particular target schema, they will be placed in the first valid schema named insearch_path. An error is reported if the search path is empty.The default value for this parameter is""$user"", public. This setting supports shared use of a database (where no users have private schemas, and all share use ofpublic), private per-user schemas, and combinations of these. Other effects can be obtained by altering the default search path setting, either globally or per-user.For more information on schema handling, seeSection 5.10. In particular, the default configuration is suitable only when the database has a single user or a few mutually-trusting users.The current effective value of the search path can be examined via theSQLfunctioncurrent_schemas(seeSection 9.27). This is not quite the same as examining the value ofsearch_path, sincecurrent_schemasshows how the items appearing insearch_pathwere resolved.",PostgreSQL,0
row_security,boolean,"This variable controls whether to raise an error in lieu of applying a row security policy. When set toon, policies apply normally. When set tooff, queries fail which would otherwise apply at least one policy. The default ison. Change tooffwhere limited row visibility could cause incorrect results; for example,pg_dumpmakes that change by default. This variable has no effect on roles which bypass every row security policy, to wit, superusers and roles with theBYPASSRLSattribute.For more information on row security policies, seeCREATE POLICY.",PostgreSQL,0
default_table_access_method,string,"This parameter specifies the default table access method to use when creating tables or materialized views if theCREATEcommand does not explicitly specify an access method, or whenSELECT ... INTOis used, which does not allow specifying a table access method. The default isheap.",PostgreSQL,0
default_tablespace,string,"This variable specifies the default tablespace in which to create objects (tables and indexes) when aCREATEcommand does not explicitly specify a tablespace.The value is either the name of a tablespace, or an empty string to specify using the default tablespace of the current database. If the value does not match the name of any existing tablespace,PostgreSQLwill automatically use the default tablespace of the current database. If a nondefault tablespace is specified, the user must haveCREATEprivilege for it, or creation attempts will fail.This variable is not used for temporary tables; for them,temp_tablespacesis consulted instead.This variable is also not used when creating databases. By default, a new database inherits its tablespace setting from the template database it is copied from.If this parameter is set to a value other than the empty string when a partitioned table is created, the partitioned table's tablespace will be set to that value, which will be used as the default tablespace for partitions created in the future, even ifdefault_tablespacehas changed since then.For more information on tablespaces, seeSection 22.6.",PostgreSQL,0
default_toast_compression,enum,This variable sets the defaultTOASTcompression method for values of compressible columns. (This can be overridden for individual columns by setting theCOMPRESSIONcolumn option inCREATE TABLEorALTER TABLE.) The supported compression methods arepglzand (ifPostgreSQLwas compiled with--with-lz4)lz4. The default ispglz.,PostgreSQL,0
temp_tablespaces,string,"This variable specifies tablespaces in which to create temporary objects (temp tables and indexes on temp tables) when aCREATEcommand does not explicitly specify a tablespace. Temporary files for purposes such as sorting large data sets are also created in these tablespaces.The value is a list of names of tablespaces. When there is more than one name in the list,PostgreSQLchooses a random member of the list each time a temporary object is to be created; except that within a transaction, successively created temporary objects are placed in successive tablespaces from the list. If the selected element of the list is an empty string,PostgreSQLwill automatically use the default tablespace of the current database instead.Whentemp_tablespacesis set interactively, specifying a nonexistent tablespace is an error, as is specifying a tablespace for which the user does not haveCREATEprivilege. However, when using a previously set value, nonexistent tablespaces are ignored, as are tablespaces for which the user lacksCREATEprivilege. In particular, this rule applies when using a value set inpostgresql.conf.The default value is an empty string, which results in all temporary objects being created in the default tablespace of the current database.See alsodefault_tablespace.",PostgreSQL,0
check_function_bodies,boolean,"This parameter is normally on. When set tooff, it disables validation of the routine body string duringCREATE FUNCTIONandCREATE PROCEDURE. Disabling validation avoids side effects of the validation process, in particular preventing false positives due to problems such as forward references. Set this parameter tooffbefore loading functions on behalf of other users;pg_dumpdoes so automatically.",PostgreSQL,0
default_transaction_isolation,enum,"Each SQL transaction has an isolation level, which can be either“read uncommitted”,“read committed”,“repeatable read”, or“serializable”. This parameter controls the default isolation level of each new transaction. The default is“read committed”.ConsultChapter 13andSET TRANSACTIONfor more information.",PostgreSQL,0
default_transaction_read_only,boolean,A read-only SQL transaction cannot alter non-temporary tables. This parameter controls the default read-only status of each new transaction. The default isoff(read/write).ConsultSET TRANSACTIONfor more information.,PostgreSQL,0
default_transaction_deferrable,boolean,"When running at theserializableisolation level, a deferrable read-only SQL transaction may be delayed before it is allowed to proceed. However, once it begins executing it does not incur any of the overhead required to ensure serializability; so serialization code will have no reason to force it to abort because of concurrent updates, making this option suitable for long-running read-only transactions.This parameter controls the default deferrable status of each new transaction. It currently has no effect on read-write transactions or those operating at isolation levels lower thanserializable. The default isoff.ConsultSET TRANSACTIONfor more information.",PostgreSQL,0
transaction_isolation,enum,"This parameter reflects the current transaction's isolation level. At the beginning of each transaction, it is set to the current value ofdefault_transaction_isolation. Any subsequent attempt to change it is equivalent to aSET TRANSACTIONcommand.",PostgreSQL,0
transaction_read_only,boolean,"This parameter reflects the current transaction's read-only status. At the beginning of each transaction, it is set to the current value ofdefault_transaction_read_only. Any subsequent attempt to change it is equivalent to aSET TRANSACTIONcommand.",PostgreSQL,0
transaction_deferrable,boolean,"This parameter reflects the current transaction's deferrability status. At the beginning of each transaction, it is set to the current value ofdefault_transaction_deferrable. Any subsequent attempt to change it is equivalent to aSET TRANSACTIONcommand.",PostgreSQL,0
session_replication_role,enum,"Controls firing of replication-related triggers and rules for the current session. Possible values areorigin(the default),replicaandlocal. Setting this parameter results in discarding any previously cached query plans. Only superusers and users with the appropriateSETprivilege can change this setting.The intended use of this setting is that logical replication systems set it toreplicawhen they are applying replicated changes. The effect of that will be that triggers and rules (that have not been altered from their default configuration) will not fire on the replica. See theALTER TABLEclausesENABLE TRIGGERandENABLE RULEfor more information.PostgreSQL treats the settingsoriginandlocalthe same internally. Third-party replication systems may use these two values for their internal purposes, for example usinglocalto designate a session whose changes should not be replicated.Since foreign keys are implemented as triggers, setting this parameter toreplicaalso disables all foreign key checks, which can leave data in an inconsistent state if improperly used.",PostgreSQL,0
statement_timeout,integer,"Abort any statement that takes more than the specified amount of time. Iflog_min_error_statementis set toERRORor lower, the statement that timed out will also be logged. If this value is specified without units, it is taken as milliseconds. A value of zero (the default) disables the timeout.The timeout is measured from the time a command arrives at the server until it is completed by the server. If multiple SQL statements appear in a single simple-query message, the timeout is applied to each statement separately. (PostgreSQLversions before 13 usually treated the timeout as applying to the whole query string.) In extended query protocol, the timeout starts running when any query-related message (Parse, Bind, Execute, Describe) arrives, and it is canceled by completion of an Execute or Sync message.Settingstatement_timeoutinpostgresql.confis not recommended because it would affect all sessions.",PostgreSQL,0
transaction_timeout,integer,"Terminate any session that spans longer than the specified amount of time in a transaction. The limit applies both to explicit transactions (started withBEGIN) and to an implicitly started transaction corresponding to a single statement. If this value is specified without units, it is taken as milliseconds. A value of zero (the default) disables the timeout.Iftransaction_timeoutis shorter or equal toidle_in_transaction_session_timeoutorstatement_timeoutthen the longer timeout is ignored.Settingtransaction_timeoutinpostgresql.confis not recommended because it would affect all sessions.NotePrepared transactions are not subject to this timeout.",PostgreSQL,0
lock_timeout,integer,"Abort any statement that waits longer than the specified amount of time while attempting to acquire a lock on a table, index, row, or other database object. The time limit applies separately to each lock acquisition attempt. The limit applies both to explicit locking requests (such asLOCK TABLE, orSELECT FOR UPDATEwithoutNOWAIT) and to implicitly-acquired locks. If this value is specified without units, it is taken as milliseconds. A value of zero (the default) disables the timeout.Unlikestatement_timeout, this timeout can only occur while waiting for locks. Note that ifstatement_timeoutis nonzero, it is rather pointless to setlock_timeoutto the same or larger value, since the statement timeout would always trigger first. Iflog_min_error_statementis set toERRORor lower, the statement that timed out will be logged.Settinglock_timeoutinpostgresql.confis not recommended because it would affect all sessions.",PostgreSQL,0
idle_in_transaction_session_timeout,integer,"Terminate any session that has been idle (that is, waiting for a client query) within an open transaction for longer than the specified amount of time. If this value is specified without units, it is taken as milliseconds. A value of zero (the default) disables the timeout.This option can be used to ensure that idle sessions do not hold locks for an unreasonable amount of time. Even when no significant locks are held, an open transaction prevents vacuuming away recently-dead tuples that may be visible only to this transaction; so remaining idle for a long time can contribute to table bloat. SeeSection 24.1for more details.",PostgreSQL,0
idle_session_timeout,integer,"Terminate any session that has been idle (that is, waiting for a client query), but not within an open transaction, for longer than the specified amount of time. If this value is specified without units, it is taken as milliseconds. A value of zero (the default) disables the timeout.Unlike the case with an open transaction, an idle session without a transaction imposes no large costs on the server, so there is less need to enable this timeout thanidle_in_transaction_session_timeout.Be wary of enforcing this timeout on connections made through connection-pooling software or other middleware, as such a layer may not react well to unexpected connection closure. It may be helpful to enable this timeout only for interactive sessions, perhaps by applying it only to particular users.",PostgreSQL,0
vacuum_freeze_table_age,integer,"VACUUMperforms an aggressive scan if the table'spg_class.relfrozenxidfield has reached the age specified by this setting. An aggressive scan differs from a regularVACUUMin that it visits every page that might contain unfrozen XIDs or MXIDs, not just those that might contain dead tuples. The default is 150 million transactions. Although users can set this value anywhere from zero to two billion,VACUUMwill silently limit the effective value to 95% ofautovacuum_freeze_max_age, so that a periodic manualVACUUMhas a chance to run before an anti-wraparound autovacuum is launched for the table. For more information seeSection 24.1.5.",PostgreSQL,0
vacuum_freeze_min_age,integer,"Specifies the cutoff age (in transactions) thatVACUUMshould use to decide whether to trigger freezing of pages that have an older XID. The default is 50 million transactions. Although users can set this value anywhere from zero to one billion,VACUUMwill silently limit the effective value to half the value ofautovacuum_freeze_max_age, so that there is not an unreasonably short time between forced autovacuums. For more information seeSection 24.1.5.",PostgreSQL,0
vacuum_failsafe_age,integer,"Specifies the maximum age (in transactions) that a table'spg_class.relfrozenxidfield can attain beforeVACUUMtakes extraordinary measures to avoid system-wide transaction ID wraparound failure. This isVACUUM's strategy of last resort. The failsafe typically triggers when an autovacuum to prevent transaction ID wraparound has already been running for some time, though it's possible for the failsafe to trigger during anyVACUUM.When the failsafe is triggered, any cost-based delay that is in effect will no longer be applied, further non-essential maintenance tasks (such as index vacuuming) are bypassed, and anyBuffer Access Strategyin use will be disabled resulting inVACUUMbeing free to make use of all ofshared buffers.The default is 1.6 billion transactions. Although users can set this value anywhere from zero to 2.1 billion,VACUUMwill silently adjust the effective value to no less than 105% ofautovacuum_freeze_max_age.",PostgreSQL,0
vacuum_multixact_freeze_table_age,integer,"VACUUMperforms an aggressive scan if the table'spg_class.relminmxidfield has reached the age specified by this setting. An aggressive scan differs from a regularVACUUMin that it visits every page that might contain unfrozen XIDs or MXIDs, not just those that might contain dead tuples. The default is 150 million multixacts. Although users can set this value anywhere from zero to two billion,VACUUMwill silently limit the effective value to 95% ofautovacuum_multixact_freeze_max_age, so that a periodic manualVACUUMhas a chance to run before an anti-wraparound is launched for the table. For more information seeSection 24.1.5.1.",PostgreSQL,0
vacuum_multixact_freeze_min_age,integer,"Specifies the cutoff age (in multixacts) thatVACUUMshould use to decide whether to trigger freezing of pages with an older multixact ID. The default is 5 million multixacts. Although users can set this value anywhere from zero to one billion,VACUUMwill silently limit the effective value to half the value ofautovacuum_multixact_freeze_max_age, so that there is not an unreasonably short time between forced autovacuums. For more information seeSection 24.1.5.1.",PostgreSQL,0
vacuum_multixact_failsafe_age,integer,"Specifies the maximum age (in multixacts) that a table'spg_class.relminmxidfield can attain beforeVACUUMtakes extraordinary measures to avoid system-wide multixact ID wraparound failure. This isVACUUM's strategy of last resort. The failsafe typically triggers when an autovacuum to prevent transaction ID wraparound has already been running for some time, though it's possible for the failsafe to trigger during anyVACUUM.When the failsafe is triggered, any cost-based delay that is in effect will no longer be applied, and further non-essential maintenance tasks (such as index vacuuming) are bypassed.The default is 1.6 billion multixacts. Although users can set this value anywhere from zero to 2.1 billion,VACUUMwill silently adjust the effective value to no less than 105% ofautovacuum_multixact_freeze_max_age.",PostgreSQL,0
bytea_output,enum,"Sets the output format for values of typebytea. Valid values arehex(the default) andescape(the traditional PostgreSQL format). SeeSection 8.4for more information. Thebyteatype always accepts both formats on input, regardless of this setting.",PostgreSQL,0
xmlbinary,enum,"Sets how binary values are to be encoded in XML. This applies for example whenbyteavalues are converted to XML by the functionsxmlelementorxmlforest. Possible values arebase64andhex, which are both defined in the XML Schema standard. The default isbase64. For further information about XML-related functions, seeSection 9.15.The actual choice here is mostly a matter of taste, constrained only by possible restrictions in client applications. Both methods support all possible values, although the hex encoding will be somewhat larger than the base64 encoding.",PostgreSQL,0
xmloption,enum,"Sets whetherDOCUMENTorCONTENTis implicit when converting between XML and character string values. SeeSection 8.13for a description of this. Valid values areDOCUMENTandCONTENT. The default isCONTENT.According to the SQL standard, the command to set this option isSET XML OPTION { DOCUMENT | CONTENT };This syntax is also available in PostgreSQL.",PostgreSQL,0
gin_pending_list_limit,integer,"Sets the maximum size of a GIN index's pending list, which is used whenfastupdateis enabled. If the list grows larger than this maximum size, it is cleaned up by moving the entries in it to the index's main GIN data structure in bulk. If this value is specified without units, it is taken as kilobytes. The default is four megabytes (4MB). This setting can be overridden for individual GIN indexes by changing index storage parameters. SeeSection 64.4.4.1andSection 64.4.5for more information.",PostgreSQL,0
createrole_self_grant,string,"If a user who hasCREATEROLEbut notSUPERUSERcreates a role, and if this is set to a non-empty value, the newly-created role will be granted to the creating user with the options specified. The value must beset,inherit, or a comma-separated list of these. The default value is an empty string, which disables the feature.The purpose of this option is to allow aCREATEROLEuser who is not a superuser to automatically inherit, or automatically gain the ability toSET ROLEto, any created users. Since aCREATEROLEuser is always implicitly grantedADMIN OPTIONon created roles, that user could always execute aGRANTstatement that would achieve the same effect as this setting. However, it can be convenient for usability reasons if the grant happens automatically. A superuser automatically inherits the privileges of every role and can alwaysSET ROLEto any role, and this setting can be used to produce a similar behavior forCREATEROLEusers for users which they create.",PostgreSQL,0
event_triggers,boolean,"Allow temporarily disabling execution of event triggers in order to troubleshoot and repair faulty event triggers. All event triggers will be disabled by setting it tofalse. Setting the value totrueallows all event triggers to fire, this is the default value. Only superusers and users with the appropriateSETprivilege can change this setting.",PostgreSQL,0
restrict_nonsystem_relation_kind,string,"Set relation kinds for which access to non-system relations is prohibited. The value takes the form of a comma-separated list of relation kinds. Currently, the supported relation kinds areviewandforeign-table.",PostgreSQL,0
DateStyle,string,"Sets the display format for date and time values, as well as the rules for interpreting ambiguous date input values. For historical reasons, this variable contains two independent components: the output format specification (ISO,Postgres,SQL, orGerman) and the input/output specification for year/month/day ordering (DMY,MDY, orYMD). These can be set separately or together. The keywordsEuroandEuropeanare synonyms forDMY; the keywordsUS,NonEuro, andNonEuropeanare synonyms forMDY. SeeSection 8.5for more information. The built-in default isISO, MDY, butinitdbwill initialize the configuration file with a setting that corresponds to the behavior of the chosenlc_timelocale.",PostgreSQL,0
IntervalStyle,enum,Sets the display format for interval values. The valuesql_standardwill produce output matchingSQLstandard interval literals. The valuepostgres(which is the default) will produce output matchingPostgreSQLreleases prior to 8.4 when theDateStyleparameter was set toISO. The valuepostgres_verbosewill produce output matchingPostgreSQLreleases prior to 8.4 when theDateStyleparameter was set to non-ISOoutput. The valueiso_8601will produce output matching the time interval“format with designators”defined in section 4.4.3.2 of ISO 8601.TheIntervalStyleparameter also affects the interpretation of ambiguous interval input. SeeSection 8.5.4for more information.,PostgreSQL,0
TimeZone,string,"Sets the time zone for displaying and interpreting time stamps. The built-in default isGMT, but that is typically overridden inpostgresql.conf;initdbwill install a setting there corresponding to its system environment. SeeSection 8.5.3for more information.",PostgreSQL,0
timezone_abbreviations,string,"Sets the collection of time zone abbreviations that will be accepted by the server for datetime input. The default is'Default', which is a collection that works in most of the world; there are also'Australia'and'India', and other collections can be defined for a particular installation. SeeSection B.4for more information.",PostgreSQL,0
extra_float_digits,integer,"This parameter adjusts the number of digits used for textual output of floating-point values, includingfloat4,float8, and geometric data types.If the value is 1 (the default) or above, float values are output in shortest-precise format; seeSection 8.1.3. The actual number of digits generated depends only on the value being output, not on the value of this parameter. At most 17 digits are required forfloat8values, and 9 forfloat4values. This format is both fast and precise, preserving the original binary float value exactly when correctly read. For historical compatibility, values up to 3 are permitted.If the value is zero or negative, then the output is rounded to a given decimal precision. The precision used is the standard number of digits for the type (FLT_DIGorDBL_DIGas appropriate) reduced according to the value of this parameter. (For example, specifying -1 will causefloat4values to be output rounded to 5 significant digits, andfloat8values rounded to 14 digits.) This format is slower and does not preserve all the bits of the binary float value, but may be more human-readable.NoteThe meaning of this parameter, and its default value, changed inPostgreSQL12; seeSection 8.1.3for further discussion.",PostgreSQL,0
client_encoding,string,Sets the client-side encoding (character set). The default is to use the database encoding. The character sets supported by thePostgreSQLserver are described inSection 23.3.1.,PostgreSQL,0
lc_messages,string,"Sets the language in which messages are displayed. Acceptable values are system-dependent; seeSection 23.1for more information. If this variable is set to the empty string (which is the default) then the value is inherited from the execution environment of the server in a system-dependent way.On some systems, this locale category does not exist. Setting this variable will still work, but there will be no effect. Also, there is a chance that no translated messages for the desired language exist. In that case you will continue to see the English messages.Only superusers and users with the appropriateSETprivilege can change this setting.",PostgreSQL,0
lc_monetary,string,"Sets the locale to use for formatting monetary amounts, for example with theto_charfamily of functions. Acceptable values are system-dependent; seeSection 23.1for more information. If this variable is set to the empty string (which is the default) then the value is inherited from the execution environment of the server in a system-dependent way.",PostgreSQL,0
lc_numeric,string,"Sets the locale to use for formatting numbers, for example with theto_charfamily of functions. Acceptable values are system-dependent; seeSection 23.1for more information. If this variable is set to the empty string (which is the default) then the value is inherited from the execution environment of the server in a system-dependent way.",PostgreSQL,0
lc_time,string,"Sets the locale to use for formatting dates and times, for example with theto_charfamily of functions. Acceptable values are system-dependent; seeSection 23.1for more information. If this variable is set to the empty string (which is the default) then the value is inherited from the execution environment of the server in a system-dependent way.",PostgreSQL,0
icu_validation_level,enum,"When ICU locale validation problems are encountered, controls whichmessage levelis used to report the problem. Valid values areDISABLED,DEBUG5,DEBUG4,DEBUG3,DEBUG2,DEBUG1,INFO,NOTICE,WARNING,ERROR, andLOG.If set toDISABLED, does not report validation problems at all. Otherwise reports problems at the given message level. The default isWARNING.",PostgreSQL,0
default_text_search_config,string,"Selects the text search configuration that is used by those variants of the text search functions that do not have an explicit argument specifying the configuration. SeeChapter 12for further information. The built-in default ispg_catalog.simple, butinitdbwill initialize the configuration file with a setting that corresponds to the chosenlc_ctypelocale, if a configuration matching that locale can be identified.",PostgreSQL,0
local_preload_libraries,string,"This variable specifies one or more shared libraries that are to be preloaded at connection start. It contains a comma-separated list of library names, where each name is interpreted as for theLOADcommand. Whitespace between entries is ignored; surround a library name with double quotes if you need to include whitespace or commas in the name. The parameter value only takes effect at the start of the connection. Subsequent changes have no effect. If a specified library is not found, the connection attempt will fail.This option can be set by any user. Because of that, the libraries that can be loaded are restricted to those appearing in thepluginssubdirectory of the installation's standard library directory. (It is the database administrator's responsibility to ensure that only“safe”libraries are installed there.) Entries inlocal_preload_librariescan specify this directory explicitly, for example$libdir/plugins/mylib, or just specify the library name —mylibwould have the same effect as$libdir/plugins/mylib.The intent of this feature is to allow unprivileged users to load debugging or performance-measurement libraries into specific sessions without requiring an explicitLOADcommand. To that end, it would be typical to set this parameter using thePGOPTIONSenvironment variable on the client or by usingALTER ROLE SET.However, unless a module is specifically designed to be used in this way by non-superusers, this is usually not the right setting to use. Look atsession_preload_librariesinstead.",PostgreSQL,0
session_preload_libraries,string,"This variable specifies one or more shared libraries that are to be preloaded at connection start. It contains a comma-separated list of library names, where each name is interpreted as for theLOADcommand. Whitespace between entries is ignored; surround a library name with double quotes if you need to include whitespace or commas in the name. The parameter value only takes effect at the start of the connection. Subsequent changes have no effect. If a specified library is not found, the connection attempt will fail. Only superusers and users with the appropriateSETprivilege can change this setting.The intent of this feature is to allow debugging or performance-measurement libraries to be loaded into specific sessions without an explicitLOADcommand being given. For example,auto_explaincould be enabled for all sessions under a given user name by setting this parameter withALTER ROLE SET. Also, this parameter can be changed without restarting the server (but changes only take effect when a new session is started), so it is easier to add new modules this way, even if they should apply to all sessions.Unlikeshared_preload_libraries, there is no large performance advantage to loading a library at session start rather than when it is first used. There is some advantage, however, when connection pooling is used.",PostgreSQL,0
shared_preload_libraries,string,"This variable specifies one or more shared libraries to be preloaded at server start. It contains a comma-separated list of library names, where each name is interpreted as for theLOADcommand. Whitespace between entries is ignored; surround a library name with double quotes if you need to include whitespace or commas in the name. This parameter can only be set at server start. If a specified library is not found, the server will fail to start.Some libraries need to perform certain operations that can only take place at postmaster start, such as allocating shared memory, reserving light-weight locks, or starting background workers. Those libraries must be loaded at server start through this parameter. See the documentation of each library for details.Other libraries can also be preloaded. By preloading a shared library, the library startup time is avoided when the library is first used. However, the time to start each new server process might increase slightly, even if that process never uses the library. So this parameter is recommended only for libraries that will be used in most sessions. Also, changing this parameter requires a server restart, so this is not the right setting to use for short-term debugging tasks, say. Usesession_preload_librariesfor that instead.NoteOn Windows hosts, preloading a library at server start will not reduce the time required to start each new server process; each server process will re-load all preload libraries. However,shared_preload_librariesis still useful on Windows hosts for libraries that need to perform operations at postmaster start time.",PostgreSQL,0
jit_provider,string,"This variable is the name of the JIT provider library to be used (seeSection 30.4.2). The default isllvmjit. This parameter can only be set at server start.If set to a non-existent library,JITwill not be available, but no error will be raised. This allows JIT support to be installed separately from the mainPostgreSQLpackage.",PostgreSQL,0
dynamic_library_path,string,"If a dynamically loadable module needs to be opened and the file name specified in theCREATE FUNCTIONorLOADcommand does not have a directory component (i.e., the name does not contain a slash), the system will search this path for the required file.The value fordynamic_library_pathmust be a list of absolute directory paths separated by colons (or semi-colons on Windows). If a list element starts with the special string$libdir, the compiled-inPostgreSQLpackage library directory is substituted for$libdir; this is where the modules provided by the standardPostgreSQLdistribution are installed. (Usepg_config --pkglibdirto find out the name of this directory.) For example:dynamic_library_path = '/usr/local/lib/postgresql:/home/my_project/lib:$libdir'or, in a Windows environment:dynamic_library_path = 'C:\tools\postgresql;H:\my_project\lib;$libdir'The default value for this parameter is'$libdir'. If the value is set to an empty string, the automatic path search is turned off.This parameter can be changed at run time by superusers and users with the appropriateSETprivilege, but a setting done that way will only persist until the end of the client connection, so this method should be reserved for development purposes. The recommended way to set this parameter is in thepostgresql.confconfiguration file.",PostgreSQL,0
gin_fuzzy_search_limit,integer,Soft upper limit of the size of the set returned by GIN index scans. For more information seeSection 64.4.5.,PostgreSQL,0
deadlock_timeout,integer,"This is the amount of time to wait on a lock before checking to see if there is a deadlock condition. The check for deadlock is relatively expensive, so the server doesn't run it every time it waits for a lock. We optimistically assume that deadlocks are not common in production applications and just wait on the lock for a while before checking for a deadlock. Increasing this value reduces the amount of time wasted in needless deadlock checks, but slows down reporting of real deadlock errors. If this value is specified without units, it is taken as milliseconds. The default is one second (1s), which is probably about the smallest value you would want in practice. On a heavily loaded server you might want to raise it. Ideally the setting should exceed your typical transaction time, so as to improve the odds that a lock will be released before the waiter decides to check for deadlock. Only superusers and users with the appropriateSETprivilege can change this setting.Whenlog_lock_waitsis set, this parameter also determines the amount of time to wait before a log message is issued about the lock wait. If you are trying to investigate locking delays you might want to set a shorter than normaldeadlock_timeout.",PostgreSQL,0
max_locks_per_transaction,integer,"The shared lock table has space formax_locks_per_transactionobjects (e.g., tables) per server process or prepared transaction; hence, no more than this many distinct objects can be locked at any one time. This parameter limits the average number of object locks used by each transaction; individual transactions can lock more objects as long as the locks of all transactions fit in the lock table. This isnotthe number of rows that can be locked; that value is unlimited. The default, 64, has historically proven sufficient, but you might need to raise this value if you have queries that touch many different tables in a single transaction, e.g., query of a parent table with many children. This parameter can only be set at server start.When running a standby server, you must set this parameter to have the same or higher value as on the primary server. Otherwise, queries will not be allowed in the standby server.",PostgreSQL,0
max_pred_locks_per_transaction,integer,"The shared predicate lock table has space formax_pred_locks_per_transactionobjects (e.g., tables) per server process or prepared transaction; hence, no more than this many distinct objects can be locked at any one time. This parameter limits the average number of object locks used by each transaction; individual transactions can lock more objects as long as the locks of all transactions fit in the lock table. This isnotthe number of rows that can be locked; that value is unlimited. The default, 64, has historically proven sufficient, but you might need to raise this value if you have clients that touch many different tables in a single serializable transaction. This parameter can only be set at server start.",PostgreSQL,0
max_pred_locks_per_relation,integer,"This controls how many pages or tuples of a single relation can be predicate-locked before the lock is promoted to covering the whole relation. Values greater than or equal to zero mean an absolute limit, while negative values meanmax_pred_locks_per_transactiondivided by the absolute value of this setting. The default is -2, which keeps the behavior from previous versions ofPostgreSQL. This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
max_pred_locks_per_page,integer,This controls how many rows on a single page can be predicate-locked before the lock is promoted to covering the whole page. The default is 2. This parameter can only be set in thepostgresql.conffile or on the server command line.,PostgreSQL,0
array_nulls,boolean,"This controls whether the array input parser recognizes unquotedNULLas specifying a null array element. By default, this ison, allowing array values containing null values to be entered. However,PostgreSQLversions before 8.2 did not support null values in arrays, and therefore would treatNULLas specifying a normal array element with the string value“NULL”. For backward compatibility with applications that require the old behavior, this variable can be turnedoff.Note that it is possible to create array values containing null values even when this variable isoff.",PostgreSQL,0
backslash_quote,enum,"This controls whether a quote mark can be represented by\'in a string literal. The preferred, SQL-standard way to represent a quote mark is by doubling it ('') butPostgreSQLhas historically also accepted\'. However, use of\'creates security risks because in some client character set encodings, there are multibyte characters in which the last byte is numerically equivalent to ASCII\. If client-side code does escaping incorrectly then an SQL-injection attack is possible. This risk can be prevented by making the server reject queries in which a quote mark appears to be escaped by a backslash. The allowed values ofbackslash_quoteareon(allow\'always),off(reject always), andsafe_encoding(allow only if client encoding does not allow ASCII\within a multibyte character).safe_encodingis the default setting.Note that in a standard-conforming string literal,\just means\anyway. This parameter only affects the handling of non-standard-conforming literals, including escape string syntax (E'...').",PostgreSQL,0
escape_string_warning,boolean,"When on, a warning is issued if a backslash (\) appears in an ordinary string literal ('...'syntax) andstandard_conforming_stringsis off. The default ison.Applications that wish to use backslash as escape should be modified to use escape string syntax (E'...'), because the default behavior of ordinary strings is now to treat backslash as an ordinary character, per SQL standard. This variable can be enabled to help locate code that needs to be changed.",PostgreSQL,0
lo_compat_privileges,boolean,"InPostgreSQLreleases prior to 9.0, large objects did not have access privileges and were, therefore, always readable and writable by all users. Setting this variable toondisables the new privilege checks, for compatibility with prior releases. The default isoff. Only superusers and users with the appropriateSETprivilege can change this setting.Setting this variable does not disable all security checks related to large objects — only those for which the default behavior has changed inPostgreSQL9.0.",PostgreSQL,0
quote_all_identifiers,boolean,"When the database generates SQL, force all identifiers to be quoted, even if they are not (currently) keywords. This will affect the output ofEXPLAINas well as the results of functions likepg_get_viewdef. See also the--quote-all-identifiersoption ofpg_dumpandpg_dumpall.",PostgreSQL,0
standard_conforming_strings,boolean,"This controls whether ordinary string literals ('...') treat backslashes literally, as specified in the SQL standard. Beginning inPostgreSQL9.1, the default ison(prior releases defaulted tooff). Applications can check this parameter to determine how string literals will be processed. The presence of this parameter can also be taken as an indication that the escape string syntax (E'...') is supported. Escape string syntax (Section 4.1.2.2) should be used if an application desires backslashes to be treated as escape characters.",PostgreSQL,0
synchronize_seqscans,boolean,"This allows sequential scans of large tables to synchronize with each other, so that concurrent scans read the same block at about the same time and hence share the I/O workload. When this is enabled, a scan might start in the middle of the table and then“wrap around”the end to cover all rows, so as to synchronize with the activity of scans already in progress. This can result in unpredictable changes in the row ordering returned by queries that have noORDER BYclause. Setting this parameter tooffensures the pre-8.3 behavior in which a sequential scan always starts from the beginning of the table. The default ison.",PostgreSQL,0
transform_null_equals,boolean,"When on, expressions of the formexpr= NULL(orNULL =expr) are treated asexprIS NULL, that is, they return true ifexprevaluates to the null value, and false otherwise. The correct SQL-spec-compliant behavior ofexpr= NULLis to always return null (unknown). Therefore this parameter defaults tooff.However, filtered forms inMicrosoft Accessgenerate queries that appear to useexpr= NULLto test for null values, so if you use that interface to access the database you might want to turn this option on. Since expressions of the formexpr= NULLalways return the null value (using the SQL standard interpretation), they are not very useful and do not appear often in normal applications so this option does little harm in practice. But new users are frequently confused about the semantics of expressions involving null values, so this option is off by default.Note that this option only affects the exact form= NULL, not other comparison operators or other expressions that are computationally equivalent to some expression involving the equals operator (such asIN). Thus, this option is not a general fix for bad programming.Refer toSection 9.2for related information.",PostgreSQL,0
allow_alter_system,boolean,"Whenallow_alter_systemis set tooff, an error is returned if theALTER SYSTEMcommand is executed. This parameter can only be set in thepostgresql.conffile or on the server command line. The default value ison.Note that this setting must not be regarded as a security feature. It only disables theALTER SYSTEMcommand. It does not prevent a superuser from changing the configuration using other SQL commands. A superuser has many ways of executing shell commands at the operating system level, and can therefore modifypostgresql.auto.confregardless of the value of this setting.Turning this setting off is intended for environments where the configuration ofPostgreSQLis managed by some external tool. In such environments, a well intentioned superuser mightmistakenlyuseALTER SYSTEMto change the configuration instead of using the external tool. This might result in unintended behavior, such as the external tool overwriting the change at some later point in time when it updates the configuration. Setting this parameter tooffcan help avoid such mistakes.This parameter only controls the use ofALTER SYSTEM. The settings stored inpostgresql.auto.conftake effect even ifallow_alter_systemis set tooff.",PostgreSQL,0
exit_on_error,boolean,"If on, any error will terminate the current session. By default, this is set to off, so that only FATAL errors will terminate the session.",PostgreSQL,0
restart_after_crash,boolean,"When set to on, which is the default,PostgreSQLwill automatically reinitialize after a backend crash. Leaving this value set to on is normally the best way to maximize the availability of the database. However, in some circumstances, such as whenPostgreSQLis being invoked by clusterware, it may be useful to disable the restart so that the clusterware can gain control and take any actions it deems appropriate.This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
data_sync_retry,boolean,"When set to off, which is the default,PostgreSQLwill raise a PANIC-level error on failure to flush modified data files to the file system. This causes the database server to crash. This parameter can only be set at server start.On some operating systems, the status of data in the kernel's page cache is unknown after a write-back failure. In some cases it might have been entirely forgotten, making it unsafe to retry; the second attempt may be reported as successful, when in fact the data has been lost. In these circumstances, the only way to avoid data loss is to recover from the WAL after any failure is reported, preferably after investigating the root cause of the failure and replacing any faulty hardware.If set to on,PostgreSQLwill instead report an error but continue to run so that the data flushing operation can be retried in a later checkpoint. Only set it to on after investigating the operating system's treatment of buffered data in case of write-back failure.",PostgreSQL,0
recovery_init_sync_method,enum,"When set tofsync, which is the default,PostgreSQLwill recursively open and synchronize all files in the data directory before crash recovery begins. The search for files will follow symbolic links for the WAL directory and each configured tablespace (but not any other symbolic links). This is intended to make sure that all WAL and data files are durably stored on disk before replaying changes. This applies whenever starting a database cluster that did not shut down cleanly, including copies created withpg_basebackup.On Linux,syncfsmay be used instead, to ask the operating system to synchronize the file systems that contain the data directory, the WAL files and each tablespace (but not any other file systems that may be reachable through symbolic links). This may be a lot faster than thefsyncsetting, because it doesn't need to open each file one by one. On the other hand, it may be slower if a file system is shared by other applications that modify a lot of files, since those files will also be written to disk. Furthermore, on versions of Linux before 5.8, I/O errors encountered while writing data to disk may not be reported toPostgreSQL, and relevant error messages may appear only in kernel logs.This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
block_size,integer,Reports the size of a disk block. It is determined by the value ofBLCKSZwhen building the server. The default value is 8192 bytes. The meaning of some configuration variables (such asshared_buffers) is influenced byblock_size. SeeSection 19.4for information.,PostgreSQL,0
data_checksums,boolean,Reports whether data checksums are enabled for this cluster. Seedata checksumsfor more information.,PostgreSQL,0
data_directory_mode,integer,On Unix systems this parameter reports the permissions the data directory (defined bydata_directory) had at server startup. (On Microsoft Windows this parameter will always display0700.) Seegroup accessfor more information.,PostgreSQL,0
debug_assertions,boolean,"Reports whetherPostgreSQLhas been built with assertions enabled. That is the case if the macroUSE_ASSERT_CHECKINGis defined whenPostgreSQLis built (accomplished e.g., by theconfigureoption--enable-cassert). By defaultPostgreSQLis built without assertions.",PostgreSQL,0
huge_pages_status,enum,"Reports the state of huge pages in the current instance:on,off, orunknown(if displayed withpostgres -C). This parameter is useful to determine whether allocation of huge pages was successful underhuge_pages=try. Seehuge_pagesfor more information.",PostgreSQL,0
integer_datetimes,boolean,"Reports whetherPostgreSQLwas built with support for 64-bit-integer dates and times. As ofPostgreSQL10, this is alwayson.",PostgreSQL,0
in_hot_standby,boolean,"Reports whether the server is currently in hot standby mode. When this ison, all transactions are forced to be read-only. Within a session, this can change only if the server is promoted to be primary. SeeSection 26.4for more information.",PostgreSQL,0
max_function_args,integer,Reports the maximum number of function arguments. It is determined by the value ofFUNC_MAX_ARGSwhen building the server. The default value is 100 arguments.,PostgreSQL,0
max_identifier_length,integer,"Reports the maximum identifier length. It is determined as one less than the value ofNAMEDATALENwhen building the server. The default value ofNAMEDATALENis 64; therefore the defaultmax_identifier_lengthis 63 bytes, which can be less than 63 characters when using multibyte encodings.",PostgreSQL,0
max_index_keys,integer,Reports the maximum number of index keys. It is determined by the value ofINDEX_MAX_KEYSwhen building the server. The default value is 32 keys.,PostgreSQL,0
segment_size,integer,Reports the number of blocks (pages) that can be stored within a file segment. It is determined by the value ofRELSEG_SIZEwhen building the server. The maximum size of a segment file in bytes is equal tosegment_sizemultiplied byblock_size; by default this is 1GB.,PostgreSQL,0
server_encoding,string,"Reports the database encoding (character set). It is determined when the database is created. Ordinarily, clients need only be concerned with the value ofclient_encoding.",PostgreSQL,0
server_version,string,Reports the version number of the server. It is determined by the value ofPG_VERSIONwhen building the server.,PostgreSQL,0
server_version_num,integer,Reports the version number of the server as an integer. It is determined by the value ofPG_VERSION_NUMwhen building the server.,PostgreSQL,0
shared_memory_size,integer,"Reports the size of the main shared memory area, rounded up to the nearest megabyte.",PostgreSQL,0
shared_memory_size_in_huge_pages,integer,"Reports the number of huge pages that are needed for the main shared memory area based on the specifiedhuge_page_size. If huge pages are not supported, this will be-1.This setting is supported only onLinux. It is always set to-1on other platforms. For more details about using huge pages onLinux, seeSection 18.4.5.",PostgreSQL,0
ssl_library,string,"Reports the name of the SSL library that thisPostgreSQLserver was built with (even if SSL is not currently configured or in use on this instance), for exampleOpenSSL, or an empty string if none.",PostgreSQL,0
wal_block_size,integer,Reports the size of a WAL disk block. It is determined by the value ofXLOG_BLCKSZwhen building the server. The default value is 8192 bytes.,PostgreSQL,0
wal_segment_size,integer,Reports the size of write ahead log segments. The default value is 16MB. SeeSection 28.5for more information.,PostgreSQL,0
allow_in_place_tablespaces,boolean,"Allows tablespaces to be created as directories insidepg_tblspc, when an empty location string is provided to theCREATE TABLESPACEcommand. This is intended to allow testing replication scenarios where primary and standby servers are running on the same machine. Such directories are likely to confuse backup tools that expect to find only symbolic links in that location. Only superusers and users with the appropriateSETprivilege can change this setting.",PostgreSQL,0
allow_system_table_mods,boolean,Allows modification of the structure of system tables as well as certain other risky actions on system tables. This is otherwise not allowed even for superusers. Ill-advised use of this setting can cause irretrievable data loss or seriously corrupt the database system. Only superusers and users with the appropriateSETprivilege can change this setting.,PostgreSQL,0
backtrace_functions,string,"This parameter contains a comma-separated list of C function names. If an error is raised and the name of the internal C function where the error happens matches a value in the list, then a backtrace is written to the server log together with the error message. This can be used to debug specific areas of the source code.Backtrace support is not available on all platforms, and the quality of the backtraces depends on compilation options.Only superusers and users with the appropriateSETprivilege can change this setting.",PostgreSQL,0
debug_discard_caches,integer,"When set to1, each system catalog cache entry is invalidated at the first possible opportunity, whether or not anything that would render it invalid really occurred. Caching of system catalogs is effectively disabled as a result, so the server will run extremely slowly. Higher values run the cache invalidation recursively, which is even slower and only useful for testing the caching logic itself. The default value of0selects normal catalog caching behavior.This parameter can be very helpful when trying to trigger hard-to-reproduce bugs involving concurrent catalog changes, but it is otherwise rarely needed. See the source code filesinval.candpg_config_manual.hfor details.This parameter is supported whenDISCARD_CACHES_ENABLEDwas defined at compile time (which happens automatically when using theconfigureoption--enable-cassert). In production builds, its value will always be0and attempts to set it to another value will raise an error.",PostgreSQL,0
debug_io_direct,string,"Ask the kernel to minimize caching effects for relation data and WAL files usingO_DIRECT(most Unix-like systems),F_NOCACHE(macOS) orFILE_FLAG_NO_BUFFERING(Windows).May be set to an empty string (the default) to disable use of direct I/O, or a comma-separated list of operations that should use direct I/O. The valid options aredatafor main data files,walfor WAL files, andwal_initfor WAL files when being initially allocated.Some operating systems and file systems do not support direct I/O, so non-default settings may be rejected at startup or cause errors.Currently this feature reduces performance, and is intended for developer testing only.",PostgreSQL,0
debug_parallel_query,enum,"Allows the use of parallel queries for testing purposes even in cases where no performance benefit is expected. The allowed values ofdebug_parallel_queryareoff(use parallel mode only when it is expected to improve performance),on(force parallel query for all queries for which it is thought to be safe), andregress(likeon, but with additional behavior changes as explained below).More specifically, setting this value toonwill add aGathernode to the top of any query plan for which this appears to be safe, so that the query runs inside of a parallel worker. Even when a parallel worker is not available or cannot be used, operations such as starting a subtransaction that would be prohibited in a parallel query context will be prohibited unless the planner believes that this will cause the query to fail. If failures or unexpected results occur when this option is set, some functions used by the query may need to be markedPARALLEL UNSAFE(or, possibly,PARALLEL RESTRICTED).Setting this value toregresshas all of the same effects as setting it toonplus some additional effects that are intended to facilitate automated regression testing. Normally, messages from a parallel worker include a context line indicating that, but a setting ofregresssuppresses this line so that the output is the same as in non-parallel execution. Also, theGathernodes added to plans by this setting are hidden inEXPLAINoutput so that the output matches what would be obtained if this setting were turnedoff.",PostgreSQL,0
ignore_system_indexes,boolean,Ignore system indexes when reading system tables (but still update the indexes when modifying the tables). This is useful when recovering from damaged system indexes. This parameter cannot be changed after session start.,PostgreSQL,0
post_auth_delay,integer,"The amount of time to delay when a new server process is started, after it conducts the authentication procedure. This is intended to give developers an opportunity to attach to the server process with a debugger. If this value is specified without units, it is taken as seconds. A value of zero (the default) disables the delay. This parameter cannot be changed after session start.",PostgreSQL,0
pre_auth_delay,integer,"The amount of time to delay just after a new server process is forked, before it conducts the authentication procedure. This is intended to give developers an opportunity to attach to the server process with a debugger to trace down misbehavior in authentication. If this value is specified without units, it is taken as seconds. A value of zero (the default) disables the delay. This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
trace_notify,boolean,"Generates a great amount of debugging output for theLISTENandNOTIFYcommands.client_min_messagesorlog_min_messagesmust beDEBUG1or lower to send this output to the client or server logs, respectively.",PostgreSQL,0
trace_sort,boolean,"If on, emit information about resource usage during sort operations. This parameter is only available if theTRACE_SORTmacro was defined whenPostgreSQLwas compiled. (However,TRACE_SORTis currently defined by default.)",PostgreSQL,0
trace_locks,boolean,"If on, emit information about lock usage. Information dumped includes the type of lock operation, the type of lock and the unique identifier of the object being locked or unlocked. Also included are bit masks for the lock types already granted on this object as well as for the lock types awaited on this object. For each lock type a count of the number of granted locks and waiting locks is also dumped as well as the totals. An example of the log file output is shown here:LOG:  LockAcquire: new: lock(0xb7acd844) id(24688,24696,0,0,0,1)
      grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0
      wait(0) type(AccessShareLock)
LOG:  GrantLock: lock(0xb7acd844) id(24688,24696,0,0,0,1)
      grantMask(2) req(1,0,0,0,0,0,0)=1 grant(1,0,0,0,0,0,0)=1
      wait(0) type(AccessShareLock)
LOG:  UnGrantLock: updated: lock(0xb7acd844) id(24688,24696,0,0,0,1)
      grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0
      wait(0) type(AccessShareLock)
LOG:  CleanUpLock: deleting: lock(0xb7acd844) id(24688,24696,0,0,0,1)
      grantMask(0) req(0,0,0,0,0,0,0)=0 grant(0,0,0,0,0,0,0)=0
      wait(0) type(INVALID)Details of the structure being dumped may be found insrc/include/storage/lock.h.This parameter is only available if theLOCK_DEBUGmacro was defined whenPostgreSQLwas compiled.",PostgreSQL,0
trace_lwlocks,boolean,"If on, emit information about lightweight lock usage. Lightweight locks are intended primarily to provide mutual exclusion of access to shared-memory data structures.This parameter is only available if theLOCK_DEBUGmacro was defined whenPostgreSQLwas compiled.",PostgreSQL,0
trace_userlocks,boolean,"If on, emit information about user lock usage. Output is the same as fortrace_locks, only for advisory locks.This parameter is only available if theLOCK_DEBUGmacro was defined whenPostgreSQLwas compiled.",PostgreSQL,0
trace_lock_oidmin,integer,"If set, do not trace locks for tables below this OID (used to avoid output on system tables).This parameter is only available if theLOCK_DEBUGmacro was defined whenPostgreSQLwas compiled.",PostgreSQL,0
trace_lock_table,integer,Unconditionally trace locks on this table (OID).This parameter is only available if theLOCK_DEBUGmacro was defined whenPostgreSQLwas compiled.,PostgreSQL,0
debug_deadlocks,boolean,"If set, dumps information about all current locks when a deadlock timeout occurs.This parameter is only available if theLOCK_DEBUGmacro was defined whenPostgreSQLwas compiled.",PostgreSQL,0
log_btree_build_stats,boolean,"If set, logs system resource usage statistics (memory and CPU) on various B-tree operations.This parameter is only available if theBTREE_BUILD_STATSmacro was defined whenPostgreSQLwas compiled.",PostgreSQL,0
wal_consistency_checking,string,"This parameter is intended to be used to check for bugs in the WAL redo routines. When enabled, full-page images of any buffers modified in conjunction with the WAL record are added to the record. If the record is subsequently replayed, the system will first apply each record and then test whether the buffers modified by the record match the stored images. In certain cases (such as hint bits), minor variations are acceptable, and will be ignored. Any unexpected differences will result in a fatal error, terminating recovery.The default value of this setting is the empty string, which disables the feature. It can be set toallto check all records, or to a comma-separated list of resource managers to check only records originating from those resource managers. Currently, the supported resource managers areheap,heap2,btree,hash,gin,gist,sequence,spgist,brin, andgeneric. Extensions may define additional resource managers. Only superusers and users with the appropriateSETprivilege can change this setting.",PostgreSQL,0
wal_debug,boolean,"If on, emit WAL-related debugging output. This parameter is only available if theWAL_DEBUGmacro was defined whenPostgreSQLwas compiled.",PostgreSQL,0
ignore_checksum_failure,boolean,"Only has effect ifdata checksumsare enabled.Detection of a checksum failure during a read normally causesPostgreSQLto report an error, aborting the current transaction. Settingignore_checksum_failureto on causes the system to ignore the failure (but still report a warning), and continue processing. This behavior maycause crashes, propagate or hide corruption, or other serious problems. However, it may allow you to get past the error and retrieve undamaged tuples that might still be present in the table if the block header is still sane. If the header is corrupt an error will be reported even if this option is enabled. The default setting isoff. Only superusers and users with the appropriateSETprivilege can change this setting.",PostgreSQL,0
zero_damaged_pages,boolean,"Detection of a damaged page header normally causesPostgreSQLto report an error, aborting the current transaction. Settingzero_damaged_pagesto on causes the system to instead report a warning, zero out the damaged page in memory, and continue processing. This behaviorwill destroy data, namely all the rows on the damaged page. However, it does allow you to get past the error and retrieve rows from any undamaged pages that might be present in the table. It is useful for recovering data if corruption has occurred due to a hardware or software error. You should generally not set this on until you have given up hope of recovering data from the damaged pages of a table. Zeroed-out pages are not forced to disk so it is recommended to recreate the table or the index before turning this parameter off again. The default setting isoff. Only superusers and users with the appropriateSETprivilege can change this setting.",PostgreSQL,0
ignore_invalid_pages,boolean,"If set tooff(the default), detection of WAL records having references to invalid pages during recovery causesPostgreSQLto raise a PANIC-level error, aborting the recovery. Settingignore_invalid_pagestooncauses the system to ignore invalid page references in WAL records (but still report a warning), and continue the recovery. This behavior maycause crashes, data loss, propagate or hide corruption, or other serious problems. However, it may allow you to get past the PANIC-level error, to finish the recovery, and to cause the server to start up. The parameter can only be set at server start. It only has effect during recovery or in standby mode.",PostgreSQL,0
jit_debugging_support,boolean,"If LLVM has the required functionality, register generated functions withGDB. This makes debugging easier. The default setting isoff. This parameter can only be set at server start.",PostgreSQL,0
jit_dump_bitcode,boolean,"Writes the generatedLLVMIR out to the file system, insidedata_directory. This is only useful for working on the internals of the JIT implementation. The default setting isoff. Only superusers and users with the appropriateSETprivilege can change this setting.",PostgreSQL,0
jit_expressions,boolean,"Determines whether expressions are JIT compiled, when JIT compilation is activated (seeSection 30.2). The default ison.",PostgreSQL,0
jit_profiling_support,boolean,"If LLVM has the required functionality, emit the data needed to allowperfto profile functions generated by JIT. This writes out files to~/.debug/jit/; the user is responsible for performing cleanup when desired. The default setting isoff. This parameter can only be set at server start.",PostgreSQL,0
jit_tuple_deforming,boolean,"Determines whether tuple deforming is JIT compiled, when JIT compilation is activated (seeSection 30.2). The default ison.",PostgreSQL,0
remove_temp_files_after_crash,boolean,"When set toon, which is the default,PostgreSQLwill automatically remove temporary files after a backend crash. If disabled, the files will be retained and may be used for debugging, for example. Repeated crashes may however result in accumulation of useless files. This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
send_abort_for_crash,boolean,"By default, after a backend crash the postmaster will stop remaining child processes by sending themSIGQUITsignals, which permits them to exit more-or-less gracefully. When this option is set toon,SIGABRTis sent instead. That normally results in production of a core dump file for each such child process. This can be handy for investigating the states of other processes after a crash. It can also consume lots of disk space in the event of repeated crashes, so do not enable this on systems you are not monitoring carefully. Beware that no support exists for cleaning up the core file(s) automatically. This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
send_abort_for_kill,boolean,"By default, after attempting to stop a child process withSIGQUIT, the postmaster will wait five seconds and then sendSIGKILLto force immediate termination. When this option is set toon,SIGABRTis sent instead ofSIGKILL. That normally results in production of a core dump file for each such child process. This can be handy for investigating the states of“stuck”child processes. It can also consume lots of disk space in the event of repeated crashes, so do not enable this on systems you are not monitoring carefully. Beware that no support exists for cleaning up the core file(s) automatically. This parameter can only be set in thepostgresql.conffile or on the server command line.",PostgreSQL,0
debug_logical_replication_streaming,enum,"The allowed values arebufferedandimmediate. The default isbuffered. This parameter is intended to be used to test logical decoding and replication of large transactions. The effect ofdebug_logical_replication_streamingis different for the publisher and subscriber:On the publisher side,debug_logical_replication_streamingallows streaming or serializing changes immediately in logical decoding. When set toimmediate, stream each change if thestreamingoption ofCREATE SUBSCRIPTIONis enabled, otherwise, serialize each change. When set tobuffered, the decoding will stream or serialize changes whenlogical_decoding_work_memis reached.On the subscriber side, if thestreamingoption is set toparallel,debug_logical_replication_streamingcan be used to direct the leader apply worker to send changes to the shared memory queue or to serialize all changes to the file. When set tobuffered, the leader sends changes to parallel apply workers via a shared memory queue. When set toimmediate, the leader serializes all changes to files and notifies the parallel apply workers to read and apply them at the end of the transaction.",PostgreSQL,0
